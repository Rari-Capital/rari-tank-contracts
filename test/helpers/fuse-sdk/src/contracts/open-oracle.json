{
  "contracts": {
    "contracts/OpenOracleData.sol:OpenOracleData": {
      "abi": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506102bb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063482a619314610030575b600080fd5b61004361003e3660046101c1565b610059565b6040516100509190610253565b60405180910390f35b600080600080848060200190518101906100739190610184565b925092509250600086805190602001206040516020016100939190610222565b604051602081830303815290604052805190602001209050600181838686604051600081526020016040526040516100ce9493929190610267565b6020604051602081039080840390855afa1580156100f0573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b600082601f830112610116578081fd5b813567ffffffffffffffff8082111561012d578283fd5b604051601f8301601f19168101602001828111828210171561014d578485fd5b60405282815292508284830160200186101561016857600080fd5b8260208601602083013760006020848301015250505092915050565b600080600060608486031215610198578283fd5b8351925060208401519150604084015160ff811681146101b6578182fd5b809150509250925092565b600080604083850312156101d3578182fd5b823567ffffffffffffffff808211156101ea578384fd5b6101f686838701610106565b9350602085013591508082111561020b578283fd5b5061021885828601610106565b9150509250929050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b93845260ff929092166020840152604083015260608201526080019056fea26469706673582212202451c0eb9b8ec38c85ea55c1358ad78906a30240333582432856224bbd9cb17b64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"title\":\"The Open Oracle Data Base Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOracleData.sol\":\"OpenOracleData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/OpenOraclePriceData.sol:OpenOraclePriceData": {
      "abi": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"priorTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"NotWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"Write\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"put\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b50610bbe806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806338636e9a14610051578063482a61931461018457806376977a3a146102c9578063fc2525ab14610363575b600080fd5b61010f6004803603604081101561006757600080fd5b810190602081018135600160201b81111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111600160201b831117156100b457600080fd5b919390929091602081019035600160201b8111156100d157600080fd5b8201836020820111156100e357600080fd5b803590602001918460018302840111600160201b8311171561010457600080fd5b509092509050610410565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610149578181015183820152602001610131565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ad6004803603604081101561019a57600080fd5b810190602081018135600160201b8111156101b457600080fd5b8201836020820111156101c657600080fd5b803590602001918460018302840111600160201b831117156101e757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561023957600080fd5b82018360208201111561024b57600080fd5b803590602001918460018302840111600160201b8311171561026c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610446945050505050565b604080516001600160a01b039092168252519081900360200190f35b610347600480360360408110156102df57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561030957600080fd5b82018360208201111561031b57600080fd5b803590602001918460018302840111600160201b8311171561033c57600080fd5b509092509050610533565b604080516001600160401b039092168252519081900360200190f35b6103e16004803603604081101561037957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103a357600080fd5b8201836020820111156103b557600080fd5b803590602001918460018302840111600160201b831117156103d657600080fd5b50909250905061058c565b60405180836001600160401b03168152602001826001600160401b031681526020019250505060405180910390f35b606060008060606000610425898989896105fb565b9350935093509350610439848484846108c8565b9998505050505050505050565b60008060008084806020019051606081101561046157600080fd5b5080516020808301516040938401518a518b84012085517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081860152603c8082019290925286518082039092018252605c81018088528251928601929092206000909252607c810180885282905260ff8316609c82015260bc810186905260dc8101849052955194985091965094509260019260fc8083019392601f198301929081900390910190855afa15801561051d573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b6001600160a01b0383166000908152602081905260408082209051849084908083838082843791909101948552505060405192839003602001909220546001600160401b03600160401b90910416925050509392505050565b6000806000806000876001600160a01b03166001600160a01b0316815260200190815260200160002085856040518083838082843791909101948552505060405192839003602001909220546001600160401b038082169650600160401b909104169350505050935093915050565b600080606060008061067689898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a908190840183828082843760009201919091525061044692505050565b905060606000606060008c8c608081101561069057600080fd5b810190602081018135600160201b8111156106aa57600080fd5b8201836020820111156106bc57600080fd5b803590602001918460018302840111600160201b831117156106dd57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092956001600160401b03853516959094909350604081019250602001359050600160201b81111561074057600080fd5b82018360208201111561075257600080fd5b803590602001918460018302840111600160201b8311171561077357600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516570726963657360d01b60208083019190915282516006818403018152602683019093528251928101929092208a519a9e50989c50939a5093356001600160401b0316985095968b96506046909201945084935050908401908083835b602083106108275780518252601f199092019160209182019101610808565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120146108b4576040805162461bcd60e51b815260206004820152601d60248201527f4b696e64206f662064617461206d757374206265202770726963657327000000604482015290519081900360640190fd5b939c919b5099509197509095505050505050565b6001600160a01b038416600090815260208181526040808320905185516060949387929182918401908083835b602083106109145780518252601f1990920191602091820191016108f5565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922080549093506001600160401b0390811690881611915050801561096e575042610e1001856001600160401b0316105b801561098257506001600160a01b03861615155b15610b32576040518060400160405280866001600160401b03168152602001846001600160401b0316815250600080886001600160a01b03166001600160a01b03168152602001908152602001600020856040518082805190602001908083835b60208310610a025780518252601f1990920191602091820191016109e3565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520865181549784015167ffffffffffffffff199098166001600160401b03918216176fffffffffffffffff00000000000000001916600160401b988216989098029790971790558a861685830152948816948401949094525050606080825286519082015285516001600160a01b038916927f4d3f5aa96531b83f5389343ecd20cd8ac1fba33b64634c1b547a4d85d31540d39288928a92899291829160808301919087019080838360005b83811015610af1578181015183820152602001610ad9565b50505050905090810190601f168015610b1e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2610b7e565b8054604080516001600160401b03928316815291871660208301524282820152517f7d218dba44a461fb2d7b5fe792128439313d3c48c86d4c3e4981a8eaca831a769181900360600190a15b509194935050505056fea26469706673582212200a9857a039c12a50fa7ff7475813aba2ae946d186bd535a97621faa65cdfb70064736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"priorTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"NotWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"Write\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"put\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"get(address,string)\":{\"params\":{\"key\":\"The selector for the value to return\",\"source\":\"The verifiable author of the data\"},\"returns\":{\"_0\":\"The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\"}},\"getPrice(address,string)\":{\"params\":{\"key\":\"The selector for the value to return\",\"source\":\"The verifiable author of the data\"},\"returns\":{\"_0\":\"The price value (defaults to 0)\"}},\"put(bytes,bytes)\":{\"params\":{\"message\":\"The payload containing the timestamp, and (key, value) pairs\",\"signature\":\"The cryptographic signature of the message payload, authorizing the source to write\"},\"returns\":{\"_0\":\"The keys that were written\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"stateVariables\":{\"data\":{\"details\":\"The most recent authenticated data from all sources.  This is private because dynamic mapping keys preclude auto-generated getters.\"}},\"title\":\"The Open Oracle Price Data Contract\",\"version\":1},\"userdoc\":{\"events\":{\"NotWritten(uint64,uint256,uint256)\":{\"notice\":\"The event emitted when the timestamp on a price is invalid and it is not written to storage\"},\"Write(address,string,uint64,uint64)\":{\"notice\":\"The event emitted when a source writes to its storage\"}},\"kind\":\"user\",\"methods\":{\"get(address,string)\":{\"notice\":\"Read a single key from an authenticated source\"},\"getPrice(address,string)\":{\"notice\":\"Read only the value for a single key from an authenticated source\"},\"put(bytes,bytes)\":{\"notice\":\"Write a bunch of signed datum to the authenticated storage mapping\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"}},\"notice\":\"Values stored in this contract should represent a USD price with 6 decimals precision\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOraclePriceData.sol\":\"OpenOraclePriceData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        (address source, uint64 timestamp, string memory key, uint64 value) = decodeMessage(message, signature);\\n        return putInternal(source, timestamp, key, value);\\n    }\\n\\n    function putInternal(address source, uint64 timestamp, string memory key, uint64 value) internal returns (string memory) {\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n        return key;\\n    }\\n\\n    function decodeMessage(bytes calldata message, bytes calldata signature) internal pure returns (address, uint64, string memory, uint64) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n        return (source, timestamp, key, value);\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x16fa7df6cfce0bad70407ef8000b09d8468777a3453f30425ea553117abef4c6\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/OpenOracleView.sol:OpenOracleView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506040516102c23803806102c28339818101604052604081101561003357600080fd5b81516020830180516040519294929383019291908464010000000082111561005a57600080fd5b90830190602082018581111561006f57600080fd5b825186602082028301116401000000008211171561008c57600080fd5b82525081516020918201928201910280838360005b838110156100b95781810151838201526020016100a1565b50505050905001604052505050600081511161011c576040805162461bcd60e51b815260206004820152601c60248201527f4d75737420696e697469616c697a65207769746820736f757263657300000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038416179055805161014a906001906020840190610152565b5050506101d6565b8280548282559060005260206000209081019282156101a7579160200282015b828111156101a757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610172565b506101b39291506101b7565b5090565b5b808211156101b35780546001600160a01b03191681556001016101b8565b60de806101e46000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063a3663d37146037578063e61a5fe414606d575b600080fd5b605160048036036020811015604b57600080fd5b50356073565b604080516001600160a01b039092168252519081900360200190f35b60516099565b60018181548110607f57fe5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03168156fea2646970667358221220661e79eddb81ec4a3c8cda6ea1240ddc3aebc84ded3cc17dcaf65a15f347f9d264736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"According to the protocol, Views must be immutable to be considered conforming.\",\"params\":{\"data_\":\"The address of the oracle data contract which is backing the view\",\"sources_\":\"The list of source addresses to include in the aggregate value\"}}},\"stateVariables\":{\"sources\":{\"details\":\"Note that while it is possible to create a view with dynamic sources,  that would not conform to the Open Oracle Standard specification.\"}},\"title\":\"The Open Oracle View Base Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"Construct a view given the oracle backing address and the list of sources\",\"priceData()\":{\"notice\":\"The Oracle Data Contract backing this View\"},\"sources(uint256)\":{\"notice\":\"The static list of sources used by this View\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOracleView.sol\":\"OpenOracleView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOracleView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle View Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleView {\\n    /**\\n     * @notice The Oracle Data Contract backing this View\\n     */\\n    OpenOracleData public priceData;\\n\\n    /**\\n     * @notice The static list of sources used by this View\\n     * @dev Note that while it is possible to create a view with dynamic sources,\\n     *  that would not conform to the Open Oracle Standard specification.\\n     */\\n    address[] public sources;\\n\\n    /**\\n     * @notice Construct a view given the oracle backing address and the list of sources\\n     * @dev According to the protocol, Views must be immutable to be considered conforming.\\n     * @param data_ The address of the oracle data contract which is backing the view\\n     * @param sources_ The list of source addresses to include in the aggregate value\\n     */\\n    constructor(OpenOracleData data_, address[] memory sources_) public {\\n        require(sources_.length > 0, \\\"Must initialize with sources\\\");\\n        priceData = data_;\\n        sources = sources_;\\n    }\\n}\\n\",\"keccak256\":\"0x1029fda7ff1c2753d86a476156bf0ad1c7fa1a89f6e61f2798adbff7fdcb2680\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/ReporterView.sol:ReporterView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_REPORTER_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "bin": "60c06040523480156200001157600080fd5b50604051620024dd380380620024dd8339810160408190526200003491620004ce565b60038054336001600160a01b03199091161760ff60a01b1916600160a01b8315150217905560006004819055829082906200006f83620000a1565b5050506001600160601b0319606085811b821660805284901b1660a052620000978262000379565b50505050620006d7565b60005b81518110156200037557600354600160a01b900460ff16620001745760026000838381518110620000d157fe5b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff1615620001225760405162461bcd60e51b815260040162000119906200064b565b60405180910390fd5b600860008383815181106200013357fe5b60209081029190910181015181015182528101919091526040016000205460ff1615620001745760405162461bcd60e51b815260040162000119906200060b565b60008282815181106200018357fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b03909216919091178155918101518284015560408101516002830155606081015160038301805492949192909160ff1990911690836004811115620001fd57fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b0319909416939093179190911691909117905560008054835160001991909101916001918590859081106200026f57fe5b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002081905550600160026000848481518110620002b257fe5b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160008054905003600760008484815181106200030f57fe5b6020026020010151602001518152602001908152602001600020819055506001600860008484815181106200034057fe5b6020908102919091018101518101518252810191909152604001600020805460ff1916911515919091179055600101620000a4565b5050565b60005b8151811015620003755762000390620003d8565b8282815181106200039d57fe5b602002602001015190506000816040015111620003ce5760405162461bcd60e51b81526004016200011990620005c9565b506001016200037c565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b80516200042281620006be565b92915050565b805180151581146200042257600080fd5b600060e082840312156200044b578081fd5b6200045760e062000697565b905081516200046681620006be565b8082525060208201516020820152604082015160408201526060820151600581106200049157600080fd5b606082015260808281015190820152620004af8360a0840162000415565b60a0820152620004c38360c0840162000428565b60c082015292915050565b60008060008060808587031215620004e4578384fd5b8451620004f181620006be565b809450506020808601516200050681620006be565b60408701519094506001600160401b038082111562000523578485fd5b818801915088601f83011262000537578485fd5b81518181111562000546578586fd5b62000555848583020162000697565b818152848101925083850160e0808402860187018d101562000575578889fd5b8895505b83861015620005a5576200058e8d8362000439565b855260019590950194938601939081019062000579565b50508096505050505050620005be866060870162000428565b905092959194509250565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b6020808252603190820152600080516020620024bd8339815191526040820152703a3434b99039bcb6b137b6103430b9b41760791b606082015260800190565b6020808252603e90820152600080516020620024bd83398151915260408201527f7468697320756e6465726c79696e6720746f6b656e20616464726573732e0000606082015260800190565b6040518181016001600160401b0381118282101715620006b657600080fd5b604052919050565b6001600160a01b0381168114620006d457600080fd5b50565b60805160601c60a05160601c611da36200071a600039806102d2528061061e52806106ae5280610f8052508061074d528061079b5280610f515250611da36000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80638a003888116100c3578063e073a2411161007c578063e073a2411461027f578063e61a5fe414610287578063ecc1e9841461028f578063f851a440146102a2578063fc57d4df146102aa578063fe2c6198146102bd5761014d565b80638a0038881461022b5780638aba91b41461023e5780638e499bcf146102515780638f283970146102595780639f5996311461026c578063d1b353b4146102235761014d565b80634da21942116101155780634da21942146101cb57806360846bc6146101de57806363a9acc9146101fe578063651ed78814610213578063656b0fd11461021b57806369aa3ac6146102235761014d565b8063010ec441146101525780631a12520414610170578063276c2cba146101905780632d1c668f146101a3578063482a6193146101b8575b600080fd5b61015a6102d0565b6040516101679190611854565b60405180910390f35b61018361017e3660046115f9565b6102f4565b6040516101679190611be7565b61018361019e3660046116ae565b610349565b6101b66101b1366004611540565b610386565b005b61015a6101c636600461164e565b6103c5565b6101836101d9366004611473565b610472565b6101f16101ec3660046115f9565b610485565b6040516101679190611c4f565b610206610497565b604051610167919061188c565b61020661049c565b6102066104a5565b6101f16104b5565b6101836102393660046115f9565b6104c1565b6101b661024c36600461164e565b61059a565b6101f16106e0565b6101b6610267366004611473565b6106e6565b61018361027a366004611473565b610732565b6101f1610745565b61015a61074b565b6101b661029d3660046114ab565b61076f565b61015a610959565b6101f16102b8366004611473565b610968565b6101f16102cb3660046116ae565b610a30565b7f000000000000000000000000000000000000000000000000000000000000000081565b6102fc6112ad565b600061030783610a55565b905060001981146103235761031b816104c1565b915050610344565b60405162461bcd60e51b815260040161033b90611a24565b60405180910390fd5b919050565b6103516112ad565b6103808260405160200161036591906117e6565b604051602081830303815290604052805190602001206102f4565b92915050565b6003546001600160a01b031633146103b05760405162461bcd60e51b815260040161033b90611a54565b6103b981610aa2565b6103c281610d60565b50565b600080600080848060200190518101906103df9190611611565b925092509250600086805190602001206040516020016103ff9190611802565b6040516020818303038152906040528051906020012090506001818386866040516000815260200160405260405161043a9493929190611897565b6020604051602081039080840390855afa15801561045c573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b61047a6112ad565b600061030783610db7565b60056020526000908152604090205481565b600181565b60065460ff1681565b600354600160a01b900460ff1681565b670de0b6b3a764000081565b6104c96112ad565b6104d16106e0565b82106104ef5760405162461bcd60e51b815260040161033b90611a24565b600082815481106104fc57fe5b60009182526020918290206040805160e081018252600690930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154909190606083019060ff16600481111561055657fe5b600481111561056157fe5b8152600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b6060828060200190518101906105b0919061171a565b5090506040516020016105c290611833565b60405160208183030381529060405280519060200120816040516020016105e991906117e6565b604051602081830303815290604052805190602001201461061c5760405162461bcd60e51b815260040161033b90611b6f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661065084846103c5565b6001600160a01b0316146106765760405162461bcd60e51b815260040161033b90611a8b565b6006805460ff191660011790556040517f98a13f7b181a3a1f99c871e7a3507d4a037d386d157279f978e0d555ae9fe74d906106d3907f000000000000000000000000000000000000000000000000000000000000000090611854565b60405180910390a1505050565b60005490565b6003546001600160a01b031633146107105760405162461bcd60e51b815260040161033b90611a54565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61073a6112ad565b600061030783610dfb565b60045481565b7f000000000000000000000000000000000000000000000000000000000000000081565b84831461078e5760405162461bcd60e51b815260040161033b90611ba4565b60005b85811015610882577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338636e9a8888848181106107d457fe5b90506020028101906107e69190611c58565b8888868181106107f257fe5b90506020028101906108049190611c58565b6040518563ffffffff1660e01b815260040161082394939291906118b5565b600060405180830381600087803b15801561083d57600080fd5b505af1158015610851573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087991908101906116e8565b50600101610791565b5060005b818110156109505761094883838381811061089d57fe5b90506020028101906108af9190611c9c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109419250879150869050858181106108f557fe5b90506020028101906109079190611c9c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061034992505050565b6001610ef3565b600101610886565b50505050505050565b6003546001600160a01b031681565b6000816001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109a357600080fd5b505afa1580156109b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109db91906115dd565b156109ef5750670de0b6b3a7640000610344565b6109f76112ad565b610a0083610732565b90508060400151610a21670de0b6b3a7640000610a1c846110d6565b611273565b81610a2857fe5b049392505050565b6000610a3a6112ad565b610a4383610349565b9050610a4e816110d6565b9392505050565b6000805b600054811015610a985760008181548110610a7057fe5b906000526020600020906006020160010154831415610a90579050610344565b600101610a59565b5060001992915050565b60005b8151811015610d5c57600354600160a01b900460ff16610b625760026000838381518110610acf57fe5b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff1615610b145760405162461bcd60e51b815260040161033b90611adb565b60086000838381518110610b2457fe5b60209081029190910181015181015182528101919091526040016000205460ff1615610b625760405162461bcd60e51b815260040161033b9061194b565b6000828281518110610b7057fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b03909216919091178155918101518284015560408101516002830155606081015160038301805492949192909160ff1990911690836004811115610be957fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b031990941693909317919091169190911790556000805483516000199190910191600191859085908110610c5a57fe5b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002081905550600160026000848481518110610c9c57fe5b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000805490500360076000848481518110610cf857fe5b602002602001015160200151815260200190815260200160002081905550600160086000848481518110610d2857fe5b6020908102919091018101518101518252810191909152604001600020805460ff1916911515919091179055600101610aa5565b5050565b60005b8151811015610d5c57610d746112ad565b828281518110610d8057fe5b602002602001015190506000816040015111610dae5760405162461bcd60e51b815260040161033b90611909565b50600101610d63565b6001600160a01b03811660009081526002602052604081205460ff16610ddf57600019610380565b506001600160a01b031660009081526001602052604090205490565b6000610380826001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3957600080fd5b505afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7191906115dd565b610eeb57826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610eae57600080fd5b505afa158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee6919061148f565b610eee565b60005b610db7565b600282606001516004811115610f0557fe5b14610f225760405162461bcd60e51b815260040161033b90611b38565b600083604051602001610f3591906117e6565b60405160208183030381529060405280519060200120905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166376977a3a7f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b8152600401610fbd929190611868565b60206040518083038186803b158015610fd557600080fd5b505afa158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190611769565b6006546001600160401b0391909116915060ff1615611064577f27d52709c47286ff00de1178261d21424453b7d6c881850b02ee009d9b07ca6385826040516110579291906118e7565b60405180910390a16110cf565b6000828152600560205260409020548114158061107e5750825b156110cf5760008281526005602052604090819020829055517f159e83f4712ba2552e68be9d848e49bf6dd35c24f19564ffd523b6549450a2f4906110c690879084906118e7565b60405180910390a15b5050505050565b60006040516020016110e790611845565b60405160208183030381529060405280519060200120826020015114156111175750670de0b6b3a7640000610344565b60028260600151600481111561112957fe5b14156111c55760006005600060405160200161114490611845565b6040516020818303038152906040528051906020012081526020019081526020016000205490506000811161118b5760405162461bcd60e51b815260040161033b9061199c565b806111b5600560008660200151815260200190815260200160002054670de0b6b3a7640000611273565b816111bc57fe5b04915050610344565b6001826060015160048111156111d757fe5b1415611250576000600560006040516020016111f290611845565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116112395760405162461bcd60e51b815260040161033b9061199c565b806111b58460800151670de0b6b3a7640000611273565b60008260600151600481111561126257fe5b141561034457506080810151610344565b60008261128257506000610380565b8282028284828161128f57fe5b0414610a4e5760405162461bcd60e51b815260040161033b906119ed565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b803561038081611d4a565b60008083601f840112611306578182fd5b5081356001600160401b0381111561131c578182fd5b602083019150836020808302850101111561133657600080fd5b9250929050565b803561038081611d5f565b600082601f830112611358578081fd5b813561136b61136682611cf7565b611cb2565b915080825283602082850101111561138257600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126113ab578081fd5b81516113b961136682611cf7565b91508082528360208285010111156113d057600080fd5b6113e1816020840160208601611d1a565b5092915050565b600060e082840312156113f9578081fd5b61140360e0611cb2565b9050813561141081611d4a565b80825250602082013560208201526040820135604082015260608201356005811061143a57600080fd5b6060820152608082810135908201526114568360a084016112ea565b60a08201526114688360c0840161133d565b60c082015292915050565b600060208284031215611484578081fd5b8135610a4e81611d4a565b6000602082840312156114a0578081fd5b8151610a4e81611d4a565b600080600080600080606087890312156114c3578182fd5b86356001600160401b03808211156114d9578384fd5b6114e58a838b016112f5565b909850965060208901359150808211156114fd578384fd5b6115098a838b016112f5565b90965094506040890135915080821115611521578384fd5b5061152e89828a016112f5565b979a9699509497509295939492505050565b60006020808385031215611552578182fd5b82356001600160401b03811115611567578283fd5b8301601f81018513611577578283fd5b803561158561136682611cd8565b8181528381019083850160e0808502860187018a10156115a3578788fd5b8795505b848610156115cf576115b98a836113e8565b84526001959095019492860192908101906115a7565b509098975050505050505050565b6000602082840312156115ee578081fd5b8151610a4e81611d5f565b60006020828403121561160a578081fd5b5035919050565b600080600060608486031215611625578283fd5b8351925060208401519150604084015160ff81168114611643578182fd5b809150509250925092565b60008060408385031215611660578182fd5b82356001600160401b0380821115611676578384fd5b61168286838701611348565b93506020850135915080821115611697578283fd5b506116a485828601611348565b9150509250929050565b6000602082840312156116bf578081fd5b81356001600160401b038111156116d4578182fd5b6116e084828501611348565b949350505050565b6000602082840312156116f9578081fd5b81516001600160401b0381111561170e578182fd5b6116e08482850161139b565b6000806040838503121561172c578182fd5b82516001600160401b03811115611741578283fd5b61174d8582860161139b565b925050602083015161175e81611d4a565b809150509250929050565b60006020828403121561177a578081fd5b81516001600160401b0381168114610a4e578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526117d2816020860160208601611d1a565b601f01601f19169290920160200192915050565b600082516117f8818460208701611d1a565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b65726f7461746560d01b815260060190565b6208aa8960eb1b815260030190565b6001600160a01b0391909116815260200190565b6001600160a01b03831681526040602082018190526000906116e0908301846117ba565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b6000604082526118c9604083018688611790565b82810360208401526118dc818587611790565b979650505050505050565b6000604082526118fa60408301856117ba565b90508260208301529392505050565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526031908201527f546f6b656e20636f6e66696720616c72656164792065786973747320666f72206040820152703a3434b99039bcb6b137b6103430b9b41760791b606082015260800190565b60208082526031908201527f455448207072696365206e6f74207365742c2063616e6e6f7420636f6e7665726040820152700e840cce4deda40aaa68840e8de408aa89607b1b606082015260800190565b60208082526017908201527f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000604082015260600190565b6020808252601690820152751d1bdad95b8818dbdb999a59c81b9bdd08199bdd5b9960521b604082015260600190565b60208082526017908201527f6d73672e73656e646572206973206e6f742061646d696e000000000000000000604082015260600190565b60208082526030908201527f696e76616c69646174696f6e206d657373616765206d75737420636f6d65206660408201526f3937b6903a3432903932b837b93a32b960811b606082015260800190565b6020808252603e908201527f546f6b656e20636f6e66696720616c72656164792065786973747320666f722060408201527f7468697320756e6465726c79696e6720746f6b656e20616464726573732e0000606082015260800190565b6020808252601f908201527f6f6e6c79207265706f72746572207072696365732067657420706f7374656400604082015260600190565b6020808252818101527f696e76616c6964206d657373616765206d7573742062652027726f7461746527604082015260600190565b60208082526023908201527f6d6573736167657320616e64207369676e617475726573206d75737420626520604082015262313a3160e81b606082015260800190565b81516001600160a01b0390811682526020808401519083015260408084015190830152606083015160e08301919060058110611c1f57fe5b80606085015250608084015160808401528060a08501511660a08401525060c0830151151560c083015292915050565b90815260200190565b6000808335601e19843603018112611c6e578283fd5b8301803591506001600160401b03821115611c87578283fd5b60200191503681900382131561133657600080fd5b6000808335601e19843603018112611c6e578182fd5b6040518181016001600160401b0381118282101715611cd057600080fd5b604052919050565b60006001600160401b03821115611ced578081fd5b5060209081020190565b60006001600160401b03821115611d0c578081fd5b50601f01601f191660200190565b60005b83811015611d35578181015183820152602001611d1d565b83811115611d44576000848401525b50505050565b6001600160a01b03811681146103c257600080fd5b80151581146103c257600080fdfea26469706673582212209806d55cebf3fabb80493505dc55d92035aea8a454a331d6a07d4ed9d457612264736f6c634300060c0033546f6b656e20636f6e66696720616c72656164792065786973747320666f7220",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_REPORTER_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"params\":{\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"constructor\":{\"params\":{\"_canAdminOverwrite\":\"Whether or not existing token configs can be overwritten\",\"configs\":\"The static token configurations which define what prices are supported and how\",\"priceData_\":\"The OpenOraclePriceData contract to use\",\"reporter_\":\"The reporter whose prices are to be used\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbol(string)\":{\"params\":{\"symbol\":\"The symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbolHash(bytes32)\":{\"params\":{\"symbolHash\":\"The keccack256 of the symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals, for the given cToken address\"}},\"invalidateReporter(bytes,bytes)\":{\"details\":\"Only the reporter may sign a message which allows it to invalidate itself.  To be used in cases of emergency, if the reporter thinks their key may be compromised.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"}},\"postPrices(bytes[],bytes[],string[])\":{\"details\":\"We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\",\"params\":{\"messages\":\"The messages to post to the oracle\",\"signatures\":\"The signatures for the corresponding messages\",\"symbols\":\"The symbols to compare to anchor for authoritative reading\"}},\"price(string)\":{\"params\":{\"symbol\":\"The symbol to fetch the price of\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"stateVariables\":{\"_configIndexesBySymbolHash\":{\"details\":\"Maps symbol hashes to token config indexes\"},\"_configPresenceBySymbolHash\":{\"details\":\"Maps symbol hashes to booleans indicating if they have token configs\"}},\"version\":1},\"userdoc\":{\"events\":{\"PriceGuarded(string,uint256)\":{\"notice\":\"The event emitted when new prices are posted but the stored price is not updated due to the anchor\"},\"PriceUpdated(string,uint256)\":{\"notice\":\"The event emitted when the stored price is updated\"},\"ReporterInvalidated(address)\":{\"notice\":\"The event emitted when reporter invalidates itself\"}},\"kind\":\"user\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"notice\":\"Add new asset(s)\"},\"admin()\":{\"notice\":\"Admin address\"},\"canAdminOverwrite()\":{\"notice\":\"Whether or not existing token configs can be overwritten\"},\"changeAdmin(address)\":{\"notice\":\"Changes the admin\"},\"constructor\":\"Construct a uniswap anchored view for a set of token configurations\",\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigBySymbol(string)\":{\"notice\":\"Get the config for symbol\"},\"getTokenConfigBySymbolHash(bytes32)\":{\"notice\":\"Get the config for the symbolHash\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"invalidateReporter(bytes,bytes)\":{\"notice\":\"Invalidate the reporter, and fall back to using anchor directly in all cases\"},\"maxSecondsBeforePriceIsStale()\":{\"notice\":\"The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"postPrices(bytes[],bytes[],string[])\":{\"notice\":\"Post open oracle reporter prices, and recalculate stored price by comparing to anchor\"},\"price(string)\":{\"notice\":\"Get the official price for a symbol\"},\"priceData()\":{\"notice\":\"The Open Oracle Price Data contract\"},\"prices(bytes32)\":{\"notice\":\"Official prices by symbol hash\"},\"reporter()\":{\"notice\":\"The Open Oracle Reporter\"},\"reporterInvalidated()\":{\"notice\":\"Circuit breaker for using anchor price oracle directly, ignoring reporter\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReporterView.sol\":\"ReporterView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        (address source, uint64 timestamp, string memory key, uint64 value) = decodeMessage(message, signature);\\n        return putInternal(source, timestamp, key, value);\\n    }\\n\\n    function putInternal(address source, uint64 timestamp, string memory key, uint64 value) internal returns (string memory) {\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n        return key;\\n    }\\n\\n    function decodeMessage(bytes calldata message, bytes calldata signature) internal pure returns (address, uint64, string memory, uint64) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n        return (source, timestamp, key, value);\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x16fa7df6cfce0bad70407ef8000b09d8468777a3453f30425ea553117abef4c6\",\"license\":\"GPL-3.0\"},\"contracts/ReporterView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./OpenOraclePriceData.sol\\\";\\nimport \\\"./Uniswap/UniswapConfig.sol\\\";\\n\\ncontract ReporterView is UniswapConfig {    \\n    bool public constant IS_REPORTER_VIEW = true;\\n\\n    /// @notice The Open Oracle Price Data contract\\n    OpenOraclePriceData public immutable priceData;\\n\\n    /// @notice The number of wei in 1 ETH\\n    uint public constant ethBaseUnit = 1e18;\\n\\n    /// @notice A common scaling factor to maintain precision\\n    uint public constant expScale = 1e18;\\n\\n    /// @notice The Open Oracle Reporter\\n    address public immutable reporter;\\n\\n    /// @notice Official prices by symbol hash\\n    mapping(bytes32 => uint) public prices;\\n\\n    /// @notice Circuit breaker for using anchor price oracle directly, ignoring reporter\\n    bool public reporterInvalidated;\\n\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\n    event PriceGuarded(string symbol, uint reporter);\\n\\n    /// @notice The event emitted when the stored price is updated\\n    event PriceUpdated(string symbol, uint price);\\n\\n    /// @notice The event emitted when reporter invalidates itself\\n    event ReporterInvalidated(address reporter);\\n\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n    bytes32 constant rotateHash = keccak256(abi.encodePacked(\\\"rotate\\\"));\\n\\n    /// @dev Maps symbol hashes to token config indexes\\n    mapping(bytes32 => uint256) internal _configIndexesBySymbolHash;\\n\\n    /// @dev Maps symbol hashes to booleans indicating if they have token configs\\n    mapping(bytes32 => bool) internal _configPresenceBySymbolHash;\\n\\n    /**\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\n     * @param priceData_ The OpenOraclePriceData contract to use\\n     * @param reporter_ The reporter whose prices are to be used\\n     * @param configs The static token configurations which define what prices are supported and how\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\n     */\\n    constructor(OpenOraclePriceData priceData_,\\n                address reporter_,\\n                TokenConfig[] memory configs,\\n                bool _canAdminOverwrite) UniswapConfig(configs, _canAdminOverwrite, 0) public {\\n        // Initialize variables\\n        priceData = priceData_;\\n        reporter = reporter_;\\n\\n        // Initialize token configs\\n        initConfigs(configs);\\n    }\\n\\n    /**\\n     * @notice Initialize token configs\\n     * @param configs The static token configurations which define what prices are supported and how\\n     */\\n    function initConfigs(TokenConfig[] memory configs) internal pure {\\n        for (uint i = 0; i < configs.length; i++) {\\n            TokenConfig memory config = configs[i];\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to add new asset(s)\\n     * @param configs The static token configurations which define what prices are supported and how\\n     */\\n    function _add(TokenConfig[] memory configs) internal override {\\n        // For each config\\n        for (uint256 i = 0; i < configs.length; i++) {\\n            // If !canAdminOverwrite, check for existing configs\\n            if (!canAdminOverwrite) {\\n                require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\n                require(!_configPresenceBySymbolHash[configs[i].symbolHash], \\\"Token config already exists for this symbol hash.\\\");\\n            }\\n\\n            // Add config to state\\n            _configs.push(configs[i]);\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\n            _configIndexesBySymbolHash[configs[i].symbolHash] = _configs.length - 1;\\n            _configPresenceBySymbolHash[configs[i].symbolHash] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Add new asset(s)\\n     * @param configs The static token configurations which define what prices are supported and how\\n     */\\n    function add(TokenConfig[] memory configs) external {\\n        // Check msg.sender == admin\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\n\\n        // Add and init token configs\\n        _add(configs);\\n        initConfigs(configs);\\n    }\\n\\n    /**\\n     * @notice Get the official price for a symbol\\n     * @param symbol The symbol to fetch the price of\\n     * @return Price denominated in ETH, with 18 decimals\\n     */\\n    function price(string memory symbol) external view returns (uint) {\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\n        return priceInternal(config);\\n    }\\n\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\n        if (config.symbolHash == ethHash) return ethBaseUnit;\\n        if (config.priceSource == PriceSource.REPORTER) {\\n            // Prices are stored in terms of USD so we use the ETH/USD price to convert to ETH\\n            // if (prices[ethHash] <= 0) postPriceInternal(\\\"ETH\\\"); // TODO: Try to post ETH price\\n            uint usdPerEth = prices[ethHash];\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\n            // if (prices[config.symbolHash] <= 0) postPriceInternal(config.symbol, config, false); // TODO: Try to post price if not set\\n            return mul(prices[config.symbolHash], ethBaseUnit) / usdPerEth;\\n        }\\n        if (config.priceSource == PriceSource.FIXED_USD) {\\n            // Convert from fixed USD to ETH\\n            // if (prices[ethHash] <= 0) postPriceInternal(\\\"ETH\\\"); // TODO: Try to post price if not set\\n            uint usdPerEth = prices[ethHash];\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\n            return mul(config.fixedPrice, ethBaseUnit) / usdPerEth;\\n        }\\n        if (config.priceSource == PriceSource.FIXED_ETH) return config.fixedPrice;\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a cToken\\n     * @dev Implements the PriceOracle interface for Compound v2.\\n     * @param cToken The cToken address for price retrieval\\n     * @return Price denominated in ETH, with 18 decimals, for the given cToken address\\n     */\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\n        if (CToken(cToken).isCEther()) return ethBaseUnit;\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\n         // Since the prices in this view have 18 decimals, we must scale them by 1e(36 - 18 - baseUnit)\\n        return mul(1e18, priceInternal(config)) / config.baseUnit;\\n    }\\n\\n    /**\\n     * @notice Post open oracle reporter prices, and recalculate stored price by comparing to anchor\\n     * @dev We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\\n     * @param messages The messages to post to the oracle\\n     * @param signatures The signatures for the corresponding messages\\n     * @param symbols The symbols to compare to anchor for authoritative reading\\n     */\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\n\\n        // Save the prices\\n        for (uint i = 0; i < messages.length; i++) {\\n            priceData.put(messages[i], signatures[i]);\\n        }\\n\\n        // Try to update the view storage\\n        for (uint i = 0; i < symbols.length; i++) {\\n            postPriceInternal(symbols[i], getTokenConfigBySymbol(symbols[i]), true);\\n        }\\n    }\\n\\n    function postPriceInternal(string memory symbol) internal {\\n        postPriceInternal(symbol, getTokenConfigBySymbol(symbol), false);\\n    }\\n\\n    function postPriceInternal(string memory symbol, TokenConfig memory config, bool forceUpdate) internal {\\n        require(config.priceSource == PriceSource.REPORTER, \\\"only reporter prices get posted\\\");\\n\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\n        uint reporterPrice = priceData.getPrice(reporter, symbol);\\n\\n        if (reporterInvalidated) {\\n            emit PriceGuarded(symbol, reporterPrice);\\n        } else if (prices[symbolHash] != reporterPrice || forceUpdate) {\\n            prices[symbolHash] = reporterPrice;\\n            emit PriceUpdated(symbol, reporterPrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Invalidate the reporter, and fall back to using anchor directly in all cases\\n     * @dev Only the reporter may sign a message which allows it to invalidate itself.\\n     *  To be used in cases of emergency, if the reporter thinks their key may be compromised.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     */\\n    function invalidateReporter(bytes memory message, bytes memory signature) external {\\n        (string memory decodedMessage, ) = abi.decode(message, (string, address));\\n        require(keccak256(abi.encodePacked(decodedMessage)) == rotateHash, \\\"invalid message must be 'rotate'\\\");\\n        require(source(message, signature) == reporter, \\\"invalidation message must come from the reporter\\\");\\n        reporterInvalidated = true;\\n        emit ReporterInvalidated(reporter);\\n    }\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n\\n    /// @dev Overflow proof multiplication\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) return 0;\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\n        for (uint256 i = 0; i < _configs.length; i++) if (symbolHash == _configs[i].symbolHash) return i;\\n        return uint(-1);\\n    }\\n\\n    /**\\n     * @notice Get the config for symbol\\n     * @param symbol The symbol of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n    }\\n\\n    /**\\n     * @notice Get the config for the symbolHash\\n     * @param symbolHash The keccack256 of the symbol of the config to get\\n     * @return The config object\\n     */\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\n        uint index = getSymbolHashIndex(symbolHash);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbdfad23eea0ce4ae532de831c0234b620bf71ba22e04043d48343346db5b4d7e\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface CToken {\\r\\n    function isCEther() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface CErc20 {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract UniswapConfig {\\r\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\r\\n    enum PriceSource {\\r\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\r\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\r\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\r\\n        TWAP,      /// implies the price is set by TWAPs (only available on UniswapView)\\r\\n        UNISWAP    /// implies the price is set by the direct Uniswap price (only available on UniswapDirectView)\\r\\n    }\\r\\n\\r\\n    /// @dev Describe how the USD price should be determined for an asset.\\r\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\r\\n    struct TokenConfig {\\r\\n        address underlying;\\r\\n        bytes32 symbolHash;\\r\\n        uint256 baseUnit;\\r\\n        PriceSource priceSource;\\r\\n        uint256 fixedPrice;\\r\\n        address uniswapMarket;\\r\\n        bool isUniswapReversed;\\r\\n    }\\r\\n\\r\\n    /// @dev Token config objects\\r\\n    TokenConfig[] internal _configs;\\r\\n\\r\\n    /// @dev Maps underlying addresses to token config indexes\\r\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\r\\n\\r\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\r\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\r\\n    \\r\\n    /// @notice Admin address\\r\\n    address public admin;\\r\\n    \\r\\n    /// @notice Whether or not existing token configs can be overwritten\\r\\n    bool public canAdminOverwrite;\\r\\n\\r\\n    /// @notice The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n    uint256 public maxSecondsBeforePriceIsStale;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an immutable store of configs into the contract data\\r\\n     * @param configs The configs for the supported assets\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs, bool _canAdminOverwrite, uint256 _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        admin = msg.sender;\\r\\n        canAdminOverwrite = _canAdminOverwrite;\\r\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\r\\n\\r\\n        // Add configs\\r\\n        _add(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal virtual {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing config\\r\\n            if (!canAdminOverwrite) require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the admin\\r\\n    function changeAdmin(address newAdmin) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /// @notice The number of tokens this contract actually supports\\r\\n    function numTokens() public view returns (uint256) {\\r\\n        return _configs.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by cToken address\\r\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\r\\n        return getUnderlyingIndex(CToken(cToken).isCEther() ? address(0) : CErc20(cToken).underlying());\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by underlying ERC20 token address\\r\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\r\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the i-th config, according to the order they were passed in originally\\r\\n     * @param i The index of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\r\\n        require(i < numTokens(), \\\"token config not found\\\");\\r\\n        return _configs[i];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the cToken\\r\\n     * @param cToken The address of the cToken of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\r\\n        uint index = getCTokenIndex(cToken);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for an underlying asset\\r\\n     * @param underlying The address of the underlying asset of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\r\\n        uint index = getUnderlyingIndex(underlying);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb01fcfa0aba555d471ff2b824ac1190b91e3104cf5f5be3341d967a3442f1773\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapAnchoredView.sol:UniswapAnchoredView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isSecure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxSecondsBeforePriceIsStale\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_ANCHORED_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSecure\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isSecure\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxSecondsBeforePriceIsStale\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_ANCHORED_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSecure\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"params\":{\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"constructor\":{\"details\":\"Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\",\"params\":{\"_canAdminOverwrite\":\"Whether or not existing token configs can be overwritten\",\"anchorPeriod_\":\"The minimum amount of time required for the old uniswap price accumulator to be replaced\",\"anchorToleranceMantissa_\":\"The percentage tolerance that the reporter may deviate from the uniswap anchor\",\"configs\":\"The static token configurations which define what prices are supported and how\",\"priceData_\":\"The OpenOraclePriceData contract to use\",\"reporter_\":\"The reporter whose prices are to be used\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbol(string)\":{\"params\":{\"symbol\":\"The symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbolHash(bytes32)\":{\"params\":{\"symbolHash\":\"The keccack256 of the symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals, for the given cToken address\"}},\"invalidateReporter(bytes,bytes)\":{\"details\":\"Only the reporter may sign a message which allows it to invalidate itself.  To be used in cases of emergency, if the reporter thinks their key may be compromised.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"}},\"postPrices(bytes[],bytes[],string[])\":{\"details\":\"We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\",\"params\":{\"messages\":\"The messages to post to the oracle\",\"signatures\":\"The signatures for the corresponding messages\",\"symbols\":\"The symbols to compare to anchor for authoritative reading\"}},\"price(string)\":{\"params\":{\"symbol\":\"The symbol to fetch the price of\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"stateVariables\":{\"UNISWAP_V2_FACTORY_ADDRESS\":{\"details\":\"UniswapV2Factory contract address.\"},\"WETH_ADDRESS\":{\"details\":\"WETH contract address.\"},\"_configIndexesBySymbolHash\":{\"details\":\"Maps symbol hashes to token config indexes\"},\"_configPresenceBySymbolHash\":{\"details\":\"Maps symbol hashes to booleans indicating if they have token configs\"},\"isSecure\":{\"details\":\"Boolean indicating if Uniswap anchors are verified\"}},\"version\":1},\"userdoc\":{\"events\":{\"AnchorPriceUpdated(string,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when anchor price is updated\"},\"PriceGuarded(string,uint256,uint256)\":{\"notice\":\"The event emitted when new prices are posted but the stored price is not updated due to the anchor\"},\"PriceUpdated(string,uint256)\":{\"notice\":\"The event emitted when the stored price is updated\"},\"ReporterInvalidated(address)\":{\"notice\":\"The event emitted when reporter invalidates itself\"},\"UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when the uniswap window changes\"}},\"kind\":\"user\",\"methods\":{\"IS_UNISWAP_ANCHORED_VIEW()\":{\"notice\":\"Constant indicating that this contract is a UniswapAnchoredView\"},\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"notice\":\"Add new asset(s)\"},\"admin()\":{\"notice\":\"Admin address\"},\"anchorPeriod()\":{\"notice\":\"The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\"},\"canAdminOverwrite()\":{\"notice\":\"Whether or not existing token configs can be overwritten\"},\"changeAdmin(address)\":{\"notice\":\"Changes the admin\"},\"constructor\":\"Construct a uniswap anchored view for a set of token configurations\",\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigBySymbol(string)\":{\"notice\":\"Get the config for symbol\"},\"getTokenConfigBySymbolHash(bytes32)\":{\"notice\":\"Get the config for the symbolHash\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"invalidateReporter(bytes,bytes)\":{\"notice\":\"Invalidate the reporter, and fall back to using anchor directly in all cases\"},\"lowerBoundAnchorRatio()\":{\"notice\":\"The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\"},\"maxSecondsBeforePriceIsStale()\":{\"notice\":\"The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\"},\"newObservations(bytes32)\":{\"notice\":\"The new observation for each symbolHash\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"oldObservations(bytes32)\":{\"notice\":\"The old observation for each symbolHash\"},\"postPrices(bytes[],bytes[],string[])\":{\"notice\":\"Post open oracle reporter prices, and recalculate stored price by comparing to anchor\"},\"price(string)\":{\"notice\":\"Get the official price for a symbol\"},\"priceData()\":{\"notice\":\"The Open Oracle Price Data contract\"},\"prices(bytes32)\":{\"notice\":\"Official prices by symbol hash\"},\"reporter()\":{\"notice\":\"The Open Oracle Reporter\"},\"reporterInvalidated()\":{\"notice\":\"Circuit breaker for using anchor price oracle directly, ignoring reporter\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"},\"upperBoundAnchorRatio()\":{\"notice\":\"The highest ratio of the new price to the anchor price that will still trigger the price to be updated\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapAnchoredView.sol\":\"UniswapAnchoredView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        (address source, uint64 timestamp, string memory key, uint64 value) = decodeMessage(message, signature);\\n        return putInternal(source, timestamp, key, value);\\n    }\\n\\n    function putInternal(address source, uint64 timestamp, string memory key, uint64 value) internal returns (string memory) {\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n        return key;\\n    }\\n\\n    function decodeMessage(bytes calldata message, bytes calldata signature) internal pure returns (address, uint64, string memory, uint64) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n        return (source, timestamp, key, value);\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x16fa7df6cfce0bad70407ef8000b09d8468777a3453f30425ea553117abef4c6\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../OpenOraclePriceData.sol\\\";\\r\\nimport \\\"./UniswapConfig.sol\\\";\\r\\nimport \\\"./UniswapLib.sol\\\";\\r\\n\\r\\nstruct Observation {\\r\\n    uint timestamp;\\r\\n    uint acc;\\r\\n}\\r\\n\\r\\ncontract UniswapAnchoredView is UniswapConfig {\\r\\n    using FixedPoint for *;\\r\\n    \\r\\n    /// @notice Constant indicating that this contract is a UniswapAnchoredView\\r\\n    bool public constant IS_UNISWAP_ANCHORED_VIEW = true;\\r\\n\\r\\n    /// @notice The Open Oracle Price Data contract\\r\\n    OpenOraclePriceData public immutable priceData;\\r\\n\\r\\n    /// @notice The number of wei in 1 ETH\\r\\n    uint public constant ethBaseUnit = 1e18;\\r\\n\\r\\n    /// @notice A common scaling factor to maintain precision\\r\\n    uint public constant expScale = 1e18;\\r\\n\\r\\n    /// @notice The Open Oracle Reporter\\r\\n    address public immutable reporter;\\r\\n\\r\\n    /// @notice The highest ratio of the new price to the anchor price that will still trigger the price to be updated\\r\\n    uint public immutable upperBoundAnchorRatio;\\r\\n\\r\\n    /// @notice The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\\r\\n    uint public immutable lowerBoundAnchorRatio;\\r\\n\\r\\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\\r\\n    uint public immutable anchorPeriod;\\r\\n\\r\\n    /// @notice Official prices by symbol hash\\r\\n    mapping(bytes32 => uint) public prices;\\r\\n\\r\\n    /// @notice Circuit breaker for using anchor price oracle directly, ignoring reporter\\r\\n    bool public reporterInvalidated;\\r\\n\\r\\n    /// @notice The old observation for each symbolHash\\r\\n    mapping(bytes32 => Observation) public oldObservations;\\r\\n\\r\\n    /// @notice The new observation for each symbolHash\\r\\n    mapping(bytes32 => Observation) public newObservations;\\r\\n\\r\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\r\\n    event PriceGuarded(string symbol, uint reporter, uint anchor);\\r\\n\\r\\n    /// @notice The event emitted when the stored price is updated\\r\\n    event PriceUpdated(string symbol, uint price);\\r\\n\\r\\n    /// @notice The event emitted when anchor price is updated\\r\\n    event AnchorPriceUpdated(string symbol, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\\r\\n\\r\\n    /// @notice The event emitted when the uniswap window changes\\r\\n    event UniswapWindowUpdated(bytes32 indexed symbolHash, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\r\\n\\r\\n    /// @notice The event emitted when reporter invalidates itself\\r\\n    event ReporterInvalidated(address reporter);\\r\\n\\r\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\r\\n    bytes32 constant btcSymbolHash = keccak256(abi.encodePacked(\\\"BTC\\\"));\\r\\n    bytes32 constant wbtcSymbolHash = keccak256(abi.encodePacked(\\\"WBTC\\\"));\\r\\n    bytes32 constant rotateHash = keccak256(abi.encodePacked(\\\"rotate\\\"));\\r\\n\\r\\n    /// @dev Maps symbol hashes to token config indexes\\r\\n    mapping(bytes32 => uint256) internal _configIndexesBySymbolHash;\\r\\n\\r\\n    /// @dev Maps symbol hashes to booleans indicating if they have token configs\\r\\n    mapping(bytes32 => bool) internal _configPresenceBySymbolHash;\\r\\n\\r\\n    /// @dev Boolean indicating if Uniswap anchors are verified\\r\\n    bool public isSecure;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\r\\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\\r\\n     * @param priceData_ The OpenOraclePriceData contract to use\\r\\n     * @param reporter_ The reporter whose prices are to be used\\r\\n     * @param anchorToleranceMantissa_ The percentage tolerance that the reporter may deviate from the uniswap anchor\\r\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     */\\r\\n    constructor(OpenOraclePriceData priceData_,\\r\\n                address reporter_,\\r\\n                uint anchorToleranceMantissa_,\\r\\n                uint anchorPeriod_,\\r\\n                TokenConfig[] memory configs,\\r\\n                bool _canAdminOverwrite,\\r\\n                bool _isSecure,\\r\\n                uint256 _maxSecondsBeforePriceIsStale) UniswapConfig(configs, _canAdminOverwrite, _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        priceData = priceData_;\\r\\n        reporter = reporter_;\\r\\n        anchorPeriod = anchorPeriod_;\\r\\n        isSecure = _isSecure;\\r\\n\\r\\n        // Allow the tolerance to be whatever the deployer chooses, but prevent under/overflow (and prices from being 0)\\r\\n        upperBoundAnchorRatio = anchorToleranceMantissa_ > uint(-1) - 100e16 ? uint(-1) : 100e16 + anchorToleranceMantissa_;\\r\\n        lowerBoundAnchorRatio = anchorToleranceMantissa_ < 100e16 ? 100e16 - anchorToleranceMantissa_ : 1;\\r\\n\\r\\n        // If secure, require !canAdminOverwrite and checkTokenConfigs\\r\\n        if (isSecure) {\\r\\n            require(!canAdminOverwrite, \\\"canAdminOverwrite must be set to false for secure UniswapView contracts.\\\");\\r\\n            checkTokenConfigs(configs);\\r\\n        }\\r\\n\\r\\n        // Initialize token configs\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev UniswapV2Factory contract address.\\r\\n     */\\r\\n    address constant private UNISWAP_V2_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    \\r\\n    /**\\r\\n     * @dev WETH contract address.\\r\\n     */\\r\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies token configs\\r\\n     * @param configs The configs for the supported assets\\r\\n     */\\r\\n    function checkTokenConfigs(TokenConfig[] memory configs) internal view {\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // Check symbolHash for ETH\\r\\n            if (configs[i].symbolHash != ethHash) {\\r\\n                require(configs[i].uniswapMarket == 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc, \\\"Incorrect Uniswap market for ETH: must be USDC-ETH.\\\");\\r\\n                require(!configs[i].isUniswapReversed, \\\"Incorrect Uniswap market reversal for ETH: must be USDC-ETH (not reversed).\\\");\\r\\n                require(configs[i].underlying == address(0), \\\"Underlying token address must be the zero address for ETH.\\\");\\r\\n                require(configs[i].fixedPrice == 0, \\\"ETH token config fixed price must be 0.\\\");\\r\\n                require(configs[i].baseUnit == ethBaseUnit, \\\"ETH token config base unit must be 1e18.\\\");\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // Check symbolHash against underlying symbol (with exception for WBTC/BTC)\\r\\n            bytes32 realSymbolHash = keccak256(abi.encodePacked(IERC20(configs[i].underlying).symbol()));\\r\\n            require(realSymbolHash == configs[i].symbolHash || (realSymbolHash == wbtcSymbolHash && configs[i].symbolHash == btcSymbolHash), \\\"Symbol mismatch between token config and ERC20 symbol method.\\\");\\r\\n\\r\\n            // Check baseUnit against underlying decimals\\r\\n            require(10 ** uint256(IERC20(configs[i].underlying).decimals()) == configs[i].baseUnit, \\\"Incorrect token config base unit.\\\");\\r\\n\\r\\n            // Check for WETH\\r\\n            if (configs[i].underlying == WETH_ADDRESS) {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.FIXED_ETH, \\\"Invalid WETH token config price source: must be FIXED_ETH.\\\");\\r\\n                \\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 1e18, \\\"WETH token config fixed price must be 1e18.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                require(configs[i].uniswapMarket == address(0), \\\"WETH Uniswap market not necessary.\\\");\\r\\n                configs[i].isUniswapReversed = false;\\r\\n            } else {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.UNISWAP, \\\"Invalid token config price source: must be UNISWAP.\\\");\\r\\n\\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 0, \\\"Token config fixed price must be 0.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_V2_FACTORY_ADDRESS, configs[i].underlying, WETH_ADDRESS));\\r\\n                require(configs[i].uniswapMarket == address(pair), \\\"Token config Uniswap market is not correct.\\\");\\r\\n                address token0 = pair.token0();\\r\\n                require((token0 == configs[i].underlying && !configs[i].isUniswapReversed) || (token0 != configs[i].underlying && configs[i].isUniswapReversed), \\\"Token config Uniswap reversal is incorrect.\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize token configs\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function initConfigs(TokenConfig[] memory configs) internal {\\r\\n        for (uint i = 0; i < configs.length; i++) {\\r\\n            TokenConfig memory config = configs[i];\\r\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\r\\n            address uniswapMarket = config.uniswapMarket;\\r\\n            if (config.priceSource == PriceSource.REPORTER) {\\r\\n                require(uniswapMarket != address(0), \\\"reported prices must have an anchor\\\");\\r\\n                bytes32 symbolHash = config.symbolHash;\\r\\n                uint cumulativePrice = currentCumulativePrice(config);\\r\\n                oldObservations[symbolHash].timestamp = block.timestamp;\\r\\n                newObservations[symbolHash].timestamp = block.timestamp;\\r\\n                oldObservations[symbolHash].acc = cumulativePrice;\\r\\n                newObservations[symbolHash].acc = cumulativePrice;\\r\\n                emit UniswapWindowUpdated(symbolHash, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\\r\\n            } else {\\r\\n                require(uniswapMarket == address(0), \\\"only reported prices utilize an anchor\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal override {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing configs\\r\\n            if (!canAdminOverwrite) {\\r\\n                require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n                require(!_configPresenceBySymbolHash[configs[i].symbolHash], \\\"Token config already exists for this symbol hash.\\\");\\r\\n            }\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n            _configIndexesBySymbolHash[configs[i].symbolHash] = _configs.length - 1;\\r\\n            _configPresenceBySymbolHash[configs[i].symbolHash] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function add(TokenConfig[] memory configs) external {\\r\\n        // Check msg.sender == admin\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n\\r\\n        // Add and init token configs\\r\\n        _add(configs);\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the official price for a symbol\\r\\n     * @param symbol The symbol to fetch the price of\\r\\n     * @return Price denominated in ETH, with 18 decimals\\r\\n     */\\r\\n    function price(string memory symbol) external view returns (uint) {\\r\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\r\\n        return priceInternal(config);\\r\\n    }\\r\\n\\r\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\r\\n        if (config.symbolHash == ethHash) return ethBaseUnit;\\r\\n        if (config.priceSource == PriceSource.REPORTER) {\\r\\n            // Prices are stored in terms of USD so we use the ETH/USD price to convert to ETH\\r\\n            uint usdPerEth = prices[ethHash];\\r\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\r\\n            uint256 averageObservationTimestamp = (oldObservations[ethHash].timestamp + newObservations[ethHash].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"ETH TWAP price is stale; cannot convert from USD to ETH.\\\");\\r\\n            averageObservationTimestamp = (oldObservations[config.symbolHash].timestamp + newObservations[config.symbolHash].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"TWAP price is stale.\\\");\\r\\n            return mul(prices[config.symbolHash], ethBaseUnit) / usdPerEth; // usdPrice * 1e18 / usdPerEth = ethPrice\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_USD) {\\r\\n            uint usdPerEth = prices[ethHash];\\r\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\r\\n            uint256 averageObservationTimestamp = (oldObservations[ethHash].timestamp + newObservations[ethHash].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"ETH TWAP price is stale; cannot convert from USD to ETH.\\\");\\r\\n            return mul(config.fixedPrice, ethBaseUnit) / usdPerEth; // usdPrice * 1e18 / usdPerEth = ethPrice\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_ETH) return config.fixedPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying price of a cToken\\r\\n     * @dev Implements the PriceOracle interface for Compound v2.\\r\\n     * @param cToken The cToken address for price retrieval\\r\\n     * @return Price denominated in ETH, with 18 decimals, for the given cToken address\\r\\n     */\\r\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\r\\n        if (CToken(cToken).isCEther()) return ethBaseUnit;\\r\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\r\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\r\\n         // Since the prices in this view have 18 decimals, we must scale them by 1e(36 - 18 - baseUnit)\\r\\n        return mul(1e18, priceInternal(config)) / config.baseUnit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Post open oracle reporter prices, and recalculate stored price by comparing to anchor\\r\\n     * @dev We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\\r\\n     * @param messages The messages to post to the oracle\\r\\n     * @param signatures The signatures for the corresponding messages\\r\\n     * @param symbols The symbols to compare to anchor for authoritative reading\\r\\n     */\\r\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\r\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\r\\n\\r\\n        // Save the prices\\r\\n        for (uint i = 0; i < messages.length; i++) {\\r\\n            priceData.put(messages[i], signatures[i]);\\r\\n        }\\r\\n\\r\\n        uint ethPrice = fetchEthPrice();\\r\\n\\r\\n        // Try to update the view storage\\r\\n        for (uint i = 0; i < symbols.length; i++) {\\r\\n            postPriceInternal(symbols[i], ethPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function postPriceInternal(string memory symbol, uint ethPrice) internal {\\r\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\r\\n        require(config.priceSource == PriceSource.REPORTER, \\\"only reporter prices get posted\\\");\\r\\n\\r\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\r\\n        uint reporterPrice = priceData.getPrice(reporter, symbol);\\r\\n        uint anchorPrice;\\r\\n        if (symbolHash == ethHash) {\\r\\n            anchorPrice = ethPrice;\\r\\n        } else {\\r\\n            anchorPrice = fetchAnchorPrice(symbol, config, ethPrice);\\r\\n        }\\r\\n\\r\\n        if (reporterInvalidated) {\\r\\n            prices[symbolHash] = anchorPrice;\\r\\n            emit PriceUpdated(symbol, anchorPrice);\\r\\n        } else if (isWithinAnchor(reporterPrice, anchorPrice)) {\\r\\n            prices[symbolHash] = reporterPrice;\\r\\n            emit PriceUpdated(symbol, reporterPrice);\\r\\n        } else {\\r\\n            emit PriceGuarded(symbol, reporterPrice, anchorPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWithinAnchor(uint reporterPrice, uint anchorPrice) internal view returns (bool) {\\r\\n        if (reporterPrice > 0) {\\r\\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\\r\\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/ETH price accumulator from Uniswap.\\r\\n     */\\r\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\r\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\r\\n        return config.isUniswapReversed ? cumulativePrice1 : cumulativePrice0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\\r\\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\\r\\n     */\\r\\n    function fetchEthPrice() internal returns (uint) {\\r\\n        return fetchAnchorPrice(\\\"ETH\\\", getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\\r\\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\\r\\n     */\\r\\n    function fetchAnchorPrice(string memory symbol, TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\\r\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\r\\n\\r\\n        // This should be impossible, but better safe than sorry\\r\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\r\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\r\\n\\r\\n        // Calculate uniswap time-weighted average price\\r\\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\\r\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\r\\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\\r\\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\\r\\n        uint anchorPrice;\\r\\n\\r\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\r\\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\\r\\n\\r\\n        // In the case of non-ETH tokens\\r\\n        // a. pokeWindowValues already handled uniswap reversed cases, so priceAverage will always be Token/ETH TWAP price.\\r\\n        // b. conversionFactor = ETH price * 1e6\\r\\n        // unscaledPriceMantissa = priceAverage(token/ETH TWAP price) * expScale * conversionFactor\\r\\n        // so ->\\r\\n        // anchorPrice = priceAverage * tokenBaseUnit / ethBaseUnit * ETH_price * 1e6\\r\\n        //             = priceAverage * conversionFactor * tokenBaseUnit / ethBaseUnit\\r\\n        //             = unscaledPriceMantissa / expScale * tokenBaseUnit / ethBaseUnit\\r\\n        anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\r\\n\\r\\n        emit AnchorPriceUpdated(symbol, anchorPrice, oldTimestamp, block.timestamp);\\r\\n\\r\\n        return anchorPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\r\\n     *  Update new and old observations of lagging window if period elapsed.\\r\\n     */\\r\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\r\\n        bytes32 symbolHash = config.symbolHash;\\r\\n        uint cumulativePrice = currentCumulativePrice(config);\\r\\n\\r\\n        Observation memory newObservation = newObservations[symbolHash];\\r\\n\\r\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\r\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\r\\n        if (timeElapsed >= anchorPeriod) {\\r\\n            oldObservations[symbolHash].timestamp = newObservation.timestamp;\\r\\n            oldObservations[symbolHash].acc = newObservation.acc;\\r\\n\\r\\n            newObservations[symbolHash].timestamp = block.timestamp;\\r\\n            newObservations[symbolHash].acc = cumulativePrice;\\r\\n            emit UniswapWindowUpdated(config.symbolHash, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\r\\n        }\\r\\n        return (cumulativePrice, oldObservations[symbolHash].acc, oldObservations[symbolHash].timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Invalidate the reporter, and fall back to using anchor directly in all cases\\r\\n     * @dev Only the reporter may sign a message which allows it to invalidate itself.\\r\\n     *  To be used in cases of emergency, if the reporter thinks their key may be compromised.\\r\\n     * @param message The data that was presumably signed\\r\\n     * @param signature The fingerprint of the data + private key\\r\\n     */\\r\\n    function invalidateReporter(bytes memory message, bytes memory signature) external {\\r\\n        (string memory decodedMessage, ) = abi.decode(message, (string, address));\\r\\n        require(keccak256(abi.encodePacked(decodedMessage)) == rotateHash, \\\"invalid message must be 'rotate'\\\");\\r\\n        require(source(message, signature) == reporter, \\\"invalidation message must come from the reporter\\\");\\r\\n        reporterInvalidated = true;\\r\\n        emit ReporterInvalidated(reporter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recovers the source address which signed a message\\r\\n     * @dev Comparing to a claimed address would add nothing,\\r\\n     *  as the caller could simply perform the recover and claim that address.\\r\\n     * @param message The data that was presumably signed\\r\\n     * @param signature The fingerprint of the data + private key\\r\\n     * @return The source address which signed the message, presumably\\r\\n     */\\r\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\r\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\r\\n        return ecrecover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /// @dev Overflow proof multiplication\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a == 0) return 0;\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, \\\"multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\r\\n        for (uint256 i = 0; i < _configs.length; i++) if (symbolHash == _configs[i].symbolHash) return i;\\r\\n        return uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for symbol\\r\\n     * @param symbol The symbol of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\r\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the symbolHash\\r\\n     * @param symbolHash The keccack256 of the symbol of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\r\\n        uint index = getSymbolHashIndex(symbolHash);\\r\\n        if (index != uint(-1)) {\\r\\n            return getTokenConfig(index);\\r\\n        }\\r\\n\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e96e02f98730dcbf4ab0310d787340e7a17ff138d807ef2db0c24881f5e9246\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface CToken {\\r\\n    function isCEther() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface CErc20 {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract UniswapConfig {\\r\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\r\\n    enum PriceSource {\\r\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\r\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\r\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\r\\n        TWAP,      /// implies the price is set by TWAPs (only available on UniswapView)\\r\\n        UNISWAP    /// implies the price is set by the direct Uniswap price (only available on UniswapDirectView)\\r\\n    }\\r\\n\\r\\n    /// @dev Describe how the USD price should be determined for an asset.\\r\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\r\\n    struct TokenConfig {\\r\\n        address underlying;\\r\\n        bytes32 symbolHash;\\r\\n        uint256 baseUnit;\\r\\n        PriceSource priceSource;\\r\\n        uint256 fixedPrice;\\r\\n        address uniswapMarket;\\r\\n        bool isUniswapReversed;\\r\\n    }\\r\\n\\r\\n    /// @dev Token config objects\\r\\n    TokenConfig[] internal _configs;\\r\\n\\r\\n    /// @dev Maps underlying addresses to token config indexes\\r\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\r\\n\\r\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\r\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\r\\n    \\r\\n    /// @notice Admin address\\r\\n    address public admin;\\r\\n    \\r\\n    /// @notice Whether or not existing token configs can be overwritten\\r\\n    bool public canAdminOverwrite;\\r\\n\\r\\n    /// @notice The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n    uint256 public maxSecondsBeforePriceIsStale;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an immutable store of configs into the contract data\\r\\n     * @param configs The configs for the supported assets\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs, bool _canAdminOverwrite, uint256 _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        admin = msg.sender;\\r\\n        canAdminOverwrite = _canAdminOverwrite;\\r\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\r\\n\\r\\n        // Add configs\\r\\n        _add(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal virtual {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing config\\r\\n            if (!canAdminOverwrite) require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the admin\\r\\n    function changeAdmin(address newAdmin) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /// @notice The number of tokens this contract actually supports\\r\\n    function numTokens() public view returns (uint256) {\\r\\n        return _configs.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by cToken address\\r\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\r\\n        return getUnderlyingIndex(CToken(cToken).isCEther() ? address(0) : CErc20(cToken).underlying());\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by underlying ERC20 token address\\r\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\r\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the i-th config, according to the order they were passed in originally\\r\\n     * @param i The index of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\r\\n        require(i < numTokens(), \\\"token config not found\\\");\\r\\n        return _configs[i];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the cToken\\r\\n     * @param cToken The address of the cToken of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\r\\n        uint index = getCTokenIndex(cToken);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for an underlying asset\\r\\n     * @param underlying The address of the underlying asset of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\r\\n        uint index = getUnderlyingIndex(underlying);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb01fcfa0aba555d471ff2b824ac1190b91e3104cf5f5be3341d967a3442f1773\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapConfig.sol:CErc20": {
      "abi": "[{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapConfig.sol\":\"CErc20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface CToken {\\r\\n    function isCEther() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface CErc20 {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract UniswapConfig {\\r\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\r\\n    enum PriceSource {\\r\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\r\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\r\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\r\\n        TWAP,      /// implies the price is set by TWAPs (only available on UniswapView)\\r\\n        UNISWAP    /// implies the price is set by the direct Uniswap price (only available on UniswapDirectView)\\r\\n    }\\r\\n\\r\\n    /// @dev Describe how the USD price should be determined for an asset.\\r\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\r\\n    struct TokenConfig {\\r\\n        address underlying;\\r\\n        bytes32 symbolHash;\\r\\n        uint256 baseUnit;\\r\\n        PriceSource priceSource;\\r\\n        uint256 fixedPrice;\\r\\n        address uniswapMarket;\\r\\n        bool isUniswapReversed;\\r\\n    }\\r\\n\\r\\n    /// @dev Token config objects\\r\\n    TokenConfig[] internal _configs;\\r\\n\\r\\n    /// @dev Maps underlying addresses to token config indexes\\r\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\r\\n\\r\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\r\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\r\\n    \\r\\n    /// @notice Admin address\\r\\n    address public admin;\\r\\n    \\r\\n    /// @notice Whether or not existing token configs can be overwritten\\r\\n    bool public canAdminOverwrite;\\r\\n\\r\\n    /// @notice The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n    uint256 public maxSecondsBeforePriceIsStale;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an immutable store of configs into the contract data\\r\\n     * @param configs The configs for the supported assets\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs, bool _canAdminOverwrite, uint256 _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        admin = msg.sender;\\r\\n        canAdminOverwrite = _canAdminOverwrite;\\r\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\r\\n\\r\\n        // Add configs\\r\\n        _add(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal virtual {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing config\\r\\n            if (!canAdminOverwrite) require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the admin\\r\\n    function changeAdmin(address newAdmin) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /// @notice The number of tokens this contract actually supports\\r\\n    function numTokens() public view returns (uint256) {\\r\\n        return _configs.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by cToken address\\r\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\r\\n        return getUnderlyingIndex(CToken(cToken).isCEther() ? address(0) : CErc20(cToken).underlying());\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by underlying ERC20 token address\\r\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\r\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the i-th config, according to the order they were passed in originally\\r\\n     * @param i The index of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\r\\n        require(i < numTokens(), \\\"token config not found\\\");\\r\\n        return _configs[i];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the cToken\\r\\n     * @param cToken The address of the cToken of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\r\\n        uint index = getCTokenIndex(cToken);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for an underlying asset\\r\\n     * @param underlying The address of the underlying asset of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\r\\n        uint index = getUnderlyingIndex(underlying);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb01fcfa0aba555d471ff2b824ac1190b91e3104cf5f5be3341d967a3442f1773\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapConfig.sol:CToken": {
      "abi": "[{\"inputs\":[],\"name\":\"isCEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"isCEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapConfig.sol\":\"CToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface CToken {\\r\\n    function isCEther() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface CErc20 {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract UniswapConfig {\\r\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\r\\n    enum PriceSource {\\r\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\r\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\r\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\r\\n        TWAP,      /// implies the price is set by TWAPs (only available on UniswapView)\\r\\n        UNISWAP    /// implies the price is set by the direct Uniswap price (only available on UniswapDirectView)\\r\\n    }\\r\\n\\r\\n    /// @dev Describe how the USD price should be determined for an asset.\\r\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\r\\n    struct TokenConfig {\\r\\n        address underlying;\\r\\n        bytes32 symbolHash;\\r\\n        uint256 baseUnit;\\r\\n        PriceSource priceSource;\\r\\n        uint256 fixedPrice;\\r\\n        address uniswapMarket;\\r\\n        bool isUniswapReversed;\\r\\n    }\\r\\n\\r\\n    /// @dev Token config objects\\r\\n    TokenConfig[] internal _configs;\\r\\n\\r\\n    /// @dev Maps underlying addresses to token config indexes\\r\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\r\\n\\r\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\r\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\r\\n    \\r\\n    /// @notice Admin address\\r\\n    address public admin;\\r\\n    \\r\\n    /// @notice Whether or not existing token configs can be overwritten\\r\\n    bool public canAdminOverwrite;\\r\\n\\r\\n    /// @notice The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n    uint256 public maxSecondsBeforePriceIsStale;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an immutable store of configs into the contract data\\r\\n     * @param configs The configs for the supported assets\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs, bool _canAdminOverwrite, uint256 _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        admin = msg.sender;\\r\\n        canAdminOverwrite = _canAdminOverwrite;\\r\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\r\\n\\r\\n        // Add configs\\r\\n        _add(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal virtual {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing config\\r\\n            if (!canAdminOverwrite) require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the admin\\r\\n    function changeAdmin(address newAdmin) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /// @notice The number of tokens this contract actually supports\\r\\n    function numTokens() public view returns (uint256) {\\r\\n        return _configs.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by cToken address\\r\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\r\\n        return getUnderlyingIndex(CToken(cToken).isCEther() ? address(0) : CErc20(cToken).underlying());\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by underlying ERC20 token address\\r\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\r\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the i-th config, according to the order they were passed in originally\\r\\n     * @param i The index of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\r\\n        require(i < numTokens(), \\\"token config not found\\\");\\r\\n        return _configs[i];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the cToken\\r\\n     * @param cToken The address of the cToken of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\r\\n        uint index = getCTokenIndex(cToken);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for an underlying asset\\r\\n     * @param underlying The address of the underlying asset of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\r\\n        uint index = getUnderlyingIndex(underlying);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb01fcfa0aba555d471ff2b824ac1190b91e3104cf5f5be3341d967a3442f1773\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapConfig.sol:UniswapConfig": {
      "abi": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxSecondsBeforePriceIsStale\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "60806040523480156200001157600080fd5b5060405162000ac838038062000ac8833981016040819052620000349162000332565b60038054336001600160a01b03199091161760ff60a01b1916600160a01b841515021790556004819055620000698362000072565b5050506200048f565b60005b81518110156200026d57600354600160a01b900460ff16620000f35760026000838381518110620000a257fe5b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff1615620000f35760405162461bcd60e51b8152600401620000ea906200040b565b60405180910390fd5b60008282815181106200010257fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b03909216919091178155918101518284015560408101516002830155606081015160038301805492949192909160ff19909116908360048111156200017c57fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b031990941693909317919091169190911790556000805483516000199190910191600191859085908110620001ee57fe5b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020819055506001600260008484815181106200023157fe5b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162000075565b5050565b80516001600160a01b03811681146200028957600080fd5b92915050565b805180151581146200028957600080fd5b600060e08284031215620002b2578081fd5b620002be60e062000468565b9050620002cc838362000271565b81526020820151602082015260408201516040820152606082015160058110620002f557600080fd5b606082015260808281015190820152620003138360a0840162000271565b60a0820152620003278360c084016200028f565b60c082015292915050565b60008060006060848603121562000347578283fd5b83516001600160401b03808211156200035e578485fd5b818601915086601f83011262000372578485fd5b81518181111562000381578586fd5b6020915062000394828383020162000468565b8181528281019084840160e0808502870186018c1015620003b357898afd5b8996505b84871015620003e357620003cc8c83620002a0565b8452600196909601959285019290810190620003b7565b5050809750505050620003f9878288016200028f565b93505050604084015190509250925092565b6020808252603e908201527f546f6b656e20636f6e66696720616c72656164792065786973747320666f722060408201527f7468697320756e6465726c79696e6720746f6b656e20616464726573732e0000606082015260800190565b6040518181016001600160401b03811182821017156200048757600080fd5b604052919050565b610629806200049f6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638f2839701161005b5780638f283970146100f35780639f59963114610108578063e073a2411461011b578063f851a4401461012357610088565b80634da219421461008d578063656b0fd1146100b65780638a003888146100cb5780638e499bcf146100de575b600080fd5b6100a061009b36600461046d565b610138565b6040516100ad919061056a565b60405180910390f35b6100be61018d565b6040516100ad91906104f8565b6100a06100d93660046104cc565b61019d565b6100e6610276565b6040516100ad91906105d2565b61010661010136600461046d565b61027c565b005b6100a061011636600461046d565b6102c8565b6100e66102db565b61012b6102e1565b6040516100ad91906104e4565b610140610430565b600061014b836102f0565b905060001981146101675761015f8161019d565b915050610188565b60405162461bcd60e51b815260040161017f90610503565b60405180910390fd5b919050565b600354600160a01b900460ff1681565b6101a5610430565b6101ad610276565b82106101cb5760405162461bcd60e51b815260040161017f90610503565b600082815481106101d857fe5b60009182526020918290206040805160e081018252600690930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154909190606083019060ff16600481111561023257fe5b600481111561023d57fe5b8152600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b60005490565b6003546001600160a01b031633146102a65760405162461bcd60e51b815260040161017f90610533565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6102d0610430565b600061014b83610338565b60045481565b6003546001600160a01b031681565b6001600160a01b03811660009081526002602052604081205460ff1661031857600019610332565b6001600160a01b0382166000908152600160205260409020545b92915050565b6000610332826001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561037657600080fd5b505afa15801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae91906104ac565b61042857826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156103eb57600080fd5b505afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190610490565b61042b565b60005b6102f0565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b60006020828403121561047e578081fd5b8135610489816105db565b9392505050565b6000602082840312156104a1578081fd5b8151610489816105db565b6000602082840312156104bd578081fd5b81518015158114610489578182fd5b6000602082840312156104dd578081fd5b5035919050565b6001600160a01b0391909116815260200190565b901515815260200190565b6020808252601690820152751d1bdad95b8818dbdb999a59c81b9bdd08199bdd5b9960521b604082015260600190565b60208082526017908201527f6d73672e73656e646572206973206e6f742061646d696e000000000000000000604082015260600190565b81516001600160a01b0390811682526020808401519083015260408084015190830152606083015160e083019190600581106105a257fe5b80606085015250608084015160808401528060a08501511660a08401525060c0830151151560c083015292915050565b90815260200190565b6001600160a01b03811681146105f057600080fd5b5056fea26469706673582212207ff0316c01db287b2928dd5c957272d842d50a768565844d769c28471322b16864736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxSecondsBeforePriceIsStale\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_canAdminOverwrite\":\"Whether or not existing token configs can be overwritten\",\"_maxSecondsBeforePriceIsStale\":\"The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\",\"configs\":\"The configs for the supported assets\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}}},\"stateVariables\":{\"_configIndexesByUnderlying\":{\"details\":\"Maps underlying addresses to token config indexes\"},\"_configPresenceByUnderlying\":{\"details\":\"Maps underlying addresses to booleans indicating if they have token configs\"},\"_configs\":{\"details\":\"Token config objects\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"admin()\":{\"notice\":\"Admin address\"},\"canAdminOverwrite()\":{\"notice\":\"Whether or not existing token configs can be overwritten\"},\"changeAdmin(address)\":{\"notice\":\"Changes the admin\"},\"constructor\":\"Construct an immutable store of configs into the contract data\",\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"maxSecondsBeforePriceIsStale()\":{\"notice\":\"The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapConfig.sol\":\"UniswapConfig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface CToken {\\r\\n    function isCEther() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface CErc20 {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract UniswapConfig {\\r\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\r\\n    enum PriceSource {\\r\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\r\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\r\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\r\\n        TWAP,      /// implies the price is set by TWAPs (only available on UniswapView)\\r\\n        UNISWAP    /// implies the price is set by the direct Uniswap price (only available on UniswapDirectView)\\r\\n    }\\r\\n\\r\\n    /// @dev Describe how the USD price should be determined for an asset.\\r\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\r\\n    struct TokenConfig {\\r\\n        address underlying;\\r\\n        bytes32 symbolHash;\\r\\n        uint256 baseUnit;\\r\\n        PriceSource priceSource;\\r\\n        uint256 fixedPrice;\\r\\n        address uniswapMarket;\\r\\n        bool isUniswapReversed;\\r\\n    }\\r\\n\\r\\n    /// @dev Token config objects\\r\\n    TokenConfig[] internal _configs;\\r\\n\\r\\n    /// @dev Maps underlying addresses to token config indexes\\r\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\r\\n\\r\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\r\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\r\\n    \\r\\n    /// @notice Admin address\\r\\n    address public admin;\\r\\n    \\r\\n    /// @notice Whether or not existing token configs can be overwritten\\r\\n    bool public canAdminOverwrite;\\r\\n\\r\\n    /// @notice The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n    uint256 public maxSecondsBeforePriceIsStale;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an immutable store of configs into the contract data\\r\\n     * @param configs The configs for the supported assets\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs, bool _canAdminOverwrite, uint256 _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        admin = msg.sender;\\r\\n        canAdminOverwrite = _canAdminOverwrite;\\r\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\r\\n\\r\\n        // Add configs\\r\\n        _add(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal virtual {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing config\\r\\n            if (!canAdminOverwrite) require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the admin\\r\\n    function changeAdmin(address newAdmin) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /// @notice The number of tokens this contract actually supports\\r\\n    function numTokens() public view returns (uint256) {\\r\\n        return _configs.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by cToken address\\r\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\r\\n        return getUnderlyingIndex(CToken(cToken).isCEther() ? address(0) : CErc20(cToken).underlying());\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by underlying ERC20 token address\\r\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\r\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the i-th config, according to the order they were passed in originally\\r\\n     * @param i The index of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\r\\n        require(i < numTokens(), \\\"token config not found\\\");\\r\\n        return _configs[i];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the cToken\\r\\n     * @param cToken The address of the cToken of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\r\\n        uint index = getCTokenIndex(cToken);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for an underlying asset\\r\\n     * @param underlying The address of the underlying asset of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\r\\n        uint index = getUnderlyingIndex(underlying);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb01fcfa0aba555d471ff2b824ac1190b91e3104cf5f5be3341d967a3442f1773\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:FixedPoint": {
      "abi": "[]",
      "bin": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203336c58d2def493e23ceb49a2c9a172e57c01633b1a0f963c3c5cdf7f74ff02464736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"FixedPoint\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:IERC20": {
      "abi": "[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:IUniswapV2Pair": {
      "abi": "[{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"IUniswapV2Pair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:SafeMath": {
      "abi": "[]",
      "bin": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f7c2fdd445ede70f8f53b8166d54329c5a80dfd6e793b8c095bd06c9ae5aebdc64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:UniswapV2Library": {
      "abi": "[]",
      "bin": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f3e0a4ed45d1809b718019cbe683a5eee0ae7b78ac3c6c9f61ed2c30df446a4664736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"UniswapV2Library\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapLib.sol:UniswapV2OracleLibrary": {
      "abi": "[]",
      "bin": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207cdb83f4eb1eb8eb559c68164d4a047e01338c43a53b03eb7781a0c16ca6641064736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"UniswapV2OracleLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapSpotView.sol:UniswapSpotView": {
      "abi": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "60806040523480156200001157600080fd5b506040516200321438038062003214833981016040819052620000349162000bcf565b60038054336001600160a01b03199091161760ff60a01b1916600160a01b8415150217905560006004819055839083906200006f83620000f0565b50506005805460ff1916831515179081905560ff16159050620000dc57600380546001600160a01b03191690819055600160a01b900460ff1615620000d15760405162461bcd60e51b8152600401620000c89062001144565b60405180910390fd5b620000dc83620002e6565b620000e783620008cd565b505050620013c4565b60005b8151811015620002e257600354600160a01b900460ff166200016857600260008383815181106200012057fe5b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff1615620001685760405162461bcd60e51b8152600401620000c89062000ffd565b60008282815181106200017757fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b03909216919091178155918101518284015560408101516002830155606081015160038301805492949192909160ff1990911690836004811115620001f157fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b0319909416939093179190911691909117905560008054835160001991909101916001918590859081106200026357fe5b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002081905550600160026000848481518110620002a657fe5b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101620000f3565b5050565b60005b8151811015620002e257604051602001620003049062000e12565b604051602081830303815290604052805190602001208282815181106200032757fe5b6020026020010151602001511415620003545760405162461bcd60e51b8152600401620000c89062000e6d565b8181815181106200036157fe5b6020026020010151602001518282815181106200037a57fe5b6020026020010151600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620003bf57600080fd5b505afa158015620003d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003fe919081019062000cb2565b60405160200162000410919062000d8b565b6040516020818303038152906040528051906020012014620004465760405162461bcd60e51b8152600401620000c8906200109c565b8181815181106200045357fe5b6020026020010151604001518282815181106200046c57fe5b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620004b157600080fd5b505afa158015620004c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ec919062000d46565b60ff16600a0a14620005125760405162461bcd60e51b8152600401620000c890620011b6565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03168282815181106200053d57fe5b6020026020010151600001516001600160a01b03161415620006585760008282815181106200056857fe5b60200260200101516060015160048111156200058057fe5b14620005a05760405162461bcd60e51b8152600401620000c890620011f7565b818181518110620005ad57fe5b602002602001015160800151670de0b6b3a764000014620005e25760405162461bcd60e51b8152600401620000c8906200131f565b60006001600160a01b0316828281518110620005fa57fe5b602002602001015160a001516001600160a01b0316146200062f5760405162461bcd60e51b8152600401620000c8906200105a565b60008282815181106200063e57fe5b602090810291909101015190151560c090910152620008c4565b60048282815181106200066757fe5b60200260200101516060015160048111156200067f57fe5b146200069f5760405162461bcd60e51b8152600401620000c89062000ed6565b818181518110620006ac57fe5b602002602001015160800151600014620006da5760405162461bcd60e51b8152600401620000c89062000f75565b600062000734735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f8484815181106200070257fe5b60200260200101516000015173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2620009a560201b6200050d1760201c565b9050806001600160a01b03168383815181106200074d57fe5b602002602001015160a001516001600160a01b031614620007825760405162461bcd60e51b8152600401620000c890620010f9565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015620007be57600080fd5b505afa158015620007d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007f9919062000baa565b90508383815181106200080857fe5b6020026020010151600001516001600160a01b0316816001600160a01b03161480156200084b57508383815181106200083d57fe5b602002602001015160c00151155b80620008a257508383815181106200085f57fe5b6020026020010151600001516001600160a01b0316816001600160a01b031614158015620008a257508383815181106200089557fe5b602002602001015160c001515b620008c15760405162461bcd60e51b8152600401620000c89062001254565b50505b600101620002e9565b60005b8151811015620002e257620008e462000aac565b828281518110620008f157fe5b602002602001015190506000816040015111620009225760405162461bcd60e51b8152600401620000c89062000f33565b60a08101516004826060015160048111156200093a57fe5b141562000970576001600160a01b0381166200096a5760405162461bcd60e51b8152600401620000c890620012d6565b6200099a565b6001600160a01b038116156200099a5760405162461bcd60e51b8152600401620000c89062000e21565b5050600101620008d0565b60008080620009b5858562000a1a565b91509150858282604051602001620009cf92919062000d69565b60405160208183030381529060405280519060200120604051602001620009f892919062000da9565b60408051601f1981840301815291905280516020909101209695505050505050565b600080826001600160a01b0316846001600160a01b0316141562000a525760405162461bcd60e51b8152600401620000c89062000fb8565b826001600160a01b0316846001600160a01b03161062000a7457828462000a77565b83835b90925090506001600160a01b03821662000aa55760405162461bcd60e51b8152600401620000c8906200129f565b9250929050565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b80516001600160a01b038116811462000b0157600080fd5b92915050565b8051801515811462000b0157600080fd5b600060e0828403121562000b2a578081fd5b62000b3660e06200136a565b905062000b44838362000ae9565b8152602082015160208201526040820151604082015260608201516005811062000b6d57600080fd5b60608201526080828101519082015262000b8b8360a0840162000ae9565b60a082015262000b9f8360c0840162000b07565b60c082015292915050565b60006020828403121562000bbc578081fd5b62000bc8838362000ae9565b9392505050565b60008060006060848603121562000be4578182fd5b83516001600160401b038082111562000bfb578384fd5b818601915086601f83011262000c0f578384fd5b81518181111562000c1e578485fd5b6020915062000c3182838302016200136a565b8181528281019084840160e0808502870186018c101562000c50578889fd5b8896505b8487101562000c805762000c698c8362000b18565b845260019690960195928501929081019062000c54565b505080975050505062000c968782880162000b07565b9350505062000ca9856040860162000b07565b90509250925092565b60006020828403121562000cc4578081fd5b81516001600160401b038082111562000cdb578283fd5b818401915084601f83011262000cef578283fd5b81518181111562000cfe578384fd5b62000d13601f8201601f19166020016200136a565b915080825285602082850101111562000d2a578384fd5b62000d3d81602084016020860162001391565b50949350505050565b60006020828403121562000d58578081fd5b815160ff8116811462000bc8578182fd5b6001600160601b0319606093841b811682529190921b16601482015260280190565b6000825162000d9f81846020870162001391565b9190910192915050565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6001600160601b031916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6208aa8960eb1b815260030190565b6020808252602c908201527f6f6e6c7920554e495357415020707269636573207574696c697a65206120556e60408201526b1a5cddd85c081b585c9ad95d60a21b606082015260800190565b60208082526043908201527f45544820646f6573206e6f74206e65656420612070726963652066656564206160408201527f7320616c6c2070726963652066656564732061726520626173656420696e20456060820152622a241760e91b608082015260a00190565b60208082526033908201527f496e76616c696420746f6b656e20636f6e66696720707269636520736f75726360408201527f653a206d75737420626520554e49535741502e00000000000000000000000000606082015260800190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526023908201527f546f6b656e20636f6e666967206669786564207072696365206d75737420626560408201526210181760e91b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b6020808252603e908201527f546f6b656e20636f6e66696720616c72656164792065786973747320666f722060408201527f7468697320756e6465726c79696e6720746f6b656e20616464726573732e0000606082015260800190565b60208082526022908201527f5745544820556e6973776170206d61726b6574206e6f74206e656365737361726040820152613c9760f11b606082015260800190565b6020808252603d908201527f53796d626f6c206d69736d61746368206265747765656e20746f6b656e20636f60408201527f6e66696720616e642045524332302073796d626f6c206d6574686f642e000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e6973776170206d61726b6574206973206e60408201526a37ba1031b7b93932b1ba1760a91b606082015260800190565b6020808252604c908201527f63616e41646d696e4f7665727772697465206d7573742062652073657420746f60408201527f2066616c736520666f72207075626c696320556e697377617053706f7456696560608201526b3b9031b7b73a3930b1ba399760a11b608082015260a00190565b60208082526021908201527f496e636f727265637420746f6b656e20636f6e666967206261736520756e69746040820152601760f91b606082015260800190565b6020808252603a908201527f496e76616c6964205745544820746f6b656e20636f6e6669672070726963652060408201527f736f757263653a206d7573742062652046495845445f4554482e000000000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e697377617020726576657273616c20697360408201526a1034b731b7b93932b1ba1760a91b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526029908201527f554e495357415020707269636573206d7573742068617665206120556e697377604082015268185c081b585c9ad95d60ba1b606082015260800190565b6020808252602b908201527f5745544820746f6b656e20636f6e666967206669786564207072696365206d7560408201526a39ba1031329018b2989c1760a91b606082015260800190565b6040518181016001600160401b03811182821017156200138957600080fd5b604052919050565b60005b83811015620013ae57818101518382015260200162001394565b83811115620013be576000848401525b50505050565b611e4080620013d46000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638f28397011610097578063dc9a153511610066578063dc9a1535146101be578063e073a241146101c6578063f851a440146101ce578063fc57d4df146101e3576100f5565b80638f283970146101855780639f59963114610198578063aea91078146101ab578063d1b353b414610155576100f5565b8063656b0fd1116100d3578063656b0fd11461014d57806369aa3ac6146101555780638a0038881461016a5780638e499bcf1461017d576100f5565b80632d1c668f146100fa5780633a8521691461010f5780634da219421461012d575b600080fd5b61010d61010836600461136e565b6101f6565b005b610117610257565b6040516101249190611602565b60405180910390f35b61014061013b366004611336565b61025c565b6040516101249190611cea565b6101176102a8565b61015d6102b8565b6040516101249190611d52565b61014061017836600461150d565b6102c4565b61015d61039d565b61010d610193366004611336565b6103a3565b6101406101a6366004611336565b6103ef565b61015d6101b9366004611336565b610402565b610117610427565b61015d610430565b6101d6610436565b60405161012491906115ee565b61015d6101f1366004611336565b610445565b60055460ff161561020f5761020a8161057d565b610242565b6003546001600160a01b031633146102425760405162461bcd60e51b8152600401610239906118a2565b60405180910390fd5b61024b81610b12565b61025481610cf9565b50565b600181565b610264611258565b600061026f83610dc0565b9050600019811461028b57610283816102c4565b9150506102a3565b60405162461bcd60e51b8152600401610239906117ea565b919050565b600354600160a01b900460ff1681565b670de0b6b3a764000081565b6102cc611258565b6102d461039d565b82106102f25760405162461bcd60e51b8152600401610239906117ea565b600082815481106102ff57fe5b60009182526020918290206040805160e081018252600690930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154909190606083019060ff16600481111561035957fe5b600481111561036457fe5b8152600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b60005490565b6003546001600160a01b031633146103cd5760405162461bcd60e51b8152600401610239906118a2565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6103f7611258565b600061026f83610e08565b600061040c611258565b6104158361025c565b905061042081610f00565b9392505050565b60055460ff1681565b60045481565b6003546001600160a01b031681565b6000816001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b89190611411565b156104cc5750670de0b6b3a76400006102a3565b6104d4611258565b6104dd836103ef565b905080604001516104fe670de0b6b3a76400006104f984610f00565b610fb0565b8161050557fe5b049392505050565b600080600061051c8585610fea565b91509150858282604051602001610534929190611546565b6040516020818303038152906040528051906020012060405160200161055b929190611589565b60408051601f1981840301815291905280516020909101209695505050505050565b60005b8151811015610b0e57604051602001610598906115df565b604051602081830303815290604052805190602001208282815181106105ba57fe5b60200260200101516020015114156105e45760405162461bcd60e51b815260040161023990611659565b8181815181106105f057fe5b60200260200101516020015182828151811061060857fe5b6020026020010151600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561064c57600080fd5b505afa158015610660573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610688919081019061142d565b604051602001610698919061156d565b60405160208183030381529060405280519060200120146106cb5760405162461bcd60e51b815260040161023990611978565b8181815181106106d757fe5b6020026020010151604001518282815181106106ef57fe5b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561073357600080fd5b505afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190611525565b60ff16600a0a1461078e5760405162461bcd60e51b815260040161023990611a68565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03168282815181106107b857fe5b6020026020010151600001516001600160a01b031614156108c35760008282815181106107e157fe5b60200260200101516060015160048111156107f857fe5b146108155760405162461bcd60e51b815260040161023990611aa9565b81818151811061082157fe5b602002602001015160800151670de0b6b3a7640000146108535760405162461bcd60e51b815260040161023990611c9f565b60006001600160a01b031682828151811061086a57fe5b602002602001015160a001516001600160a01b03161461089c5760405162461bcd60e51b815260040161023990611936565b60008282815181106108aa57fe5b602090810291909101015190151560c090910152610b06565b60048282815181106108d157fe5b60200260200101516060015160048111156108e857fe5b146109055760405162461bcd60e51b8152600401610239906116c2565b81818151811061091157fe5b60200260200101516080015160001461093c5760405162461bcd60e51b81526004016102399061181a565b6000610988735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f84848151811061096257fe5b60200260200101516000015173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261050d565b9050806001600160a01b03168383815181106109a057fe5b602002602001015160a001516001600160a01b0316146109d25760405162461bcd60e51b815260040161023990611a1d565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610a0d57600080fd5b505afa158015610a21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a459190611352565b9050838381518110610a5357fe5b6020026020010151600001516001600160a01b0316816001600160a01b0316148015610a945750838381518110610a8657fe5b602002602001015160c00151155b80610ae75750838381518110610aa657fe5b6020026020010151600001516001600160a01b0316816001600160a01b031614158015610ae75750838381518110610ada57fe5b602002602001015160c001515b610b035760405162461bcd60e51b815260040161023990611b06565b50505b600101610580565b5050565b60005b8151811015610b0e57600354600160a01b900460ff16610b845760026000838381518110610b3f57fe5b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff1615610b845760405162461bcd60e51b8152600401610239906118d9565b6000828281518110610b9257fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b03909216919091178155918101518284015560408101516002830155606081015160038301805492949192909160ff1990911690836004811115610c0b57fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b031990941693909317919091169190911790556000805483516000199190910191600191859085908110610c7c57fe5b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002081905550600160026000848481518110610cbe57fe5b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610b15565b60005b8151811015610b0e57610d0d611258565b828281518110610d1957fe5b602002602001015190506000816040015111610d475760405162461bcd60e51b815260040161023990611743565b60a0810151600482606001516004811115610d5e57fe5b1415610d8f576001600160a01b038116610d8a5760405162461bcd60e51b815260040161023990611c0b565b610db6565b6001600160a01b03811615610db65760405162461bcd60e51b81526004016102399061160d565b5050600101610cfc565b6001600160a01b03811660009081526002602052604081205460ff16610de857600019610e02565b6001600160a01b0382166000908152600160205260409020545b92915050565b6000610e02826001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e4657600080fd5b505afa158015610e5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7e9190611411565b610ef857826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610ebb57600080fd5b505afa158015610ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef39190611352565b610efb565b60005b610dc0565b6000600482606001516004811115610f1457fe5b1415610f2a57610f2382611074565b90506102a3565b600182606001516004811115610f3c57fe5b1415610f8d576000610f69610f6473a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4861025c565b611074565b9050620f4240610f7d846080015183610fb0565b81610f8457fe5b049150506102a3565b600082606001516004811115610f9f57fe5b14156102a3575060808101516102a3565b600082610fbf57506000610e02565b82820282848281610fcc57fe5b04146104205760405162461bcd60e51b8152600401610239906117b3565b600080826001600160a01b0316846001600160a01b0316141561101f5760405162461bcd60e51b81526004016102399061185d565b826001600160a01b0316846001600160a01b03161061103f578284611042565b83835b90925090506001600160a01b03821661106d5760405162461bcd60e51b815260040161023990611bd4565b9250929050565b6000806000808460a001516001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ef91906114b9565b63ffffffff1692506001600160701b031692506001600160701b0316925080421161112c5760405162461bcd60e51b815260040161023990611b51565b61115b85604001518660c001516111435784611145565b835b8760c001516111545784611156565b855b611164565b95945050505050565b60008084116111855760405162461bcd60e51b815260040161023990611c54565b6000831180156111955750600082115b6111b15760405162461bcd60e51b8152600401610239906119d5565b60006111bf856103e56111fe565b905060006111cd82856111fe565b905060006111e7836111e1886103e86111fe565b90611235565b90508082816111f257fe5b04979650505050505050565b60008115806112195750508082028282828161121657fe5b04145b610e025760405162461bcd60e51b815260040161023990611715565b80820182811015610e025760405162461bcd60e51b815260040161023990611785565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b8035610e0281611dd2565b8035610e0281611de7565b600060e082840312156112bc578081fd5b6112c660e0611d5b565b905081356112d381611dd2565b8082525060208201356020820152604082013560408201526060820135600581106112fd57600080fd5b6060820152608082810135908201526113198360a08401611295565b60a082015261132b8360c084016112a0565b60c082015292915050565b600060208284031215611347578081fd5b813561042081611dd2565b600060208284031215611363578081fd5b815161042081611dd2565b60006020808385031215611380578182fd5b823567ffffffffffffffff811115611396578283fd5b8301601f810185136113a6578283fd5b80356113b96113b482611d82565b611d5b565b8181528381019083850160e0808502860187018a10156113d7578788fd5b8795505b84861015611403576113ed8a836112ab565b84526001959095019492860192908101906113db565b509098975050505050505050565b600060208284031215611422578081fd5b815161042081611de7565b60006020828403121561143e578081fd5b815167ffffffffffffffff80821115611455578283fd5b818401915084601f830112611468578283fd5b815181811115611476578384fd5b611489601f8201601f1916602001611d5b565b915080825285602082850101111561149f578384fd5b6114b0816020840160208601611da2565b50949350505050565b6000806000606084860312156114cd578182fd5b83516114d881611df5565b60208501519093506114e981611df5565b604085015190925063ffffffff81168114611502578182fd5b809150509250925092565b60006020828403121561151e578081fd5b5035919050565b600060208284031215611536578081fd5b815160ff81168114610420578182fd5b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6000825161157f818460208701611da2565b9190910192915050565b6001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6208aa8960eb1b815260030190565b6001600160a01b0391909116815260200190565b901515815260200190565b6020808252602c908201527f6f6e6c7920554e495357415020707269636573207574696c697a65206120556e60408201526b1a5cddd85c081b585c9ad95d60a21b606082015260800190565b60208082526043908201527f45544820646f6573206e6f74206e65656420612070726963652066656564206160408201527f7320616c6c2070726963652066656564732061726520626173656420696e20456060820152622a241760e91b608082015260a00190565b60208082526033908201527f496e76616c696420746f6b656e20636f6e66696720707269636520736f757263604082015272329d1036bab9ba103132902aa724a9aba0a81760691b606082015260800190565b60208082526014908201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604082015260600190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526014908201527364732d6d6174682d6164642d6f766572666c6f7760601b604082015260600190565b60208082526017908201527f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000604082015260600190565b6020808252601690820152751d1bdad95b8818dbdb999a59c81b9bdd08199bdd5b9960521b604082015260600190565b60208082526023908201527f546f6b656e20636f6e666967206669786564207072696365206d75737420626560408201526210181760e91b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526017908201527f6d73672e73656e646572206973206e6f742061646d696e000000000000000000604082015260600190565b6020808252603e908201527f546f6b656e20636f6e66696720616c72656164792065786973747320666f722060408201527f7468697320756e6465726c79696e6720746f6b656e20616464726573732e0000606082015260800190565b60208082526022908201527f5745544820556e6973776170206d61726b6574206e6f74206e656365737361726040820152613c9760f11b606082015260800190565b6020808252603d908201527f53796d626f6c206d69736d61746368206265747765656e20746f6b656e20636f60408201527f6e66696720616e642045524332302073796d626f6c206d6574686f642e000000606082015260800190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604082015267495155494449545960c01b606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e6973776170206d61726b6574206973206e60408201526a37ba1031b7b93932b1ba1760a91b606082015260800190565b60208082526021908201527f496e636f727265637420746f6b656e20636f6e666967206261736520756e69746040820152601760f91b606082015260800190565b6020808252603a908201527f496e76616c6964205745544820746f6b656e20636f6e6669672070726963652060408201527f736f757263653a206d7573742062652046495845445f4554482e000000000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e697377617020726576657273616c20697360408201526a1034b731b7b93932b1ba1760a91b606082015260800190565b60208082526058908201527f556e6973776170204c5020746f6b656e20776173207570646174656420696e2060408201527f7468697320626c6f636b2e20526576657274696e672064756520746f2072697360608201527f6b206f66207072696365206d616e6970756c6174696f6e2e0000000000000000608082015260a00190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526029908201527f554e495357415020707269636573206d7573742068617665206120556e697377604082015268185c081b585c9ad95d60ba1b606082015260800190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201526a1394155517d05353d5539560aa1b606082015260800190565b6020808252602b908201527f5745544820746f6b656e20636f6e666967206669786564207072696365206d7560408201526a39ba1031329018b2989c1760a91b606082015260800190565b81516001600160a01b0390811682526020808401519083015260408084015190830152606083015160e08301919060058110611d2257fe5b80606085015250608084015160808401528060a08501511660a08401525060c0830151151560c083015292915050565b90815260200190565b60405181810167ffffffffffffffff81118282101715611d7a57600080fd5b604052919050565b600067ffffffffffffffff821115611d98578081fd5b5060209081020190565b60005b83811015611dbd578181015183820152602001611da5565b83811115611dcc576000848401525b50505050565b6001600160a01b038116811461025457600080fd5b801515811461025457600080fd5b6001600160701b038116811461025457600080fdfea2646970667358221220cbfcfb4e1862cc7c621350a428fd7e9cb934bf3d1ed7f8970a2e89f55019cda764736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"params\":{\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"constructor\":{\"params\":{\"_isPublic\":\"If true, anyone can add assets, but they will be validated\",\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals, for the given cToken address\"}},\"price(address)\":{\"params\":{\"underlying\":\"The underlying token address for which to get the price (set to zero address for ETH)\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals\"}}},\"stateVariables\":{\"UNISWAP_V2_FACTORY_ADDRESS\":{\"details\":\"UniswapV2Factory contract address.\"},\"WETH_ADDRESS\":{\"details\":\"WETH contract address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"IS_UNISWAP_VIEW()\":{\"notice\":\"Constant indicating that this contract is a UniswapSpotView\"},\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"notice\":\"Add new asset(s)\"},\"admin()\":{\"notice\":\"Admin address\"},\"canAdminOverwrite()\":{\"notice\":\"Whether or not existing token configs can be overwritten\"},\"changeAdmin(address)\":{\"notice\":\"Changes the admin\"},\"constructor\":\"Construct a Uniswap spot price view for a set of token configurations\",\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"isPublic()\":{\"notice\":\"If new token configs can be added by anyone\"},\"maxSecondsBeforePriceIsStale()\":{\"notice\":\"The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"price(address)\":{\"notice\":\"Get the official price for an underlying token address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapSpotView.sol\":\"UniswapSpotView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface CToken {\\r\\n    function isCEther() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface CErc20 {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract UniswapConfig {\\r\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\r\\n    enum PriceSource {\\r\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\r\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\r\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\r\\n        TWAP,      /// implies the price is set by TWAPs (only available on UniswapView)\\r\\n        UNISWAP    /// implies the price is set by the direct Uniswap price (only available on UniswapDirectView)\\r\\n    }\\r\\n\\r\\n    /// @dev Describe how the USD price should be determined for an asset.\\r\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\r\\n    struct TokenConfig {\\r\\n        address underlying;\\r\\n        bytes32 symbolHash;\\r\\n        uint256 baseUnit;\\r\\n        PriceSource priceSource;\\r\\n        uint256 fixedPrice;\\r\\n        address uniswapMarket;\\r\\n        bool isUniswapReversed;\\r\\n    }\\r\\n\\r\\n    /// @dev Token config objects\\r\\n    TokenConfig[] internal _configs;\\r\\n\\r\\n    /// @dev Maps underlying addresses to token config indexes\\r\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\r\\n\\r\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\r\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\r\\n    \\r\\n    /// @notice Admin address\\r\\n    address public admin;\\r\\n    \\r\\n    /// @notice Whether or not existing token configs can be overwritten\\r\\n    bool public canAdminOverwrite;\\r\\n\\r\\n    /// @notice The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n    uint256 public maxSecondsBeforePriceIsStale;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an immutable store of configs into the contract data\\r\\n     * @param configs The configs for the supported assets\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs, bool _canAdminOverwrite, uint256 _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        admin = msg.sender;\\r\\n        canAdminOverwrite = _canAdminOverwrite;\\r\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\r\\n\\r\\n        // Add configs\\r\\n        _add(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal virtual {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing config\\r\\n            if (!canAdminOverwrite) require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the admin\\r\\n    function changeAdmin(address newAdmin) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /// @notice The number of tokens this contract actually supports\\r\\n    function numTokens() public view returns (uint256) {\\r\\n        return _configs.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by cToken address\\r\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\r\\n        return getUnderlyingIndex(CToken(cToken).isCEther() ? address(0) : CErc20(cToken).underlying());\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by underlying ERC20 token address\\r\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\r\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the i-th config, according to the order they were passed in originally\\r\\n     * @param i The index of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\r\\n        require(i < numTokens(), \\\"token config not found\\\");\\r\\n        return _configs[i];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the cToken\\r\\n     * @param cToken The address of the cToken of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\r\\n        uint index = getCTokenIndex(cToken);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for an underlying asset\\r\\n     * @param underlying The address of the underlying asset of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\r\\n        uint index = getUnderlyingIndex(underlying);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb01fcfa0aba555d471ff2b824ac1190b91e3104cf5f5be3341d967a3442f1773\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapSpotView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./UniswapConfig.sol\\\";\\r\\nimport \\\"./UniswapLib.sol\\\";\\r\\n\\r\\nstruct Observation {\\r\\n    uint timestamp;\\r\\n    uint acc;\\r\\n}\\r\\n\\r\\ncontract UniswapSpotView is UniswapConfig {\\r\\n    using FixedPoint for *;\\r\\n    \\r\\n    /// @notice Constant indicating that this contract is a UniswapSpotView\\r\\n    bool constant public IS_UNISWAP_VIEW = true;\\r\\n\\r\\n    /// @notice The number of wei in 1 ETH\\r\\n    uint public constant ethBaseUnit = 1e18;\\r\\n\\r\\n    /// @notice A common scaling factor to maintain precision\\r\\n    uint public constant expScale = 1e18;\\r\\n\\r\\n    /// @notice If new token configs can be added by anyone\\r\\n    bool public isPublic;\\r\\n\\r\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a Uniswap spot price view for a set of token configurations\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     * @param _isPublic If true, anyone can add assets, but they will be validated\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs,\\r\\n                bool _canAdminOverwrite,\\r\\n                bool _isPublic) UniswapConfig(configs, _canAdminOverwrite, 0) public {\\r\\n        // Initialize variables\\r\\n        isPublic = _isPublic;\\r\\n\\r\\n        // If public, force set admin to 0, require !canAdminOverwrite, and check token configs\\r\\n        if (isPublic) {\\r\\n            admin = address(0);\\r\\n            require(!canAdminOverwrite, \\\"canAdminOverwrite must be set to false for public UniswapSpotView contracts.\\\");\\r\\n            checkTokenConfigs(configs);\\r\\n        }\\r\\n\\r\\n        // Init token configs\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev UniswapV2Factory contract address.\\r\\n     */\\r\\n    address constant private UNISWAP_V2_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    \\r\\n    /**\\r\\n     * @dev WETH contract address.\\r\\n     */\\r\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies token configs\\r\\n     * @param configs The configs for the supported assets\\r\\n     */\\r\\n    function checkTokenConfigs(TokenConfig[] memory configs) internal view {\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // Check symbolHash for ETH\\r\\n            require(configs[i].symbolHash != ethHash, \\\"ETH does not need a price feed as all price feeds are based in ETH.\\\");\\r\\n\\r\\n            // Check symbolHash against underlying symbol\\r\\n            require(keccak256(abi.encodePacked(IERC20(configs[i].underlying).symbol())) == configs[i].symbolHash, \\\"Symbol mismatch between token config and ERC20 symbol method.\\\");\\r\\n\\r\\n            // Check baseUnit against underlying decimals\\r\\n            require(10 ** uint256(IERC20(configs[i].underlying).decimals()) == configs[i].baseUnit, \\\"Incorrect token config base unit.\\\");\\r\\n\\r\\n            // Check for WETH\\r\\n            if (configs[i].underlying == WETH_ADDRESS) {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.FIXED_ETH, \\\"Invalid WETH token config price source: must be FIXED_ETH.\\\");\\r\\n                \\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 1e18, \\\"WETH token config fixed price must be 1e18.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                require(configs[i].uniswapMarket == address(0), \\\"WETH Uniswap market not necessary.\\\");\\r\\n                configs[i].isUniswapReversed = false;\\r\\n            } else {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.UNISWAP, \\\"Invalid token config price source: must be UNISWAP.\\\");\\r\\n\\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 0, \\\"Token config fixed price must be 0.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_V2_FACTORY_ADDRESS, configs[i].underlying, WETH_ADDRESS));\\r\\n                require(configs[i].uniswapMarket == address(pair), \\\"Token config Uniswap market is not correct.\\\");\\r\\n                address token0 = pair.token0();\\r\\n                require((token0 == configs[i].underlying && !configs[i].isUniswapReversed) || (token0 != configs[i].underlying && configs[i].isUniswapReversed), \\\"Token config Uniswap reversal is incorrect.\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize token configs\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function initConfigs(TokenConfig[] memory configs) internal pure {\\r\\n        for (uint i = 0; i < configs.length; i++) {\\r\\n            TokenConfig memory config = configs[i];\\r\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\r\\n            address uniswapMarket = config.uniswapMarket;\\r\\n            if (config.priceSource == PriceSource.UNISWAP) {\\r\\n                require(uniswapMarket != address(0), \\\"UNISWAP prices must have a Uniswap market\\\");\\r\\n            } else {\\r\\n                require(uniswapMarket == address(0), \\\"only UNISWAP prices utilize a Uniswap market\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function add(TokenConfig[] memory configs) external {\\r\\n        // If public, check token configs; if private, check that msg.sender == admin\\r\\n        if (isPublic) checkTokenConfigs(configs);\\r\\n        else require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n\\r\\n        // Add and init token configs\\r\\n        _add(configs);\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the official price for an underlying token address\\r\\n     * @param underlying The underlying token address for which to get the price (set to zero address for ETH)\\r\\n     * @return Price denominated in ETH, with 18 decimals\\r\\n     */\\r\\n    function price(address underlying) external view returns (uint) {\\r\\n        TokenConfig memory config = getTokenConfigByUnderlying(underlying);\\r\\n        return priceInternal(config);\\r\\n    }\\r\\n\\r\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\r\\n        if (config.priceSource == PriceSource.UNISWAP) return fetchSpotPrice(config);\\r\\n        if (config.priceSource == PriceSource.FIXED_USD) {\\r\\n            uint ethPerUsd = fetchSpotPrice(getTokenConfigByUnderlying(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48));\\r\\n            return mul(config.fixedPrice, ethPerUsd) / 1e6;\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_ETH) return config.fixedPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying price of a cToken\\r\\n     * @dev Implements the PriceOracle interface for Compound v2.\\r\\n     * @param cToken The cToken address for price retrieval\\r\\n     * @return Price denominated in ETH, with 18 decimals, for the given cToken address\\r\\n     */\\r\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\r\\n        if (CToken(cToken).isCEther()) return 1e18;\\r\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\r\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\r\\n         // Since the prices in this view have 18 decimals, we must scale them by 1e(36 - 18 - baseUnit)\\r\\n        return mul(1e18, priceInternal(config)) / config.baseUnit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/ETH price from Uniswap, with 18 decimals of precision.\\r\\n     */\\r\\n    function fetchSpotPrice(TokenConfig memory config) internal view virtual returns (uint) {\\r\\n        (uint reserve0, uint reserve1, uint blockTimestampLast) = IUniswapV2Pair(config.uniswapMarket).getReserves();\\r\\n        require(block.timestamp > blockTimestampLast, \\\"Uniswap LP token was updated in this block. Reverting due to risk of price manipulation.\\\");\\r\\n        return UniswapV2Library.getAmountOut(config.baseUnit, config.isUniswapReversed ? reserve1 : reserve0, config.isUniswapReversed ? reserve0 : reserve1);\\r\\n    }\\r\\n\\r\\n    /// @dev Overflow proof multiplication\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a == 0) return 0;\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, \\\"multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6f7bc76411f916af740d2d513bba41b113239dcb2d05094f469dfbb1e2476ada\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "contracts/Uniswap/UniswapView.sol:UniswapView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxSecondsBeforePriceIsStale\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"storedAndPendingPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "60a06040523480156200001157600080fd5b50604051620041713803806200417183398101604081905262000034916200107a565b60038054336001600160a01b03199091161760ff60a01b1916600160a01b8515150217905560048190558383826200006c83620000f3565b50505060808590526005805460ff1916831515179081905560ff1615620000dd57600380546001600160a01b03191690819055600160a01b900460ff1615620000d25760405162461bcd60e51b8152600401620000c99062001733565b60405180910390fd5b620000dd84620002e9565b620000e884620008d0565b5050505050620018b1565b60005b8151811015620002e557600354600160a01b900460ff166200016b57600260008383815181106200012357fe5b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff16156200016b5760405162461bcd60e51b8152600401620000c990620013d0565b60008282815181106200017a57fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b03909216919091178155918101518284015560408101516002830155606081015160038301805492949192909160ff1990911690836004811115620001f457fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b0319909416939093179190911691909117905560008054835160001991909101916001918590859081106200026657fe5b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002081905550600160026000848481518110620002a957fe5b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101620000f6565b5050565b60005b8151811015620002e55760405160200162000307906200123e565b604051602081830303815290604052805190602001208282815181106200032a57fe5b6020026020010151602001511415620003575760405162461bcd60e51b8152600401620000c9906200124d565b8181815181106200036457fe5b6020026020010151602001518282815181106200037d57fe5b6020026020010151600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620003c257600080fd5b505afa158015620003d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000401919081019062000f73565b604051602001620004139190620011b7565b6040516020818303038152906040528051906020012014620004495760405162461bcd60e51b8152600401620000c9906200146f565b8181815181106200045657fe5b6020026020010151604001518282815181106200046f57fe5b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620004b457600080fd5b505afa158015620004c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ef919062001172565b60ff16600a0a14620005155760405162461bcd60e51b8152600401620000c99062001584565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03168282815181106200054057fe5b6020026020010151600001516001600160a01b031614156200065b5760008282815181106200056b57fe5b60200260200101516060015160048111156200058357fe5b14620005a35760405162461bcd60e51b8152600401620000c990620015c5565b818181518110620005b057fe5b602002602001015160800151670de0b6b3a764000014620005e55760405162461bcd60e51b8152600401620000c990620017a1565b60006001600160a01b0316828281518110620005fd57fe5b602002602001015160a001516001600160a01b031614620006325760405162461bcd60e51b8152600401620000c9906200142d565b60008282815181106200064157fe5b602090810291909101015190151560c090910152620008c7565b60038282815181106200066a57fe5b60200260200101516060015160048111156200068257fe5b14620006a25760405162461bcd60e51b8152600401620000c99062001380565b818181518110620006af57fe5b602002602001015160800151600014620006dd5760405162461bcd60e51b8152600401620000c990620012f8565b600062000737735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f8484815181106200070557fe5b60200260200101516000015173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc262000a7660201b620007e71760201c565b9050806001600160a01b03168383815181106200075057fe5b602002602001015160a001516001600160a01b031614620007855760405162461bcd60e51b8152600401620000c990620014cc565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015620007c157600080fd5b505afa158015620007d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007fc919062000f4e565b90508383815181106200080b57fe5b6020026020010151600001516001600160a01b0316816001600160a01b03161480156200084e57508383815181106200084057fe5b602002602001015160c00151155b80620008a557508383815181106200086257fe5b6020026020010151600001516001600160a01b0316816001600160a01b031614158015620008a557508383815181106200089857fe5b602002602001015160c001515b620008c45760405162461bcd60e51b8152600401620000c99062001622565b50505b600101620002ec565b60005b8151811015620002e557620008e762000e44565b828281518110620008f457fe5b602002602001015190506000816040015111620009255760405162461bcd60e51b8152600401620000c990620012b6565b60a08101516003826060015160048111156200093d57fe5b141562000a00576001600160a01b0381166200096d5760405162461bcd60e51b8152600401620000c990620016ed565b815160006200097c8462000aeb565b6001600160a01b038316600081815260076020908152604080832042808255600890935292819020828155600193840186905592909201849055905192935090917f0d485bb9561d8954891bf391edd13fa8f4db3ea3191309867ecb63debeb509a891620009f09181908690819062001823565b60405180910390a2505062000a6b565b81516001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48141562000a415760405162461bcd60e51b8152600401620000c99062001517565b6001600160a01b0381161562000a6b5760405162461bcd60e51b8152600401620000c9906200166d565b5050600101620008d3565b6000808062000a86858562000b2a565b9150915085828260405160200162000aa092919062001195565b6040516020818303038152906040528051906020012060405160200162000ac9929190620011d5565b60408051601f1981840301815291905280516020909101209695505050505050565b600080600062000b0a8460a0015162000bbc60201b620008571760201c565b50915091508360c0015162000b20578162000b22565b805b949350505050565b600080826001600160a01b0316846001600160a01b0316141562000b625760405162461bcd60e51b8152600401620000c9906200133b565b826001600160a01b0316846001600160a01b03161062000b8457828462000b87565b83835b90925090506001600160a01b03821662000bb55760405162461bcd60e51b8152600401620000c990620016b6565b9250929050565b6000808062000bca62000dbf565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c0657600080fd5b505afa15801562000c1b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c41919062001061565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c7d57600080fd5b505afa15801562000c92573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cb8919062001061565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801562000cf957600080fd5b505afa15801562000d0e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d34919062001007565b9250925092508363ffffffff168163ffffffff161462000db557600081850390508063ffffffff1662000d73848662000dc960201b62000a2c1760201c565b600001516001600160e01b031602870196508063ffffffff1662000da3858562000dc960201b62000a2c1760201c565b516001600160e01b0316029590950194505b5050509193909250565b63ffffffff421690565b62000dd362000e81565b6000826001600160701b03161162000dff5760405162461bcd60e51b8152600401620000c990620017ec565b6040805160208101909152806001600160701b038416600160701b600160e01b03607087901b168162000e2e57fe5b046001600160e01b031681525090505b92915050565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b60408051602081019091526000815290565b80516001600160a01b038116811462000e3e57600080fd5b8051801515811462000e3e57600080fd5b600060e0828403121562000ece578081fd5b62000eda60e06200183e565b905062000ee8838362000e93565b8152602082015160208201526040820151604082015260608201516005811062000f1157600080fd5b60608201526080828101519082015262000f2f8360a0840162000e93565b60a082015262000f438360c0840162000eab565b60c082015292915050565b60006020828403121562000f60578081fd5b62000f6c838362000e93565b9392505050565b60006020828403121562000f85578081fd5b81516001600160401b038082111562000f9c578283fd5b818401915084601f83011262000fb0578283fd5b81518181111562000fbf578384fd5b62000fd4601f8201601f19166020016200183e565b915080825285602082850101111562000feb578384fd5b62000ffe81602084016020860162001865565b50949350505050565b6000806000606084860312156200101c578182fd5b8351620010298162001898565b60208501519093506200103c8162001898565b604085015190925063ffffffff8116811462001056578182fd5b809150509250925092565b60006020828403121562001073578081fd5b5051919050565b600080600080600060a0868803121562001092578081fd5b8551602080880151919650906001600160401b0380821115620010b3578384fd5b818901915089601f830112620010c7578384fd5b815181811115620010d6578485fd5b620010e584858302016200183e565b818152848101925083850160e0808402860187018e101562001105578788fd5b8795505b8386101562001135576200111e8e8362000ebc565b855260019590950194938601939081019062001109565b505080985050505050506200114e876040880162000eab565b92506200115f876060880162000eab565b9150608086015190509295509295909350565b60006020828403121562001184578081fd5b815160ff8116811462000f6c578182fd5b6001600160601b0319606093841b811682529190921b16601482015260280190565b60008251620011cb81846020870162001865565b9190910192915050565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6001600160601b031916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6208aa8960eb1b815260030190565b60208082526043908201527f45544820646f6573206e6f74206e65656420612070726963652066656564206160408201527f7320616c6c2070726963652066656564732061726520626173656420696e20456060820152622a241760e91b608082015260a00190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526023908201527f546f6b656e20636f6e666967206669786564207072696365206d75737420626560408201526210181760e91b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526030908201527f496e76616c696420746f6b656e20636f6e66696720707269636520736f75726360408201526f329d1036bab9ba103132902a2ba0a81760811b606082015260800190565b6020808252603e908201527f546f6b656e20636f6e66696720616c72656164792065786973747320666f722060408201527f7468697320756e6465726c79696e6720746f6b656e20616464726573732e0000606082015260800190565b60208082526022908201527f5745544820556e6973776170206d61726b6574206e6f74206e656365737361726040820152613c9760f11b606082015260800190565b6020808252603d908201527f53796d626f6c206d69736d61746368206265747765656e20746f6b656e20636f60408201527f6e66696720616e642045524332302073796d626f6c206d6574686f642e000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e6973776170206d61726b6574206973206e60408201526a37ba1031b7b93932b1ba1760a91b606082015260800190565b60208082526047908201527f55534443206d757374206265205457415020626563617573652046495845445f60408201527f5553442070726963657320617265206261736564206f6e20746865205553444360608201526610383934b1b29760c91b608082015260a00190565b60208082526021908201527f496e636f727265637420746f6b656e20636f6e666967206261736520756e69746040820152601760f91b606082015260800190565b6020808252603a908201527f496e76616c6964205745544820746f6b656e20636f6e6669672070726963652060408201527f736f757263653a206d7573742062652046495845445f4554482e000000000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e697377617020726576657273616c20697360408201526a1034b731b7b93932b1ba1760a91b606082015260800190565b60208082526029908201527f6f6e6c79205457415020707269636573207574696c697a65206120556e697377604082015268185c081b585c9ad95d60ba1b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526026908201527f5457415020707269636573206d7573742068617665206120556e6973776170206040820152651b585c9ad95d60d21b606082015260800190565b60208082526048908201527f63616e41646d696e4f7665727772697465206d7573742062652073657420746f60408201527f2066616c736520666f72207075626c696320556e69737761705669657720636f606082015267373a3930b1ba399760c11b608082015260a00190565b6020808252602b908201527f5745544820746f6b656e20636f6e666967206669786564207072696365206d7560408201526a39ba1031329018b2989c1760a91b606082015260800190565b60208082526017908201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604082015260600190565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b03811182821017156200185d57600080fd5b604052919050565b60005b838110156200188257818101518382015260200162001868565b8381111562001892576000848401525b50505050565b6001600160701b0381168114620018ae57600080fd5b50565b6080516128a0620018d1600039806106d552806119a352506128a06000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80639f599631116100b8578063dc9a15351161007c578063dc9a153514610268578063e073a24114610270578063e9206d7814610278578063f851a44014610280578063fc57d4df14610295578063fe16e80c146102a857610137565b80639f5996311461021c578063aea910781461022f578063b3bcdfba14610242578063cfed246b14610255578063d1b353b4146101b857610137565b806369aa3ac6116100ff57806369aa3ac6146101b85780638a003888146101cd5780638cea8c26146101e05780638e499bcf146102015780638f2839701461020957610137565b80631a04ee251461013c5780632d1c668f146101665780633a8521691461017b5780634da2194214610190578063656b0fd1146101b0575b600080fd5b61014f61014a366004611c02565b6102bb565b60405161015d929190611f96565b60405180910390f35b610179610174366004611c71565b610430565b005b610183610488565b60405161015d9190611fc4565b6101a361019e366004611bca565b61048d565b60405161015d9190612721565b6101836104d9565b6101c06104e9565b60405161015d9190612789565b6101a36101db366004611e10565b6104f5565b6101f36101ee366004611bca565b6105ce565b60405161015d929190612792565b6101c06105e7565b610179610217366004611bca565b6105ed565b6101a361022a366004611bca565b610639565b6101c061023d366004611bca565b61064c565b610179610250366004611c02565b610671565b6101c0610263366004611bca565b6106b2565b6101836106c4565b6101c06106cd565b6101c06106d3565b6102886106f7565b60405161015d9190611f43565b6101c06102a3366004611bca565b610706565b6101f36102b6366004611bca565b6107ce565b606080808367ffffffffffffffff811180156102d657600080fd5b50604051908082528060200260200182016040528015610300578160200160208202803683370190505b50905060608467ffffffffffffffff8111801561031c57600080fd5b50604051908082528060200260200182016040528015610346578160200160208202803683370190505b50905060005b8581101561042257600087878381811061036257fe5b90506020020160208101906103779190611bca565b9050610381611ac0565b61038a8261048d565b905060038160600151600481111561039e57fe5b146103c45760405162461bcd60e51b81526004016103bb906124a7565b60405180910390fd5b6001600160a01b03821660009081526006602052604090205485518690859081106103eb57fe5b6020026020010181815250506104018282610aa8565b84848151811061040d57fe5b6020908102919091010152505060010161034c565b5090925090505b9250929050565b60055460ff16156104495761044481610ba7565b610473565b6003546001600160a01b031633146104735760405162461bcd60e51b81526004016103bb90612197565b61047c8161113c565b61048581611323565b50565b600181565b610495611ac0565b60006104a0836114b1565b905060001981146104bc576104b4816104f5565b9150506104d4565b60405162461bcd60e51b81526004016103bb906120df565b919050565b600354600160a01b900460ff1681565b670de0b6b3a764000081565b6104fd611ac0565b6105056105e7565b82106105235760405162461bcd60e51b81526004016103bb906120df565b6000828154811061053057fe5b60009182526020918290206040805160e081018252600690930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154909190606083019060ff16600481111561058a57fe5b600481111561059557fe5b8152600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b6008602052600090815260409020805460019091015482565b60005490565b6003546001600160a01b031633146106175760405162461bcd60e51b81526004016103bb90612197565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610641611ac0565b60006104a0836114f5565b6000610656611ac0565b61065f8361048d565b905061066a816115ed565b9392505050565b60005b818110156106ad576106a583838381811061068b57fe5b90506020020160208101906106a09190611bca565b6117d9565b600101610674565b505050565b60066020526000908152604090205481565b60055460ff1681565b60045481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6003546001600160a01b031681565b6000816001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561074157600080fd5b505afa158015610755573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107799190611d14565b1561078d5750670de0b6b3a76400006104d4565b610795611ac0565b61079e83610639565b905080604001516107bf670de0b6b3a76400006107ba846115ed565b611884565b816107c657fe5b049392505050565b6007602052600090815260409020805460019091015482565b60008060006107f685856118be565b9150915085828260405160200161080e929190611e9b565b60405160208183030381529060405280519060200120604051602001610835929190611ede565b60408051601f1981840301815291905280516020909101209695505050505050565b6000806000610864611941565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561089f57600080fd5b505afa1580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d79190611e28565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561091257600080fd5b505afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190611e28565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561098a57600080fd5b505afa15801561099e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c29190611dbc565b9250925092508363ffffffff168163ffffffff1614610a225780840363ffffffff81166109ef8486610a2c565b516001600160e01b031602969096019563ffffffff8116610a108585610a2c565b516001600160e01b0316029590950194505b5050509193909250565b610a34611afd565b6000826001600160701b031611610a5d5760405162461bcd60e51b81526004016103bb906126ea565b6040805160208101909152806001600160701b0384166dffffffffffffffffffffffffffff60701b607087901b1681610a9257fe5b046001600160e01b031681525090505b92915050565b600080600080610ab78561194b565b925092509250804211610adc5760405162461bcd60e51b81526004016103bb906123c2565b42819003610ae8611afd565b60405180602001604052808386880381610afe57fe5b046001600160e01b031681525090506000610b1882611a78565b90506000610b2e82670de0b6b3a7640000611884565b90506000670de0b6b3a764000080610b4a848d60400151611884565b81610b5157fe5b0481610b5957fe5b0490507f7d881580fb2bb7844e8ecf8df26510247c4bbea2735d40bf0d9ac33c0d9acd818b828842604051610b919493929190611f70565b60405180910390a19a9950505050505050505050565b60005b815181101561113857604051602001610bc290611f34565b60405160208183030381529060405280519060200120828281518110610be457fe5b6020026020010151602001511415610c0e5760405162461bcd60e51b81526004016103bb90611ffd565b818181518110610c1a57fe5b602002602001015160200151828281518110610c3257fe5b6020026020010151600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610c7657600080fd5b505afa158015610c8a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cb29190810190611d30565b604051602001610cc29190611ec2565b6040516020818303038152906040528051906020012014610cf55760405162461bcd60e51b81526004016103bb9061231a565b818181518110610d0157fe5b602002602001015160400151828281518110610d1957fe5b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5d57600080fd5b505afa158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d959190611e40565b60ff16600a0a14610db85760405162461bcd60e51b81526004016103bb90612466565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316828281518110610de257fe5b6020026020010151600001516001600160a01b03161415610eed576000828281518110610e0b57fe5b6020026020010151606001516004811115610e2257fe5b14610e3f5760405162461bcd60e51b81526004016103bb906124de565b818181518110610e4b57fe5b602002602001015160800151670de0b6b3a764000014610e7d5760405162461bcd60e51b81526004016103bb9061269f565b60006001600160a01b0316828281518110610e9457fe5b602002602001015160a001516001600160a01b031614610ec65760405162461bcd60e51b81526004016103bb906122d8565b6000828281518110610ed457fe5b602090810291909101015190151560c090910152611130565b6003828281518110610efb57fe5b6020026020010151606001516004811115610f1257fe5b14610f2f5760405162461bcd60e51b81526004016103bb906121ce565b818181518110610f3b57fe5b602002602001015160800151600014610f665760405162461bcd60e51b81526004016103bb9061210f565b6000610fb2735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f848481518110610f8c57fe5b60200260200101516000015173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26107e7565b9050806001600160a01b0316838381518110610fca57fe5b602002602001015160a001516001600160a01b031614610ffc5760405162461bcd60e51b81526004016103bb90612377565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561103757600080fd5b505afa15801561104b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106f9190611be6565b905083838151811061107d57fe5b6020026020010151600001516001600160a01b0316816001600160a01b03161480156110be57508383815181106110b057fe5b602002602001015160c00151155b8061111157508383815181106110d057fe5b6020026020010151600001516001600160a01b0316816001600160a01b031614158015611111575083838151811061110457fe5b602002602001015160c001515b61112d5760405162461bcd60e51b81526004016103bb9061253b565b50505b600101610baa565b5050565b60005b815181101561113857600354600160a01b900460ff166111ae576002600083838151811061116957fe5b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff16156111ae5760405162461bcd60e51b81526004016103bb9061221e565b60008282815181106111bc57fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b03909216919091178155918101518284015560408101516002830155606081015160038301805492949192909160ff199091169083600481111561123557fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b0319909416939093179190911691909117905560008054835160001991909101916001918590859081106112a657fe5b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020819055506001600260008484815181106112e857fe5b602090810291909101810151516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161113f565b60005b815181101561113857611337611ac0565b82828151811061134357fe5b6020026020010151905060008160400151116113715760405162461bcd60e51b81526004016103bb90612066565b60a081015160038260600151600481111561138857fe5b1415611442576001600160a01b0381166113b45760405162461bcd60e51b81526004016103bb90612606565b815160006113c184611a90565b6001600160a01b038316600081815260076020908152604080832042808255600890935292819020828155600193840186905592909201849055905192935090917f0d485bb9561d8954891bf391edd13fa8f4db3ea3191309867ecb63debeb509a891611433918190869081906127a0565b60405180910390a250506114a7565b81516001600160a01b031673a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4814156114805760405162461bcd60e51b81526004016103bb906123f9565b6001600160a01b038116156114a75760405162461bcd60e51b81526004016103bb90612586565b5050600101611326565b6001600160a01b03811660009081526002602052604081205460ff166114d957600019610aa2565b506001600160a01b031660009081526001602052604090205490565b6000610aa2826001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561153357600080fd5b505afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156b9190611d14565b6115e557826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a857600080fd5b505afa1580156115bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e09190611be6565b6115e8565b60005b6114b1565b600060038260600151600481111561160157fe5b141561168a5781516001600160a01b039081166000908152600860209081526040808320548651909416835260079091529020546004546002919092010490156116695760045481014211156116695760405162461bcd60e51b81526004016103bb90611fcf565b505080516001600160a01b03166000908152600660205260409020546104d4565b60018260600151600481111561169c57fe5b14156117b65773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4860005260066020527fc54ea4dd6a734fa461b7ee355eb25a8cb9467ce4d0e78fa68c9c085fda8edba254806116fe5760405162461bcd60e51b81526004016103bb9061264c565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486000527fa197b6ae0044c90610b63b51392eb7144f4390bba5cb14eeeb9a37521cf0dd8a5460076020527ff942f4688cdba65adc8aa59da583acae93fa87351143ebc775559218bfa5f832546004546002919092010490156117935760045481014211156117935760405162461bcd60e51b81526004016103bb9061227b565b620f42406117a5856080015184611884565b816117ac57fe5b04925050506104d4565b6000826060015160048111156117c857fe5b14156104d4575060808101516104d4565b6117e1611ac0565b6117ea8261048d565b90506003816060015160048111156117fe57fe5b1461181b5760405162461bcd60e51b81526004016103bb906124a7565b60006118278383610aa8565b6001600160a01b03841660009081526006602052604090819020829055519091507f0d86730737b142fc160892fa8a0f2db687a92a0e294d1ad70624cf5acef03b84906118779085908490611f57565b60405180910390a1505050565b60008261189357506000610aa2565b828202828482816118a057fe5b041461066a5760405162461bcd60e51b81526004016103bb906120a8565b600080826001600160a01b0316846001600160a01b031614156118f35760405162461bcd60e51b81526004016103bb90612152565b826001600160a01b0316846001600160a01b031610611913578284611916565b83835b90925090506001600160a01b0382166104295760405162461bcd60e51b81526004016103bb906125cf565b63ffffffff421690565b8051600090819081908161195e86611a90565b9050611968611b0f565b506001600160a01b038216600090815260086020908152604091829020825180840190935280548084526001909101549183019190915242037f00000000000000000000000000000000000000000000000000000000000000008110611a485781516001600160a01b03808616600090815260076020908152604080832094855581870180516001968701556008909252918290204280825594018790558b518651915192519316937f0d485bb9561d8954891bf391edd13fa8f4db3ea3191309867ecb63debeb509a893611a3f939089906127a0565b60405180910390a25b50506001600160a01b03909116600090815260076020526040902060018101549054919450925090509193909250565b516612725dd1d243ab6001600160e01b039091160490565b6000806000611aa28460a00151610857565b50915091508360c00151611ab65781611ab8565b805b949350505050565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b60408051602081019091526000815290565b604051806040016040528060008152602001600081525090565b8035610aa281612832565b8035610aa281612847565b600060e08284031215611b50578081fd5b611b5a60e06127bb565b90508135611b6781612832565b808252506020820135602082015260408201356040820152606082013560058110611b9157600080fd5b606082015260808281013590820152611bad8360a08401611b29565b60a0820152611bbf8360c08401611b34565b60c082015292915050565b600060208284031215611bdb578081fd5b813561066a81612832565b600060208284031215611bf7578081fd5b815161066a81612832565b60008060208385031215611c14578081fd5b823567ffffffffffffffff80821115611c2b578283fd5b818501915085601f830112611c3e578283fd5b813581811115611c4c578384fd5b8660208083028501011115611c5f578384fd5b60209290920196919550909350505050565b60006020808385031215611c83578182fd5b823567ffffffffffffffff811115611c99578283fd5b8301601f81018513611ca9578283fd5b8035611cbc611cb7826127e2565b6127bb565b8181528381019083850160e0808502860187018a1015611cda578788fd5b8795505b84861015611d0657611cf08a83611b3f565b8452600195909501949286019290810190611cde565b509098975050505050505050565b600060208284031215611d25578081fd5b815161066a81612847565b600060208284031215611d41578081fd5b815167ffffffffffffffff80821115611d58578283fd5b818401915084601f830112611d6b578283fd5b815181811115611d79578384fd5b611d8c601f8201601f19166020016127bb565b9150808252856020828501011115611da2578384fd5b611db3816020840160208601612802565b50949350505050565b600080600060608486031215611dd0578081fd5b8351611ddb81612855565b6020850151909350611dec81612855565b604085015190925063ffffffff81168114611e05578182fd5b809150509250925092565b600060208284031215611e21578081fd5b5035919050565b600060208284031215611e39578081fd5b5051919050565b600060208284031215611e51578081fd5b815160ff8116811461066a578182fd5b6000815180845260208085019450808401835b83811015611e9057815187529582019590820190600101611e74565b509495945050505050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b60008251611ed4818460208701612802565b9190910192915050565b6001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6208aa8960eb1b815260030190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b600060408252611fa96040830185611e61565b8281036020840152611fbb8185611e61565b95945050505050565b901515815260200190565b6020808252601490820152732a2ba0a810383934b1b29034b99039ba30b6329760611b604082015260600190565b60208082526043908201527f45544820646f6573206e6f74206e65656420612070726963652066656564206160408201527f7320616c6c2070726963652066656564732061726520626173656420696e20456060820152622a241760e91b608082015260a00190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526017908201527f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000604082015260600190565b6020808252601690820152751d1bdad95b8818dbdb999a59c81b9bdd08199bdd5b9960521b604082015260600190565b60208082526023908201527f546f6b656e20636f6e666967206669786564207072696365206d75737420626560408201526210181760e91b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526017908201527f6d73672e73656e646572206973206e6f742061646d696e000000000000000000604082015260600190565b60208082526030908201527f496e76616c696420746f6b656e20636f6e66696720707269636520736f75726360408201526f329d1036bab9ba103132902a2ba0a81760811b606082015260800190565b6020808252603e908201527f546f6b656e20636f6e66696720616c72656164792065786973747320666f722060408201527f7468697320756e6465726c79696e6720746f6b656e20616464726573732e0000606082015260800190565b60208082526039908201527f555344432054574150207072696365206973207374616c653b2063616e6e6f7460408201527f20636f6e766572742066726f6d2055534420746f204554482e00000000000000606082015260800190565b60208082526022908201527f5745544820556e6973776170206d61726b6574206e6f74206e656365737361726040820152613c9760f11b606082015260800190565b6020808252603d908201527f53796d626f6c206d69736d61746368206265747765656e20746f6b656e20636f60408201527f6e66696720616e642045524332302073796d626f6c206d6574686f642e000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e6973776170206d61726b6574206973206e60408201526a37ba1031b7b93932b1ba1760a91b606082015260800190565b6020808252601a908201527f6e6f77206d75737420636f6d65206166746572206265666f7265000000000000604082015260600190565b60208082526047908201527f55534443206d757374206265205457415020626563617573652046495845445f60408201527f5553442070726963657320617265206261736564206f6e20746865205553444360608201526610383934b1b29760c91b608082015260a00190565b60208082526021908201527f496e636f727265637420746f6b656e20636f6e666967206261736520756e69746040820152601760f91b606082015260800190565b6020808252601b908201527f6f6e6c792054574150207072696365732067657420706f737465640000000000604082015260600190565b6020808252603a908201527f496e76616c6964205745544820746f6b656e20636f6e6669672070726963652060408201527f736f757263653a206d7573742062652046495845445f4554482e000000000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e697377617020726576657273616c20697360408201526a1034b731b7b93932b1ba1760a91b606082015260800190565b60208082526029908201527f6f6e6c79205457415020707269636573207574696c697a65206120556e697377604082015268185c081b585c9ad95d60ba1b606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526026908201527f5457415020707269636573206d7573742068617665206120556e6973776170206040820152651b585c9ad95d60d21b606082015260800190565b60208082526033908201527f55534443207072696365206e6f74207365743b2063616e6e6f7420636f6e7665604082015272393a10333937b6902aa9a2103a379022aa241760691b606082015260800190565b6020808252602b908201527f5745544820746f6b656e20636f6e666967206669786564207072696365206d7560408201526a39ba1031329018b2989c1760a91b606082015260800190565b60208082526017908201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604082015260600190565b81516001600160a01b0390811682526020808401519083015260408084015190830152606083015160e0830191906005811061275957fe5b80606085015250608084015160808401528060a08501511660a08401525060c0830151151560c083015292915050565b90815260200190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff811182821017156127da57600080fd5b604052919050565b600067ffffffffffffffff8211156127f8578081fd5b5060209081020190565b60005b8381101561281d578181015183820152602001612805565b8381111561282c576000848401525b50505050565b6001600160a01b038116811461048557600080fd5b801515811461048557600080fd5b6001600160701b038116811461048557600080fdfea264697066735822122070403b3ec321990dd7c8aaa1925072101c8f1a93fa219088db94dd1bb7e3c07964736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_canAdminOverwrite\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxSecondsBeforePriceIsStale\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"storedAndPendingPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"params\":{\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"constructor\":{\"details\":\"Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\",\"params\":{\"_canAdminOverwrite\":\"Whether or not existing token configs can be overwritten (must be false if `_isPublic` is true)\",\"_isPublic\":\"If true, anyone can add assets, but they will be validated\",\"_maxSecondsBeforePriceIsStale\":\"The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\",\"anchorPeriod_\":\"The minimum amount of time required for the old uniswap price accumulator to be replaced\",\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals, for the given cToken address\"}},\"postPrices(address[])\":{\"details\":\"We let anyone pay to post anything, but only prices from Uniswap will be stored in the view.\",\"params\":{\"underlyings\":\"The underlying token addresses for which to get and post TWAPs\"}},\"price(address)\":{\"params\":{\"underlying\":\"The underlying token address for which to get the price (set to zero address for ETH)\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals\"}},\"storedAndPendingPrices(address[])\":{\"details\":\"Get both stored and pending prices for `underlyings` for comparison off-chain to determine if posting is needed.\"}},\"stateVariables\":{\"UNISWAP_V2_FACTORY_ADDRESS\":{\"details\":\"UniswapV2Factory contract address.\"},\"WETH_ADDRESS\":{\"details\":\"WETH contract address.\"},\"ethHash\":{\"details\":\"The symbol hash for ETH\"}},\"version\":1},\"userdoc\":{\"events\":{\"AnchorPriceUpdated(address,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when anchor price is updated\"},\"PriceUpdated(address,uint256)\":{\"notice\":\"The event emitted when the stored price is updated\"},\"UniswapWindowUpdated(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when the uniswap window changes\"}},\"kind\":\"user\",\"methods\":{\"IS_UNISWAP_VIEW()\":{\"notice\":\"Constant indicating that this contract is a UniswapView\"},\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"notice\":\"Add new asset(s)\"},\"admin()\":{\"notice\":\"Admin address\"},\"anchorPeriod()\":{\"notice\":\"The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\"},\"canAdminOverwrite()\":{\"notice\":\"Whether or not existing token configs can be overwritten\"},\"changeAdmin(address)\":{\"notice\":\"Changes the admin\"},\"constructor\":\"Construct a uniswap anchored view for a set of token configurations\",\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"isPublic()\":{\"notice\":\"If new token configs can be added by anyone\"},\"maxSecondsBeforePriceIsStale()\":{\"notice\":\"The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\"},\"newObservations(address)\":{\"notice\":\"The new observation for each underlying\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"oldObservations(address)\":{\"notice\":\"The old observation for each underlying\"},\"postPrices(address[])\":{\"notice\":\"Update Uniswap TWAP prices\"},\"price(address)\":{\"notice\":\"Get the official price for an underlying token address\"},\"prices(address)\":{\"notice\":\"Official prices by underlying\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapView.sol\":\"UniswapView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface CToken {\\r\\n    function isCEther() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface CErc20 {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract UniswapConfig {\\r\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\r\\n    enum PriceSource {\\r\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\r\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\r\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\r\\n        TWAP,      /// implies the price is set by TWAPs (only available on UniswapView)\\r\\n        UNISWAP    /// implies the price is set by the direct Uniswap price (only available on UniswapDirectView)\\r\\n    }\\r\\n\\r\\n    /// @dev Describe how the USD price should be determined for an asset.\\r\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\r\\n    struct TokenConfig {\\r\\n        address underlying;\\r\\n        bytes32 symbolHash;\\r\\n        uint256 baseUnit;\\r\\n        PriceSource priceSource;\\r\\n        uint256 fixedPrice;\\r\\n        address uniswapMarket;\\r\\n        bool isUniswapReversed;\\r\\n    }\\r\\n\\r\\n    /// @dev Token config objects\\r\\n    TokenConfig[] internal _configs;\\r\\n\\r\\n    /// @dev Maps underlying addresses to token config indexes\\r\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\r\\n\\r\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\r\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\r\\n    \\r\\n    /// @notice Admin address\\r\\n    address public admin;\\r\\n    \\r\\n    /// @notice Whether or not existing token configs can be overwritten\\r\\n    bool public canAdminOverwrite;\\r\\n\\r\\n    /// @notice The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n    uint256 public maxSecondsBeforePriceIsStale;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an immutable store of configs into the contract data\\r\\n     * @param configs The configs for the supported assets\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs, bool _canAdminOverwrite, uint256 _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        admin = msg.sender;\\r\\n        canAdminOverwrite = _canAdminOverwrite;\\r\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\r\\n\\r\\n        // Add configs\\r\\n        _add(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal virtual {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing config\\r\\n            if (!canAdminOverwrite) require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the admin\\r\\n    function changeAdmin(address newAdmin) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /// @notice The number of tokens this contract actually supports\\r\\n    function numTokens() public view returns (uint256) {\\r\\n        return _configs.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by cToken address\\r\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\r\\n        return getUnderlyingIndex(CToken(cToken).isCEther() ? address(0) : CErc20(cToken).underlying());\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by underlying ERC20 token address\\r\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\r\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the i-th config, according to the order they were passed in originally\\r\\n     * @param i The index of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\r\\n        require(i < numTokens(), \\\"token config not found\\\");\\r\\n        return _configs[i];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the cToken\\r\\n     * @param cToken The address of the cToken of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\r\\n        uint index = getCTokenIndex(cToken);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for an underlying asset\\r\\n     * @param underlying The address of the underlying asset of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\r\\n        uint index = getUnderlyingIndex(underlying);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb01fcfa0aba555d471ff2b824ac1190b91e3104cf5f5be3341d967a3442f1773\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./UniswapConfig.sol\\\";\\r\\nimport \\\"./UniswapLib.sol\\\";\\r\\n\\r\\nstruct Observation {\\r\\n    uint timestamp;\\r\\n    uint acc;\\r\\n}\\r\\n\\r\\ncontract UniswapView is UniswapConfig {\\r\\n    using FixedPoint for *;\\r\\n    \\r\\n    /// @notice Constant indicating that this contract is a UniswapView\\r\\n    bool constant public IS_UNISWAP_VIEW = true;\\r\\n\\r\\n    /// @notice The number of wei in 1 ETH\\r\\n    uint public constant ethBaseUnit = 1e18;\\r\\n\\r\\n    /// @notice A common scaling factor to maintain precision\\r\\n    uint public constant expScale = 1e18;\\r\\n\\r\\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\\r\\n    uint public immutable anchorPeriod;\\r\\n\\r\\n    /// @notice If new token configs can be added by anyone\\r\\n    bool public isPublic;\\r\\n\\r\\n    /// @notice Official prices by underlying\\r\\n    mapping(address => uint) public prices;\\r\\n\\r\\n    /// @notice The old observation for each underlying\\r\\n    mapping(address => Observation) public oldObservations;\\r\\n\\r\\n    /// @notice The new observation for each underlying\\r\\n    mapping(address => Observation) public newObservations;\\r\\n\\r\\n    /// @notice The event emitted when the stored price is updated\\r\\n    event PriceUpdated(address underlying, uint price);\\r\\n\\r\\n    /// @notice The event emitted when anchor price is updated\\r\\n    event AnchorPriceUpdated(address underlying, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\\r\\n\\r\\n    /// @notice The event emitted when the uniswap window changes\\r\\n    event UniswapWindowUpdated(address indexed underlying, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\r\\n\\r\\n    /// @dev The symbol hash for ETH\\r\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\r\\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\\r\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten (must be false if `_isPublic` is true)\\r\\n     * @param _isPublic If true, anyone can add assets, but they will be validated\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(uint anchorPeriod_,\\r\\n                TokenConfig[] memory configs,\\r\\n                bool _canAdminOverwrite,\\r\\n                bool _isPublic,\\r\\n                uint256 _maxSecondsBeforePriceIsStale) UniswapConfig(configs, _canAdminOverwrite, _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        anchorPeriod = anchorPeriod_;\\r\\n        isPublic = _isPublic;\\r\\n\\r\\n        // If public, force set admin to 0, require !canAdminOverwrite, and check token configs\\r\\n        if (isPublic) {\\r\\n            admin = address(0);\\r\\n            require(!canAdminOverwrite, \\\"canAdminOverwrite must be set to false for public UniswapView contracts.\\\");\\r\\n            checkTokenConfigs(configs);\\r\\n        }\\r\\n\\r\\n        // Init token configs\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev UniswapV2Factory contract address.\\r\\n     */\\r\\n    address constant private UNISWAP_V2_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    \\r\\n    /**\\r\\n     * @dev WETH contract address.\\r\\n     */\\r\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies token configs\\r\\n     * @param configs The configs for the supported assets\\r\\n     */\\r\\n    function checkTokenConfigs(TokenConfig[] memory configs) internal view {\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // Check symbolHash for ETH\\r\\n            require(configs[i].symbolHash != ethHash, \\\"ETH does not need a price feed as all price feeds are based in ETH.\\\");\\r\\n\\r\\n            // Check symbolHash against underlying symbol\\r\\n            require(keccak256(abi.encodePacked(IERC20(configs[i].underlying).symbol())) == configs[i].symbolHash, \\\"Symbol mismatch between token config and ERC20 symbol method.\\\");\\r\\n\\r\\n            // Check baseUnit against underlying decimals\\r\\n            require(10 ** uint256(IERC20(configs[i].underlying).decimals()) == configs[i].baseUnit, \\\"Incorrect token config base unit.\\\");\\r\\n\\r\\n            // Check for WETH\\r\\n            if (configs[i].underlying == WETH_ADDRESS) {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.FIXED_ETH, \\\"Invalid WETH token config price source: must be FIXED_ETH.\\\");\\r\\n                \\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 1e18, \\\"WETH token config fixed price must be 1e18.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                require(configs[i].uniswapMarket == address(0), \\\"WETH Uniswap market not necessary.\\\");\\r\\n                configs[i].isUniswapReversed = false;\\r\\n            } else {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.TWAP, \\\"Invalid token config price source: must be TWAP.\\\");\\r\\n\\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 0, \\\"Token config fixed price must be 0.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_V2_FACTORY_ADDRESS, configs[i].underlying, WETH_ADDRESS));\\r\\n                require(configs[i].uniswapMarket == address(pair), \\\"Token config Uniswap market is not correct.\\\");\\r\\n                address token0 = pair.token0();\\r\\n                require((token0 == configs[i].underlying && !configs[i].isUniswapReversed) || (token0 != configs[i].underlying && configs[i].isUniswapReversed), \\\"Token config Uniswap reversal is incorrect.\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize token configs\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function initConfigs(TokenConfig[] memory configs) internal {\\r\\n        for (uint i = 0; i < configs.length; i++) {\\r\\n            TokenConfig memory config = configs[i];\\r\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\r\\n            address uniswapMarket = config.uniswapMarket;\\r\\n            if (config.priceSource == PriceSource.TWAP) {\\r\\n                require(uniswapMarket != address(0), \\\"TWAP prices must have a Uniswap market\\\");\\r\\n                address underlying = config.underlying;\\r\\n                uint cumulativePrice = currentCumulativePrice(config);\\r\\n                oldObservations[underlying].timestamp = block.timestamp;\\r\\n                newObservations[underlying].timestamp = block.timestamp;\\r\\n                oldObservations[underlying].acc = cumulativePrice;\\r\\n                newObservations[underlying].acc = cumulativePrice;\\r\\n                emit UniswapWindowUpdated(underlying, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\\r\\n            } else {\\r\\n                require(config.underlying != 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, \\\"USDC must be TWAP because FIXED_USD prices are based on the USDC price.\\\");\\r\\n                require(uniswapMarket == address(0), \\\"only TWAP prices utilize a Uniswap market\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function add(TokenConfig[] memory configs) external {\\r\\n        // If public, check token configs; if private, check that msg.sender == admin\\r\\n        if (isPublic) checkTokenConfigs(configs);\\r\\n        else require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n\\r\\n        // Add and init token configs\\r\\n        _add(configs);\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the official price for an underlying token address\\r\\n     * @param underlying The underlying token address for which to get the price (set to zero address for ETH)\\r\\n     * @return Price denominated in ETH, with 18 decimals\\r\\n     */\\r\\n    function price(address underlying) external view returns (uint) {\\r\\n        TokenConfig memory config = getTokenConfigByUnderlying(underlying);\\r\\n        return priceInternal(config);\\r\\n    }\\r\\n\\r\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\r\\n        if (config.priceSource == PriceSource.TWAP) {\\r\\n            uint256 averageObservationTimestamp = (oldObservations[config.underlying].timestamp + newObservations[config.underlying].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"TWAP price is stale.\\\");\\r\\n            return prices[config.underlying];\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_USD) {\\r\\n            // Use USDC/ETH price (requires a TWAP-based token config for USDC) to convert from USD to ETH\\r\\n            uint ethPerUsd = prices[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48];\\r\\n            require(ethPerUsd > 0, \\\"USDC price not set; cannot convert from USD to ETH.\\\");\\r\\n            uint256 averageObservationTimestamp = (oldObservations[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48].timestamp + newObservations[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"USDC TWAP price is stale; cannot convert from USD to ETH.\\\");\\r\\n            return mul(config.fixedPrice, ethPerUsd) / 1e6;\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_ETH) return config.fixedPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying price of a cToken\\r\\n     * @dev Implements the PriceOracle interface for Compound v2.\\r\\n     * @param cToken The cToken address for price retrieval\\r\\n     * @return Price denominated in ETH, with 18 decimals, for the given cToken address\\r\\n     */\\r\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\r\\n        if (CToken(cToken).isCEther()) return ethBaseUnit; // ETH does not have a token config as `prices` is based in ETH\\r\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\r\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\r\\n         // Since the prices in this view have 18 decimals, we must scale them by 1e(36 - 18 - baseUnit)\\r\\n        return mul(1e18, priceInternal(config)) / config.baseUnit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update Uniswap TWAP prices\\r\\n     * @dev We let anyone pay to post anything, but only prices from Uniswap will be stored in the view.\\r\\n     * @param underlyings The underlying token addresses for which to get and post TWAPs\\r\\n     */\\r\\n    function postPrices(address[] calldata underlyings) external {\\r\\n        // Try to update the view storage\\r\\n        for (uint i = 0; i < underlyings.length; i++) {\\r\\n            postPriceInternal(underlyings[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function postPriceInternal(address underlying) internal {\\r\\n        TokenConfig memory config = getTokenConfigByUnderlying(underlying);\\r\\n        require(config.priceSource == PriceSource.TWAP, \\\"only TWAP prices get posted\\\");\\r\\n        uint anchorPrice = fetchAnchorPrice(underlying, config);\\r\\n        prices[underlying] = anchorPrice;\\r\\n        emit PriceUpdated(underlying, anchorPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/ETH price accumulator from Uniswap.\\r\\n     */\\r\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\r\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\r\\n        return config.isUniswapReversed ? cumulativePrice1 : cumulativePrice0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/ETH price from Uniswap, with 18 decimals of precision.\\r\\n     */\\r\\n    function fetchAnchorPrice(address underlying, TokenConfig memory config) internal virtual returns (uint) {\\r\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\r\\n\\r\\n        // This should be impossible, but better safe than sorry\\r\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\r\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\r\\n\\r\\n        // Calculate uniswap time-weighted average price\\r\\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\\r\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\r\\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\\r\\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, 1e18);\\r\\n        uint anchorPrice;\\r\\n\\r\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\r\\n\\r\\n        // In the case of non-ETH tokens\\r\\n        // a. pokeWindowValues already handled uniswap reversed cases, so priceAverage will always be Token/ETH TWAP price.\\r\\n        // b. conversionFactor = 1e18\\r\\n        // unscaledPriceMantissa = priceAverage(token/ETH TWAP price) * expScale * conversionFactor\\r\\n        // so ->\\r\\n        // anchorPrice = priceAverage * tokenBaseUnit / ethBaseUnit * 1e18\\r\\n        //             = priceAverage * conversionFactor * tokenBaseUnit / ethBaseUnit\\r\\n        //             = unscaledPriceMantissa / expScale * tokenBaseUnit / ethBaseUnit\\r\\n        anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\r\\n\\r\\n        emit AnchorPriceUpdated(underlying, anchorPrice, oldTimestamp, block.timestamp);\\r\\n\\r\\n        return anchorPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get both stored and pending prices for `underlyings` for comparison off-chain to determine if posting is needed.\\r\\n     */\\r\\n    function storedAndPendingPrices(address[] calldata underlyings) external returns (uint256[] memory, uint256[] memory) {\\r\\n        uint256[] memory storedPrices = new uint256[](underlyings.length);\\r\\n        uint256[] memory pendingPrices = new uint256[](underlyings.length);\\r\\n\\r\\n        for (uint256 i = 0; i < underlyings.length; i++) {\\r\\n            address underlying = underlyings[i];\\r\\n            TokenConfig memory config = getTokenConfigByUnderlying(underlying);\\r\\n            require(config.priceSource == PriceSource.TWAP, \\\"only TWAP prices get posted\\\");\\r\\n            storedPrices[i] = prices[underlying];\\r\\n            pendingPrices[i] = fetchAnchorPrice(underlying, config);\\r\\n        }\\r\\n\\r\\n        return (storedPrices, pendingPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\r\\n     *  Update new and old observations of lagging window if period elapsed.\\r\\n     */\\r\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\r\\n        address underlying = config.underlying;\\r\\n        uint cumulativePrice = currentCumulativePrice(config);\\r\\n\\r\\n        Observation memory newObservation = newObservations[underlying];\\r\\n\\r\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\r\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\r\\n        if (timeElapsed >= anchorPeriod) {\\r\\n            oldObservations[underlying].timestamp = newObservation.timestamp;\\r\\n            oldObservations[underlying].acc = newObservation.acc;\\r\\n\\r\\n            newObservations[underlying].timestamp = block.timestamp;\\r\\n            newObservations[underlying].acc = cumulativePrice;\\r\\n            emit UniswapWindowUpdated(config.underlying, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\r\\n        }\\r\\n        return (cumulativePrice, oldObservations[underlying].acc, oldObservations[underlying].timestamp);\\r\\n    }\\r\\n\\r\\n    /// @dev Overflow proof multiplication\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a == 0) return 0;\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, \\\"multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa2eaf85b9256396242c134acf756c1bab7cb0e080878e68eba2cf3a192f0470c\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/MockUniswapAnchoredView.sol:MockUniswapAnchoredView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_ANCHORED_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"anchorPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSecure\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAnchorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "6101206040523480156200001257600080fd5b506040516200479438038062004794833981016040819052620000359162001238565b6003805460ff60a01b196001600160a01b031990911633171690556000600481905585908590859085908590808083818062000071836200015f565b5050506001600160601b0319606089811b821660805288901b1660a052610100859052600b805483151560ff19909116179055670de0b6b3a7640000198611620000c65785670de0b6b3a764000001620000ca565b6000195b60c052670de0b6b3a76400008610620000e5576001620000f1565b85670de0b6b3a7640000035b60e052600b5460ff16156200014157600354600160a01b900460ff1615620001365760405162461bcd60e51b81526004016200012d906200196c565b60405180910390fd5b62000141846200042e565b6200014c8462000be4565b5050505050505050505050505062001cc9565b60005b81518110156200042a57600354600160a01b900460ff166200022957600260008383815181106200018f57fe5b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff1615620001d75760405162461bcd60e51b81526004016200012d90620017ad565b600a6000838381518110620001e857fe5b60209081029190910181015181015182528101919091526040016000205460ff1615620002295760405162461bcd60e51b81526004016200012d90620015d4565b60008282815181106200023857fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b03909216919091178155918101518284015560408101516002830155606081015160038301805492949192909160ff1990911690836004811115620002b257fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b0319909416939093179190911691909117905560008054835160001991909101916001918590859081106200032457fe5b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020819055506001600260008484815181106200036757fe5b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016000805490500360096000848481518110620003c457fe5b6020026020010151602001518152602001908152602001600020819055506001600a6000848481518110620003f557fe5b6020908102919091018101518101518252810191909152604001600020805460ff191691151591909117905560010162000162565b5050565b60005b81518110156200042a576040516020016200044c9062001517565b604051602081830303815290604052805190602001208282815181106200046f57fe5b60200260200101516020015114620005ea578181815181106200048e57fe5b602002602001015160a001516001600160a01b031673b4e16d0168e52d35cacd2c6185b44281ec28c9dc6001600160a01b031614620004e15760405162461bcd60e51b81526004016200012d90620016df565b818181518110620004ee57fe5b602002602001015160c00151156200051a5760405162461bcd60e51b81526004016200012d906200173c565b60006001600160a01b03168282815181106200053257fe5b6020026020010151600001516001600160a01b031614620005675760405162461bcd60e51b81526004016200012d9062001a82565b8181815181106200057457fe5b602002602001015160800151600014620005a25760405162461bcd60e51b81526004016200012d9062001b98565b670de0b6b3a7640000828281518110620005b857fe5b60200260200101516040015114620005e45760405162461bcd60e51b81526004016200012d90620018e3565b62000bdb565b6000828281518110620005f957fe5b6020026020010151600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200063e57600080fd5b505afa15801562000653573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200067d919081019062001334565b6040516020016200068f919062001480565b604051602081830303815290604052805190602001209050828281518110620006b457fe5b6020026020010151602001518114806200073c5750604051602001620006da9062001507565b60405160208183030381529060405280519060200120811480156200073c57506040516020016200070b9062001526565b604051602081830303815290604052805190602001208383815181106200072e57fe5b602002602001015160200151145b6200075b5760405162461bcd60e51b81526004016200012d906200183b565b8282815181106200076857fe5b6020026020010151604001518383815181106200078157fe5b6020026020010151600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620007c657600080fd5b505afa158015620007db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080191906200143b565b60ff16600a0a14620008275760405162461bcd60e51b81526004016200012d906200192b565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b03168383815181106200085257fe5b6020026020010151600001516001600160a01b031614156200096d5760008383815181106200087d57fe5b60200260200101516060015160048111156200089557fe5b14620008b55760405162461bcd60e51b81526004016200012d90620019da565b828281518110620008c257fe5b602002602001015160800151670de0b6b3a764000014620008f75760405162461bcd60e51b81526004016200012d9062001b16565b60006001600160a01b03168383815181106200090f57fe5b602002602001015160a001516001600160a01b031614620009445760405162461bcd60e51b81526004016200012d90620017f9565b60008383815181106200095357fe5b602090810291909101015190151560c09091015262000bd9565b60048383815181106200097c57fe5b60200260200101516060015160048111156200099457fe5b14620009b45760405162461bcd60e51b81526004016200012d9062001535565b828281518110620009c157fe5b602002602001015160800151600014620009ef5760405162461bcd60e51b81526004016200012d9062001657565b600062000a49735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f85858151811062000a1757fe5b60200260200101516000015173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc262000d4260201b62000c121760201c565b9050806001600160a01b031684848151811062000a6257fe5b602002602001015160a001516001600160a01b03161462000a975760405162461bcd60e51b81526004016200012d9062001898565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ad357600080fd5b505afa15801562000ae8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b0e919062001212565b905084848151811062000b1d57fe5b6020026020010151600001516001600160a01b0316816001600160a01b031614801562000b60575084848151811062000b5257fe5b602002602001015160c00151155b8062000bb7575084848151811062000b7457fe5b6020026020010151600001516001600160a01b0316816001600160a01b03161415801562000bb7575084848151811062000baa57fe5b602002602001015160c001515b62000bd65760405162461bcd60e51b81526004016200012d9062001a37565b50505b505b60010162000431565b60005b81518110156200042a5762000bfb62001110565b82828151811062000c0857fe5b60200260200101519050600081604001511162000c395760405162461bcd60e51b81526004016200012d9062001592565b60a081015160028260600151600481111562000c5157fe5b141562000d0d576001600160a01b03811662000c815760405162461bcd60e51b81526004016200012d9062001614565b6020820151600062000c938462000db7565b600083815260076020908152604080832042808255600890935292819020828155600193840185905592909201839055905191925083917fe37d39315e3419c0937360f1ac88f2c52ecf67e3b22b367f82047ddb4591904a9162000cfd9181908690819062001c25565b60405180910390a2505062000d37565b6001600160a01b0381161562000d375760405162461bcd60e51b81526004016200012d9062001bdf565b505060010162000be7565b6000808062000d52858562000df6565b9150915085828260405160200162000d6c9291906200145e565b6040516020818303038152906040528051906020012060405160200162000d959291906200149e565b60408051601f1981840301815291905280516020909101209695505050505050565b600080600062000dd68460a0015162000e8860201b62000c821760201c565b50915091508360c0015162000dec578162000dee565b805b949350505050565b600080826001600160a01b0316846001600160a01b0316141562000e2e5760405162461bcd60e51b81526004016200012d906200169a565b826001600160a01b0316846001600160a01b03161062000e5057828462000e53565b83835b90925090506001600160a01b03821662000e815760405162461bcd60e51b81526004016200012d9062001adf565b9250929050565b6000808062000e966200108b565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b15801562000ed257600080fd5b505afa15801562000ee7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f0d919062001422565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801562000f4957600080fd5b505afa15801562000f5e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f84919062001422565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801562000fc557600080fd5b505afa15801562000fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010009190620013c8565b9250925092508363ffffffff168163ffffffff16146200108157600081850390508063ffffffff166200103f84866200109560201b62000e571760201c565b600001516001600160e01b031602870196508063ffffffff166200106f85856200109560201b62000e571760201c565b516001600160e01b0316029590950194505b5050509193909250565b63ffffffff421690565b6200109f6200114d565b6000826001600160701b031611620010cb5760405162461bcd60e51b81526004016200012d9062001b61565b6040805160208101909152806001600160701b038416600160701b600160e01b03607087901b1681620010fa57fe5b046001600160e01b031681525090505b92915050565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b60408051602081019091526000815290565b80516200110a8162001c9a565b805180151581146200110a57600080fd5b600060e082840312156200118f578081fd5b6200119b60e062001c40565b90508151620011aa8162001c9a565b808252506020820151602082015260408201516040820152606082015160058110620011d557600080fd5b606082015260808281015190820152620011f38360a084016200115f565b60a0820152620012078360c084016200116c565b60c082015292915050565b60006020828403121562001224578081fd5b8151620012318162001c9a565b9392505050565b600080600080600060a0868803121562001250578081fd5b85516200125d8162001c9a565b80955050602080870151620012728162001c9a565b6040880151606089015160808a015192975090955093506001600160401b03808211156200129e578384fd5b818901915089601f830112620012b2578384fd5b815181811115620012c1578485fd5b620012d0848583020162001c40565b818152848101925083850160e0808402860187018e1015620012f0578788fd5b8795505b838610156200132057620013098e836200117d565b8552600195909501949386019390810190620012f4565b505080955050505050509295509295909350565b60006020828403121562001346578081fd5b81516001600160401b03808211156200135d578283fd5b818401915084601f83011262001371578283fd5b81518181111562001380578384fd5b62001395601f8201601f191660200162001c40565b9150808252856020828501011115620013ac578384fd5b620013bf81602084016020860162001c67565b50949350505050565b600080600060608486031215620013dd578283fd5b8351620013ea8162001cb3565b6020850151909350620013fd8162001cb3565b604085015190925063ffffffff8116811462001417578182fd5b809150509250925092565b60006020828403121562001434578081fd5b5051919050565b6000602082840312156200144d578081fd5b815160ff8116811462001231578182fd5b6001600160601b0319606093841b811682529190921b16601482015260280190565b600082516200149481846020870162001c67565b9190910192915050565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6001600160601b031916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b635742544360e01b815260040190565b6208aa8960eb1b815260030190565b6242544360e81b815260030190565b60208082526033908201527f496e76616c696420746f6b656e20636f6e66696720707269636520736f75726360408201527f653a206d75737420626520554e49535741502e00000000000000000000000000606082015260800190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b6020808252603190820152600080516020620047748339815191526040820152703a3434b99039bcb6b137b6103430b9b41760791b606082015260800190565b60208082526023908201527f7265706f7274656420707269636573206d757374206861766520616e20616e636040820152623437b960e91b606082015260800190565b60208082526023908201527f546f6b656e20636f6e666967206669786564207072696365206d75737420626560408201526210181760e91b606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526033908201527f496e636f727265637420556e6973776170206d61726b657420666f722045544860408201527f3a206d75737420626520555344432d4554482e00000000000000000000000000606082015260800190565b6020808252604b908201527f496e636f727265637420556e6973776170206d61726b6574207265766572736160408201527f6c20666f72204554483a206d75737420626520555344432d45544820286e6f7460608201526a103932bb32b939b2b2149760a91b608082015260a00190565b6020808252603e908201526000805160206200477483398151915260408201527f7468697320756e6465726c79696e6720746f6b656e20616464726573732e0000606082015260800190565b60208082526022908201527f5745544820556e6973776170206d61726b6574206e6f74206e656365737361726040820152613c9760f11b606082015260800190565b6020808252603d908201527f53796d626f6c206d69736d61746368206265747765656e20746f6b656e20636f60408201527f6e66696720616e642045524332302073796d626f6c206d6574686f642e000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e6973776170206d61726b6574206973206e60408201526a37ba1031b7b93932b1ba1760a91b606082015260800190565b60208082526028908201527f45544820746f6b656e20636f6e666967206261736520756e6974206d7573742060408201526731329018b2989c1760c11b606082015260800190565b60208082526021908201527f496e636f727265637420746f6b656e20636f6e666967206261736520756e69746040820152601760f91b606082015260800190565b60208082526048908201527f63616e41646d696e4f7665727772697465206d7573742062652073657420746f60408201527f2066616c736520666f722073656375726520556e69737761705669657720636f606082015267373a3930b1ba399760c11b608082015260a00190565b6020808252603a908201527f496e76616c6964205745544820746f6b656e20636f6e6669672070726963652060408201527f736f757263653a206d7573742062652046495845445f4554482e000000000000606082015260800190565b6020808252602b908201527f546f6b656e20636f6e66696720556e697377617020726576657273616c20697360408201526a1034b731b7b93932b1ba1760a91b606082015260800190565b6020808252603a908201527f556e6465726c79696e6720746f6b656e2061646472657373206d75737420626560408201527f20746865207a65726f206164647265737320666f72204554482e000000000000606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252602b908201527f5745544820746f6b656e20636f6e666967206669786564207072696365206d7560408201526a39ba1031329018b2989c1760a91b606082015260800190565b60208082526017908201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604082015260600190565b60208082526027908201527f45544820746f6b656e20636f6e666967206669786564207072696365206d75736040820152663a10313290181760c91b606082015260800190565b60208082526026908201527f6f6e6c79207265706f7274656420707269636573207574696c697a6520616e2060408201526530b731b437b960d11b606082015260800190565b93845260208401929092526040830152606082015260800190565b6040518181016001600160401b038111828210171562001c5f57600080fd5b604052919050565b60005b8381101562001c8457818101518382015260200162001c6a565b8381111562001c94576000848401525b50505050565b6001600160a01b038116811462001cb057600080fd5b50565b6001600160701b038116811462001cb057600080fd5b60805160601c60a05160601c60c05160e05161010051612a4262001d326000398061094152508061089e5280611be15250806104665280611bb65250806103e452806107885280610818528061154852508061091d52806109a852806115195250612a426000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80638a0038881161010f578063e073a241116100a2578063ecc1e98411610071578063ecc1e984146103a1578063f851a440146103b4578063fc57d4df146103bc578063fe2c6198146103cf576101e5565b8063e073a24114610376578063e61a5fe41461037e578063e9206d7814610386578063eaa1c2ca1461038e576101e5565b806392b84357116100de57806392b84357146103485780639f59963114610350578063c65ccb4214610363578063d1b353b4146102ff576101e5565b80638a003888146103075780638aba91b41461031a5780638e499bcf1461032d5780638f28397014610335576101e5565b8063300de3ca1161018757806360846bc61161015657806360846bc6146102dc578063651ed788146102ef578063656b0fd1146102f757806369aa3ac6146102ff576101e5565b8063300de3ca1461028d57806337c0e12d14610295578063482a6193146102b65780634da21942146102c9576101e5565b806324105209116101c3578063241052091461023d578063276c2cba1461025257806329da32fb146102655780632d1c668f14610278576101e5565b8063010ec441146101ea5780631a1252041461020857806322798faf14610228575b600080fd5b6101f26103e2565b6040516101ff91906122df565b60405180910390f35b61021b610216366004611f6c565b610406565b6040516101ff919061285e565b61023061045b565b6040516101ff9190612317565b610245610464565b6040516101ff91906128c6565b61021b610260366004612021565b610488565b610245610273366004611f6c565b6104c5565b61028b610286366004611eb3565b6104d7565b005b610230610516565b6102a86102a3366004611f6c565b61051b565b6040516101ff9291906128cf565b6101f26102c4366004611fc1565b610534565b61021b6102d7366004611de6565b6105e1565b6102456102ea366004611f6c565b6105f4565b610230610606565b61023061060f565b61024561061f565b61021b610315366004611f6c565b61062b565b61028b610328366004611fc1565b610704565b61024561084a565b61028b610343366004611de6565b610850565b61024561089c565b61021b61035e366004611de6565b6108c0565b61028b6103713660046120d4565b6108d3565b610245610915565b6101f261091b565b61024561093f565b6102a861039c366004611f6c565b610963565b61028b6103af366004611e1e565b61097c565b6101f2610b16565b6102456103ca366004611de6565b610b25565b6102456103dd366004612021565b610bed565b7f000000000000000000000000000000000000000000000000000000000000000081565b61040e611c15565b600061041983610ed2565b905060001981146104355761042d8161062b565b915050610456565b60405162461bcd60e51b815260040161044d90612545565b60405180910390fd5b919050565b600b5460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b610490611c15565b6104bf826040516020016104a4919061221b565b60405160208183030381529060405280519060200120610406565b92915050565b600c6020526000908152604090205481565b6003546001600160a01b031633146105015760405162461bcd60e51b815260040161044d906125ba565b61050a81610f1f565b610513816111dd565b50565b600181565b6007602052600090815260409020805460019091015482565b6000806000808480602001905181019061054e9190611f84565b9250925092506000868051906020012060405160200161056e9190612237565b604051602081830303815290604052805190602001209050600181838686604051600081526020016040526040516105a99493929190612322565b6020604051602081039080840390855afa1580156105cb573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b6105e9611c15565b600061041983611326565b60056020526000908152604090205481565b60065460ff1681565b600354600160a01b900460ff1681565b670de0b6b3a764000081565b610633611c15565b61063b61084a565b82106106595760405162461bcd60e51b815260040161044d90612545565b6000828154811061066657fe5b60009182526020918290206040805160e081018252600690930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154909190606083019060ff1660048111156106c057fe5b60048111156106cb57fe5b8152600482015460208201526005909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b60608280602001905181019061071a9190612085565b50905060405160200161072c90612268565b6040516020818303038152906040528051906020012081604051602001610753919061221b565b60405160208183030381529060405280519060200120146107865760405162461bcd60e51b815260040161044d90612732565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107ba8484610534565b6001600160a01b0316146107e05760405162461bcd60e51b815260040161044d906125f1565b6006805460ff191660011790556040517f98a13f7b181a3a1f99c871e7a3507d4a037d386d157279f978e0d555ae9fe74d9061083d907f0000000000000000000000000000000000000000000000000000000000000000906122df565b60405180910390a1505050565b60005490565b6003546001600160a01b0316331461087a5760405162461bcd60e51b815260040161044d906125ba565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6108c8611c15565b60006104198361136a565b80600c6000846040516020016108e9919061221b565b604051602081830303815290604052805190602001208152602001908152602001600020819055505050565b60045481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6008602052600090815260409020805460019091015482565b84831461099b5760405162461bcd60e51b815260040161044d9061279e565b60005b85811015610a8f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338636e9a8888848181106109e157fe5b90506020028101906109f391906128f8565b8888868181106109ff57fe5b9050602002810190610a1191906128f8565b6040518563ffffffff1660e01b8152600401610a309493929190612340565b600060405180830381600087803b158015610a4a57600080fd5b505af1158015610a5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a869190810190612053565b5060010161099e565b506000610a9a611462565b905060005b82811015610b0c57610b04848483818110610ab657fe5b9050602002810190610ac891906128f8565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692506114a8915050565b600101610a9f565b5050505050505050565b6003546001600160a01b031681565b6000816001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b6057600080fd5b505afa158015610b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b989190611f50565b15610bac5750670de0b6b3a7640000610456565b610bb4611c15565b610bbd836108c0565b90508060400151610bde670de0b6b3a7640000610bd984611714565b611a74565b81610be557fe5b049392505050565b6000610bf7611c15565b610c0083610488565b9050610c0b81611714565b9392505050565b6000806000610c218585611aae565b91509150858282604051602001610c399291906121f4565b60405160208183030381529060405280519060200120604051602001610c6092919061227a565b60408051601f1981840301815291905280516020909101209695505050505050565b6000806000610c8f611b38565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610cca57600080fd5b505afa158015610cde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d02919061215f565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3d57600080fd5b505afa158015610d51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d75919061215f565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610db557600080fd5b505afa158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded9190612116565b9250925092508363ffffffff168163ffffffff1614610e4d5780840363ffffffff8116610e1a8486610e57565b516001600160e01b031602969096019563ffffffff8116610e3b8585610e57565b516001600160e01b0316029590950194505b5050509193909250565b610e5f611c52565b6000826001600160701b031611610e885760405162461bcd60e51b815260040161044d906127e1565b6040805160208101909152806001600160701b0384166dffffffffffffffffffffffffffff60701b607087901b1681610ebd57fe5b046001600160e01b0316815250905092915050565b6000805b600054811015610f155760008181548110610eed57fe5b906000526020600020906006020160010154831415610f0d579050610456565b600101610ed6565b5060001992915050565b60005b81518110156111d957600354600160a01b900460ff16610fdf5760026000838381518110610f4c57fe5b602090810291909101810151516001600160a01b031682528101919091526040016000205460ff1615610f915760405162461bcd60e51b815260040161044d90612641565b600a6000838381518110610fa157fe5b60209081029190910181015181015182528101919091526040016000205460ff1615610fdf5760405162461bcd60e51b815260040161044d90612429565b6000828281518110610fed57fe5b602090810291909101810151825460018082018555600094855293839020825160069092020180546001600160a01b0319166001600160a01b03909216919091178155918101518284015560408101516002830155606081015160038301805492949192909160ff199091169083600481111561106657fe5b02179055506080820151600482015560a08201516005909101805460c0909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b0319909416939093179190911691909117905560008054835160001991909101916001918590859081106110d757fe5b6020026020010151600001516001600160a01b03166001600160a01b031681526020019081526020016000208190555060016002600084848151811061111957fe5b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600080549050036009600084848151811061117557fe5b6020026020010151602001518152602001908152602001600020819055506001600a60008484815181106111a557fe5b6020908102919091018101518101518252810191909152604001600020805460ff1916911515919091179055600101610f22565b5050565b60005b81518110156111d9576111f1611c15565b8282815181106111fd57fe5b60200260200101519050600081604001511161122b5760405162461bcd60e51b815260040161044d906123e7565b60a081015160028260600151600481111561124257fe5b14156112f5576001600160a01b03811661126e5760405162461bcd60e51b815260040161044d906124cb565b6020820151600061127e84611b42565b600083815260076020908152604080832042808255600890935292819020828155600193840185905592909201839055905191925083917fe37d39315e3419c0937360f1ac88f2c52ecf67e3b22b367f82047ddb4591904a916112e6918190869081906128dd565b60405180910390a2505061131c565b6001600160a01b0381161561131c5760405162461bcd60e51b815260040161044d90612818565b50506001016111e0565b6001600160a01b03811660009081526002602052604081205460ff1661134e576000196104bf565b506001600160a01b031660009081526001602052604090205490565b60006104bf826001600160a01b031663ac784ddc6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113a857600080fd5b505afa1580156113bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e09190611f50565b61145a57826001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561141d57600080fd5b505afa158015611431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114559190611e02565b61145d565b60005b611326565b60006114a36040518060400160405280600381526020016208aa8960eb1b8152506114956040516020016104a4906122d0565b670de0b6b3a7640000611b72565b905090565b6114b0611c15565b6114b983610488565b90506002816060015160048111156114cd57fe5b146114ea5760405162461bcd60e51b815260040161044d906126fb565b6000836040516020016114fd919061221b565b60405160208183030381529060405280519060200120905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166376977a3a7f0000000000000000000000000000000000000000000000000000000000000000876040518363ffffffff1660e01b81526004016115859291906122f3565b60206040518083038186803b15801561159d57600080fd5b505afa1580156115b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d59190612177565b6001600160401b0316905060006040516020016115f1906122d0565b60405160208183030381529060405280519060200120831415611615575083611623565b611620868587611b72565b90505b60065460ff161561167e5760008381526005602052604090819020829055517f159e83f4712ba2552e68be9d848e49bf6dd35c24f19564ffd523b6549450a2f4906116719088908490612372565b60405180910390a161170c565b6116888282611b8d565b156116d05760008381526005602052604090819020839055517f159e83f4712ba2552e68be9d848e49bf6dd35c24f19564ffd523b6549450a2f4906116719088908590612372565b7f90756d4c8646a4591078abac0e4e32dfa8437921729e36d51b88b659d265bfde86838360405161170393929190612394565b60405180910390a15b505050505050565b6000604051602001611725906122d0565b60405160208183030381529060405280519060200120826020015114156117555750670de0b6b3a7640000610456565b60028260600151600481111561176757fe5b141561191257600060056000604051602001611782906122d0565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116117c95760405162461bcd60e51b815260040161044d9061247a565b60006002600860006040516020016117e0906122d0565b604051602081830303815290604052805190602001208152602001908152602001600020600001546007600060405160200161181b906122d0565b60405160208183030381529060405280519060200120815260200190815260200160002060000154018161184b57fe5b0490506000600454111561187d57600454810142111561187d5760405162461bcd60e51b815260040161044d9061269e565b60208085018051600090815260088352604080822054925182526007909352919091205460029101049050600060045411156118d75760045481014211156118d75760405162461bcd60e51b815260040161044d906123b9565b81611901600560008760200151815260200190815260200160002054670de0b6b3a7640000611a74565b8161190857fe5b0492505050610456565b60018260600151600481111561192457fe5b1415611a515760006005600060405160200161193f906122d0565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116119865760405162461bcd60e51b815260040161044d9061247a565b600060026008600060405160200161199d906122d0565b60405160208183030381529060405280519060200120815260200190815260200160002060000154600760006040516020016119d8906122d0565b604051602081830303815290604052805190602001208152602001908152602001600020600001540181611a0857fe5b04905060006004541115611a3a576004548101421115611a3a5760405162461bcd60e51b815260040161044d9061269e565b816119018560800151670de0b6b3a7640000611a74565b600082606001516004811115611a6357fe5b141561045657506080810151610456565b600082611a83575060006104bf565b82820282848281611a9057fe5b0414610c0b5760405162461bcd60e51b815260040161044d9061250e565b600080826001600160a01b0316846001600160a01b03161415611ae35760405162461bcd60e51b815260040161044d90612575565b826001600160a01b0316846001600160a01b031610611b03578284611b06565b83835b90925090506001600160a01b038216611b315760405162461bcd60e51b815260040161044d90612767565b9250929050565b63ffffffff421690565b6000806000611b548460a00151610c82565b50915091508360c00151611b685781611b6a565b805b949350505050565b506020908101516000908152600c9091526040902054919050565b60008215611c0c57600083611baa84670de0b6b3a7640000611a74565b81611bb157fe5b0490507f00000000000000000000000000000000000000000000000000000000000000008111158015611c0457507f00000000000000000000000000000000000000000000000000000000000000008110155b9150506104bf565b50600092915050565b6040805160e08101825260008082526020820181905291810182905290606082019081526000602082018190526040820181905260609091015290565b60408051602081019091526000815290565b80356104bf816129d4565b60008083601f840112611c80578182fd5b5081356001600160401b03811115611c96578182fd5b6020830191508360208083028501011115611b3157600080fd5b80356104bf816129e9565b600082601f830112611ccb578081fd5b8135611cde611cd982612981565b61293c565b9150808252836020828501011115611cf557600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112611d1e578081fd5b8151611d2c611cd982612981565b9150808252836020828501011115611d4357600080fd5b611d548160208401602086016129a4565b5092915050565b600060e08284031215611d6c578081fd5b611d7660e061293c565b90508135611d83816129d4565b808252506020820135602082015260408201356040820152606082013560058110611dad57600080fd5b606082015260808281013590820152611dc98360a08401611c64565b60a0820152611ddb8360c08401611cb0565b60c082015292915050565b600060208284031215611df7578081fd5b8135610c0b816129d4565b600060208284031215611e13578081fd5b8151610c0b816129d4565b60008060008060008060608789031215611e36578182fd5b86356001600160401b0380821115611e4c578384fd5b611e588a838b01611c6f565b90985096506020890135915080821115611e70578384fd5b611e7c8a838b01611c6f565b90965094506040890135915080821115611e94578384fd5b50611ea189828a01611c6f565b979a9699509497509295939492505050565b60006020808385031215611ec5578182fd5b82356001600160401b03811115611eda578283fd5b8301601f81018513611eea578283fd5b8035611ef8611cd982612962565b8181528381019083850160e0808502860187018a1015611f16578788fd5b8795505b84861015611f4257611f2c8a83611d5b565b8452600195909501949286019290810190611f1a565b509098975050505050505050565b600060208284031215611f61578081fd5b8151610c0b816129e9565b600060208284031215611f7d578081fd5b5035919050565b600080600060608486031215611f98578081fd5b8351925060208401519150604084015160ff81168114611fb6578182fd5b809150509250925092565b60008060408385031215611fd3578182fd5b82356001600160401b0380821115611fe9578384fd5b611ff586838701611cbb565b9350602085013591508082111561200a578283fd5b5061201785828601611cbb565b9150509250929050565b600060208284031215612032578081fd5b81356001600160401b03811115612047578182fd5b611b6a84828501611cbb565b600060208284031215612064578081fd5b81516001600160401b03811115612079578182fd5b611b6a84828501611d0e565b60008060408385031215612097578182fd5b82516001600160401b038111156120ac578283fd5b6120b885828601611d0e565b92505060208301516120c9816129d4565b809150509250929050565b600080604083850312156120e6578182fd5b82356001600160401b038111156120fb578283fd5b61210785828601611cbb565b95602094909401359450505050565b60008060006060848603121561212a578081fd5b8351612135816129f7565b6020850151909350612146816129f7565b604085015190925063ffffffff81168114611fb6578182fd5b600060208284031215612170578081fd5b5051919050565b600060208284031215612188578081fd5b81516001600160401b0381168114610c0b578182fd5b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526121e08160208601602086016129a4565b601f01601f19169290920160200192915050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b6000825161222d8184602087016129a4565b9190910192915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b65726f7461746560d01b815260060190565b6001600160f81b0319815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6208aa8960eb1b815260030190565b6001600160a01b0391909116815260200190565b6001600160a01b0383168152604060208201819052600090611b6a908301846121c8565b901515815260200190565b93845260ff9290921660208401526040830152606082015260800190565b60006040825261235460408301868861219e565b828103602084015261236781858761219e565b979650505050505050565b60006040825261238560408301856121c8565b90508260208301529392505050565b6000606082526123a760608301866121c8565b60208301949094525060400152919050565b6020808252601490820152732a2ba0a810383934b1b29034b99039ba30b6329760611b604082015260600190565b60208082526022908201527f62617365556e6974206d7573742062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60208082526031908201527f546f6b656e20636f6e66696720616c72656164792065786973747320666f72206040820152703a3434b99039bcb6b137b6103430b9b41760791b606082015260800190565b60208082526031908201527f455448207072696365206e6f74207365742c2063616e6e6f7420636f6e7665726040820152700e840cce4deda40aaa68840e8de408aa89607b1b606082015260800190565b60208082526023908201527f7265706f7274656420707269636573206d757374206861766520616e20616e636040820152623437b960e91b606082015260800190565b60208082526017908201527f6d756c7469706c69636174696f6e206f766572666c6f77000000000000000000604082015260600190565b6020808252601690820152751d1bdad95b8818dbdb999a59c81b9bdd08199bdd5b9960521b604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526017908201527f6d73672e73656e646572206973206e6f742061646d696e000000000000000000604082015260600190565b60208082526030908201527f696e76616c69646174696f6e206d657373616765206d75737420636f6d65206660408201526f3937b6903a3432903932b837b93a32b960811b606082015260800190565b6020808252603e908201527f546f6b656e20636f6e66696720616c72656164792065786973747320666f722060408201527f7468697320756e6465726c79696e6720746f6b656e20616464726573732e0000606082015260800190565b60208082526038908201527f4554482054574150207072696365206973207374616c653b2063616e6e6f742060408201527f636f6e766572742066726f6d2055534420746f204554482e0000000000000000606082015260800190565b6020808252601f908201527f6f6e6c79207265706f72746572207072696365732067657420706f7374656400604082015260600190565b6020808252818101527f696e76616c6964206d657373616765206d7573742062652027726f7461746527604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b60208082526023908201527f6d6573736167657320616e64207369676e617475726573206d75737420626520604082015262313a3160e81b606082015260800190565b60208082526017908201527f4669786564506f696e743a204449565f42595f5a45524f000000000000000000604082015260600190565b60208082526026908201527f6f6e6c79207265706f7274656420707269636573207574696c697a6520616e2060408201526530b731b437b960d11b606082015260800190565b81516001600160a01b0390811682526020808401519083015260408084015190830152606083015160e0830191906005811061289657fe5b80606085015250608084015160808401528060a08501511660a08401525060c0830151151560c083015292915050565b90815260200190565b918252602082015260400190565b93845260208401929092526040830152606082015260800190565b6000808335601e1984360301811261290e578283fd5b8301803591506001600160401b03821115612927578283fd5b602001915036819003821315611b3157600080fd5b6040518181016001600160401b038111828210171561295a57600080fd5b604052919050565b60006001600160401b03821115612977578081fd5b5060209081020190565b60006001600160401b03821115612996578081fd5b50601f01601f191660200190565b60005b838110156129bf5781810151838201526020016129a7565b838111156129ce576000848401525b50505050565b6001600160a01b038116811461051357600080fd5b801515811461051357600080fd5b6001600160701b038116811461051357600080fdfea2646970667358221220c733db6d75f16c244def03fed8917cb39af78a61f3ffb6305e691b7ded2720c164736f6c634300060c0033546f6b656e20636f6e66696720616c72656164792065786973747320666f7220",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_ANCHORED_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"anchorPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSecure\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAnchorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"params\":{\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbol(string)\":{\"params\":{\"symbol\":\"The symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigBySymbolHash(bytes32)\":{\"params\":{\"symbolHash\":\"The keccack256 of the symbol of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals, for the given cToken address\"}},\"invalidateReporter(bytes,bytes)\":{\"details\":\"Only the reporter may sign a message which allows it to invalidate itself.  To be used in cases of emergency, if the reporter thinks their key may be compromised.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"}},\"postPrices(bytes[],bytes[],string[])\":{\"details\":\"We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\",\"params\":{\"messages\":\"The messages to post to the oracle\",\"signatures\":\"The signatures for the corresponding messages\",\"symbols\":\"The symbols to compare to anchor for authoritative reading\"}},\"price(string)\":{\"params\":{\"symbol\":\"The symbol to fetch the price of\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AnchorPriceUpdated(string,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when anchor price is updated\"},\"PriceGuarded(string,uint256,uint256)\":{\"notice\":\"The event emitted when new prices are posted but the stored price is not updated due to the anchor\"},\"PriceUpdated(string,uint256)\":{\"notice\":\"The event emitted when the stored price is updated\"},\"ReporterInvalidated(address)\":{\"notice\":\"The event emitted when reporter invalidates itself\"},\"UniswapWindowUpdated(bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when the uniswap window changes\"}},\"kind\":\"user\",\"methods\":{\"IS_UNISWAP_ANCHORED_VIEW()\":{\"notice\":\"Constant indicating that this contract is a UniswapAnchoredView\"},\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"notice\":\"Add new asset(s)\"},\"admin()\":{\"notice\":\"Admin address\"},\"anchorPeriod()\":{\"notice\":\"The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\"},\"canAdminOverwrite()\":{\"notice\":\"Whether or not existing token configs can be overwritten\"},\"changeAdmin(address)\":{\"notice\":\"Changes the admin\"},\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigBySymbol(string)\":{\"notice\":\"Get the config for symbol\"},\"getTokenConfigBySymbolHash(bytes32)\":{\"notice\":\"Get the config for the symbolHash\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"invalidateReporter(bytes,bytes)\":{\"notice\":\"Invalidate the reporter, and fall back to using anchor directly in all cases\"},\"lowerBoundAnchorRatio()\":{\"notice\":\"The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\"},\"maxSecondsBeforePriceIsStale()\":{\"notice\":\"The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\"},\"newObservations(bytes32)\":{\"notice\":\"The new observation for each symbolHash\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"oldObservations(bytes32)\":{\"notice\":\"The old observation for each symbolHash\"},\"postPrices(bytes[],bytes[],string[])\":{\"notice\":\"Post open oracle reporter prices, and recalculate stored price by comparing to anchor\"},\"price(string)\":{\"notice\":\"Get the official price for a symbol\"},\"priceData()\":{\"notice\":\"The Open Oracle Price Data contract\"},\"prices(bytes32)\":{\"notice\":\"Official prices by symbol hash\"},\"reporter()\":{\"notice\":\"The Open Oracle Reporter\"},\"reporterInvalidated()\":{\"notice\":\"Circuit breaker for using anchor price oracle directly, ignoring reporter\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"},\"upperBoundAnchorRatio()\":{\"notice\":\"The highest ratio of the new price to the anchor price that will still trigger the price to be updated\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/MockUniswapAnchoredView.sol\":\"MockUniswapAnchoredView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        (address source, uint64 timestamp, string memory key, uint64 value) = decodeMessage(message, signature);\\n        return putInternal(source, timestamp, key, value);\\n    }\\n\\n    function putInternal(address source, uint64 timestamp, string memory key, uint64 value) internal returns (string memory) {\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n        return key;\\n    }\\n\\n    function decodeMessage(bytes calldata message, bytes calldata signature) internal pure returns (address, uint64, string memory, uint64) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n        return (source, timestamp, key, value);\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x16fa7df6cfce0bad70407ef8000b09d8468777a3453f30425ea553117abef4c6\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../OpenOraclePriceData.sol\\\";\\r\\nimport \\\"./UniswapConfig.sol\\\";\\r\\nimport \\\"./UniswapLib.sol\\\";\\r\\n\\r\\nstruct Observation {\\r\\n    uint timestamp;\\r\\n    uint acc;\\r\\n}\\r\\n\\r\\ncontract UniswapAnchoredView is UniswapConfig {\\r\\n    using FixedPoint for *;\\r\\n    \\r\\n    /// @notice Constant indicating that this contract is a UniswapAnchoredView\\r\\n    bool public constant IS_UNISWAP_ANCHORED_VIEW = true;\\r\\n\\r\\n    /// @notice The Open Oracle Price Data contract\\r\\n    OpenOraclePriceData public immutable priceData;\\r\\n\\r\\n    /// @notice The number of wei in 1 ETH\\r\\n    uint public constant ethBaseUnit = 1e18;\\r\\n\\r\\n    /// @notice A common scaling factor to maintain precision\\r\\n    uint public constant expScale = 1e18;\\r\\n\\r\\n    /// @notice The Open Oracle Reporter\\r\\n    address public immutable reporter;\\r\\n\\r\\n    /// @notice The highest ratio of the new price to the anchor price that will still trigger the price to be updated\\r\\n    uint public immutable upperBoundAnchorRatio;\\r\\n\\r\\n    /// @notice The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\\r\\n    uint public immutable lowerBoundAnchorRatio;\\r\\n\\r\\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\\r\\n    uint public immutable anchorPeriod;\\r\\n\\r\\n    /// @notice Official prices by symbol hash\\r\\n    mapping(bytes32 => uint) public prices;\\r\\n\\r\\n    /// @notice Circuit breaker for using anchor price oracle directly, ignoring reporter\\r\\n    bool public reporterInvalidated;\\r\\n\\r\\n    /// @notice The old observation for each symbolHash\\r\\n    mapping(bytes32 => Observation) public oldObservations;\\r\\n\\r\\n    /// @notice The new observation for each symbolHash\\r\\n    mapping(bytes32 => Observation) public newObservations;\\r\\n\\r\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\r\\n    event PriceGuarded(string symbol, uint reporter, uint anchor);\\r\\n\\r\\n    /// @notice The event emitted when the stored price is updated\\r\\n    event PriceUpdated(string symbol, uint price);\\r\\n\\r\\n    /// @notice The event emitted when anchor price is updated\\r\\n    event AnchorPriceUpdated(string symbol, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\\r\\n\\r\\n    /// @notice The event emitted when the uniswap window changes\\r\\n    event UniswapWindowUpdated(bytes32 indexed symbolHash, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\r\\n\\r\\n    /// @notice The event emitted when reporter invalidates itself\\r\\n    event ReporterInvalidated(address reporter);\\r\\n\\r\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\r\\n    bytes32 constant btcSymbolHash = keccak256(abi.encodePacked(\\\"BTC\\\"));\\r\\n    bytes32 constant wbtcSymbolHash = keccak256(abi.encodePacked(\\\"WBTC\\\"));\\r\\n    bytes32 constant rotateHash = keccak256(abi.encodePacked(\\\"rotate\\\"));\\r\\n\\r\\n    /// @dev Maps symbol hashes to token config indexes\\r\\n    mapping(bytes32 => uint256) internal _configIndexesBySymbolHash;\\r\\n\\r\\n    /// @dev Maps symbol hashes to booleans indicating if they have token configs\\r\\n    mapping(bytes32 => bool) internal _configPresenceBySymbolHash;\\r\\n\\r\\n    /// @dev Boolean indicating if Uniswap anchors are verified\\r\\n    bool public isSecure;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\r\\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\\r\\n     * @param priceData_ The OpenOraclePriceData contract to use\\r\\n     * @param reporter_ The reporter whose prices are to be used\\r\\n     * @param anchorToleranceMantissa_ The percentage tolerance that the reporter may deviate from the uniswap anchor\\r\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     */\\r\\n    constructor(OpenOraclePriceData priceData_,\\r\\n                address reporter_,\\r\\n                uint anchorToleranceMantissa_,\\r\\n                uint anchorPeriod_,\\r\\n                TokenConfig[] memory configs,\\r\\n                bool _canAdminOverwrite,\\r\\n                bool _isSecure,\\r\\n                uint256 _maxSecondsBeforePriceIsStale) UniswapConfig(configs, _canAdminOverwrite, _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        priceData = priceData_;\\r\\n        reporter = reporter_;\\r\\n        anchorPeriod = anchorPeriod_;\\r\\n        isSecure = _isSecure;\\r\\n\\r\\n        // Allow the tolerance to be whatever the deployer chooses, but prevent under/overflow (and prices from being 0)\\r\\n        upperBoundAnchorRatio = anchorToleranceMantissa_ > uint(-1) - 100e16 ? uint(-1) : 100e16 + anchorToleranceMantissa_;\\r\\n        lowerBoundAnchorRatio = anchorToleranceMantissa_ < 100e16 ? 100e16 - anchorToleranceMantissa_ : 1;\\r\\n\\r\\n        // If secure, require !canAdminOverwrite and checkTokenConfigs\\r\\n        if (isSecure) {\\r\\n            require(!canAdminOverwrite, \\\"canAdminOverwrite must be set to false for secure UniswapView contracts.\\\");\\r\\n            checkTokenConfigs(configs);\\r\\n        }\\r\\n\\r\\n        // Initialize token configs\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev UniswapV2Factory contract address.\\r\\n     */\\r\\n    address constant private UNISWAP_V2_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    \\r\\n    /**\\r\\n     * @dev WETH contract address.\\r\\n     */\\r\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies token configs\\r\\n     * @param configs The configs for the supported assets\\r\\n     */\\r\\n    function checkTokenConfigs(TokenConfig[] memory configs) internal view {\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // Check symbolHash for ETH\\r\\n            if (configs[i].symbolHash != ethHash) {\\r\\n                require(configs[i].uniswapMarket == 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc, \\\"Incorrect Uniswap market for ETH: must be USDC-ETH.\\\");\\r\\n                require(!configs[i].isUniswapReversed, \\\"Incorrect Uniswap market reversal for ETH: must be USDC-ETH (not reversed).\\\");\\r\\n                require(configs[i].underlying == address(0), \\\"Underlying token address must be the zero address for ETH.\\\");\\r\\n                require(configs[i].fixedPrice == 0, \\\"ETH token config fixed price must be 0.\\\");\\r\\n                require(configs[i].baseUnit == ethBaseUnit, \\\"ETH token config base unit must be 1e18.\\\");\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            // Check symbolHash against underlying symbol (with exception for WBTC/BTC)\\r\\n            bytes32 realSymbolHash = keccak256(abi.encodePacked(IERC20(configs[i].underlying).symbol()));\\r\\n            require(realSymbolHash == configs[i].symbolHash || (realSymbolHash == wbtcSymbolHash && configs[i].symbolHash == btcSymbolHash), \\\"Symbol mismatch between token config and ERC20 symbol method.\\\");\\r\\n\\r\\n            // Check baseUnit against underlying decimals\\r\\n            require(10 ** uint256(IERC20(configs[i].underlying).decimals()) == configs[i].baseUnit, \\\"Incorrect token config base unit.\\\");\\r\\n\\r\\n            // Check for WETH\\r\\n            if (configs[i].underlying == WETH_ADDRESS) {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.FIXED_ETH, \\\"Invalid WETH token config price source: must be FIXED_ETH.\\\");\\r\\n                \\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 1e18, \\\"WETH token config fixed price must be 1e18.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                require(configs[i].uniswapMarket == address(0), \\\"WETH Uniswap market not necessary.\\\");\\r\\n                configs[i].isUniswapReversed = false;\\r\\n            } else {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.UNISWAP, \\\"Invalid token config price source: must be UNISWAP.\\\");\\r\\n\\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 0, \\\"Token config fixed price must be 0.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_V2_FACTORY_ADDRESS, configs[i].underlying, WETH_ADDRESS));\\r\\n                require(configs[i].uniswapMarket == address(pair), \\\"Token config Uniswap market is not correct.\\\");\\r\\n                address token0 = pair.token0();\\r\\n                require((token0 == configs[i].underlying && !configs[i].isUniswapReversed) || (token0 != configs[i].underlying && configs[i].isUniswapReversed), \\\"Token config Uniswap reversal is incorrect.\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize token configs\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function initConfigs(TokenConfig[] memory configs) internal {\\r\\n        for (uint i = 0; i < configs.length; i++) {\\r\\n            TokenConfig memory config = configs[i];\\r\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\r\\n            address uniswapMarket = config.uniswapMarket;\\r\\n            if (config.priceSource == PriceSource.REPORTER) {\\r\\n                require(uniswapMarket != address(0), \\\"reported prices must have an anchor\\\");\\r\\n                bytes32 symbolHash = config.symbolHash;\\r\\n                uint cumulativePrice = currentCumulativePrice(config);\\r\\n                oldObservations[symbolHash].timestamp = block.timestamp;\\r\\n                newObservations[symbolHash].timestamp = block.timestamp;\\r\\n                oldObservations[symbolHash].acc = cumulativePrice;\\r\\n                newObservations[symbolHash].acc = cumulativePrice;\\r\\n                emit UniswapWindowUpdated(symbolHash, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\\r\\n            } else {\\r\\n                require(uniswapMarket == address(0), \\\"only reported prices utilize an anchor\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal override {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing configs\\r\\n            if (!canAdminOverwrite) {\\r\\n                require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n                require(!_configPresenceBySymbolHash[configs[i].symbolHash], \\\"Token config already exists for this symbol hash.\\\");\\r\\n            }\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n            _configIndexesBySymbolHash[configs[i].symbolHash] = _configs.length - 1;\\r\\n            _configPresenceBySymbolHash[configs[i].symbolHash] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function add(TokenConfig[] memory configs) external {\\r\\n        // Check msg.sender == admin\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n\\r\\n        // Add and init token configs\\r\\n        _add(configs);\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the official price for a symbol\\r\\n     * @param symbol The symbol to fetch the price of\\r\\n     * @return Price denominated in ETH, with 18 decimals\\r\\n     */\\r\\n    function price(string memory symbol) external view returns (uint) {\\r\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\r\\n        return priceInternal(config);\\r\\n    }\\r\\n\\r\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\r\\n        if (config.symbolHash == ethHash) return ethBaseUnit;\\r\\n        if (config.priceSource == PriceSource.REPORTER) {\\r\\n            // Prices are stored in terms of USD so we use the ETH/USD price to convert to ETH\\r\\n            uint usdPerEth = prices[ethHash];\\r\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\r\\n            uint256 averageObservationTimestamp = (oldObservations[ethHash].timestamp + newObservations[ethHash].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"ETH TWAP price is stale; cannot convert from USD to ETH.\\\");\\r\\n            averageObservationTimestamp = (oldObservations[config.symbolHash].timestamp + newObservations[config.symbolHash].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"TWAP price is stale.\\\");\\r\\n            return mul(prices[config.symbolHash], ethBaseUnit) / usdPerEth; // usdPrice * 1e18 / usdPerEth = ethPrice\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_USD) {\\r\\n            uint usdPerEth = prices[ethHash];\\r\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert from USD to ETH\\\");\\r\\n            uint256 averageObservationTimestamp = (oldObservations[ethHash].timestamp + newObservations[ethHash].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"ETH TWAP price is stale; cannot convert from USD to ETH.\\\");\\r\\n            return mul(config.fixedPrice, ethBaseUnit) / usdPerEth; // usdPrice * 1e18 / usdPerEth = ethPrice\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_ETH) return config.fixedPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying price of a cToken\\r\\n     * @dev Implements the PriceOracle interface for Compound v2.\\r\\n     * @param cToken The cToken address for price retrieval\\r\\n     * @return Price denominated in ETH, with 18 decimals, for the given cToken address\\r\\n     */\\r\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\r\\n        if (CToken(cToken).isCEther()) return ethBaseUnit;\\r\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\r\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\r\\n         // Since the prices in this view have 18 decimals, we must scale them by 1e(36 - 18 - baseUnit)\\r\\n        return mul(1e18, priceInternal(config)) / config.baseUnit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Post open oracle reporter prices, and recalculate stored price by comparing to anchor\\r\\n     * @dev We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\\r\\n     * @param messages The messages to post to the oracle\\r\\n     * @param signatures The signatures for the corresponding messages\\r\\n     * @param symbols The symbols to compare to anchor for authoritative reading\\r\\n     */\\r\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\r\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\r\\n\\r\\n        // Save the prices\\r\\n        for (uint i = 0; i < messages.length; i++) {\\r\\n            priceData.put(messages[i], signatures[i]);\\r\\n        }\\r\\n\\r\\n        uint ethPrice = fetchEthPrice();\\r\\n\\r\\n        // Try to update the view storage\\r\\n        for (uint i = 0; i < symbols.length; i++) {\\r\\n            postPriceInternal(symbols[i], ethPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function postPriceInternal(string memory symbol, uint ethPrice) internal {\\r\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\r\\n        require(config.priceSource == PriceSource.REPORTER, \\\"only reporter prices get posted\\\");\\r\\n\\r\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\r\\n        uint reporterPrice = priceData.getPrice(reporter, symbol);\\r\\n        uint anchorPrice;\\r\\n        if (symbolHash == ethHash) {\\r\\n            anchorPrice = ethPrice;\\r\\n        } else {\\r\\n            anchorPrice = fetchAnchorPrice(symbol, config, ethPrice);\\r\\n        }\\r\\n\\r\\n        if (reporterInvalidated) {\\r\\n            prices[symbolHash] = anchorPrice;\\r\\n            emit PriceUpdated(symbol, anchorPrice);\\r\\n        } else if (isWithinAnchor(reporterPrice, anchorPrice)) {\\r\\n            prices[symbolHash] = reporterPrice;\\r\\n            emit PriceUpdated(symbol, reporterPrice);\\r\\n        } else {\\r\\n            emit PriceGuarded(symbol, reporterPrice, anchorPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWithinAnchor(uint reporterPrice, uint anchorPrice) internal view returns (bool) {\\r\\n        if (reporterPrice > 0) {\\r\\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\\r\\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/ETH price accumulator from Uniswap.\\r\\n     */\\r\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\r\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\r\\n        return config.isUniswapReversed ? cumulativePrice1 : cumulativePrice0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\\r\\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\\r\\n     */\\r\\n    function fetchEthPrice() internal returns (uint) {\\r\\n        return fetchAnchorPrice(\\\"ETH\\\", getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\\r\\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\\r\\n     */\\r\\n    function fetchAnchorPrice(string memory symbol, TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\\r\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\r\\n\\r\\n        // This should be impossible, but better safe than sorry\\r\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\r\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\r\\n\\r\\n        // Calculate uniswap time-weighted average price\\r\\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\\r\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\r\\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\\r\\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\\r\\n        uint anchorPrice;\\r\\n\\r\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\r\\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\\r\\n\\r\\n        // In the case of non-ETH tokens\\r\\n        // a. pokeWindowValues already handled uniswap reversed cases, so priceAverage will always be Token/ETH TWAP price.\\r\\n        // b. conversionFactor = ETH price * 1e6\\r\\n        // unscaledPriceMantissa = priceAverage(token/ETH TWAP price) * expScale * conversionFactor\\r\\n        // so ->\\r\\n        // anchorPrice = priceAverage * tokenBaseUnit / ethBaseUnit * ETH_price * 1e6\\r\\n        //             = priceAverage * conversionFactor * tokenBaseUnit / ethBaseUnit\\r\\n        //             = unscaledPriceMantissa / expScale * tokenBaseUnit / ethBaseUnit\\r\\n        anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\r\\n\\r\\n        emit AnchorPriceUpdated(symbol, anchorPrice, oldTimestamp, block.timestamp);\\r\\n\\r\\n        return anchorPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\r\\n     *  Update new and old observations of lagging window if period elapsed.\\r\\n     */\\r\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\r\\n        bytes32 symbolHash = config.symbolHash;\\r\\n        uint cumulativePrice = currentCumulativePrice(config);\\r\\n\\r\\n        Observation memory newObservation = newObservations[symbolHash];\\r\\n\\r\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\r\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\r\\n        if (timeElapsed >= anchorPeriod) {\\r\\n            oldObservations[symbolHash].timestamp = newObservation.timestamp;\\r\\n            oldObservations[symbolHash].acc = newObservation.acc;\\r\\n\\r\\n            newObservations[symbolHash].timestamp = block.timestamp;\\r\\n            newObservations[symbolHash].acc = cumulativePrice;\\r\\n            emit UniswapWindowUpdated(config.symbolHash, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\r\\n        }\\r\\n        return (cumulativePrice, oldObservations[symbolHash].acc, oldObservations[symbolHash].timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Invalidate the reporter, and fall back to using anchor directly in all cases\\r\\n     * @dev Only the reporter may sign a message which allows it to invalidate itself.\\r\\n     *  To be used in cases of emergency, if the reporter thinks their key may be compromised.\\r\\n     * @param message The data that was presumably signed\\r\\n     * @param signature The fingerprint of the data + private key\\r\\n     */\\r\\n    function invalidateReporter(bytes memory message, bytes memory signature) external {\\r\\n        (string memory decodedMessage, ) = abi.decode(message, (string, address));\\r\\n        require(keccak256(abi.encodePacked(decodedMessage)) == rotateHash, \\\"invalid message must be 'rotate'\\\");\\r\\n        require(source(message, signature) == reporter, \\\"invalidation message must come from the reporter\\\");\\r\\n        reporterInvalidated = true;\\r\\n        emit ReporterInvalidated(reporter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Recovers the source address which signed a message\\r\\n     * @dev Comparing to a claimed address would add nothing,\\r\\n     *  as the caller could simply perform the recover and claim that address.\\r\\n     * @param message The data that was presumably signed\\r\\n     * @param signature The fingerprint of the data + private key\\r\\n     * @return The source address which signed the message, presumably\\r\\n     */\\r\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\r\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\r\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\r\\n        return ecrecover(hash, v, r, s);\\r\\n    }\\r\\n\\r\\n    /// @dev Overflow proof multiplication\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a == 0) return 0;\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, \\\"multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\r\\n        for (uint256 i = 0; i < _configs.length; i++) if (symbolHash == _configs[i].symbolHash) return i;\\r\\n        return uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for symbol\\r\\n     * @param symbol The symbol of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\r\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the symbolHash\\r\\n     * @param symbolHash The keccack256 of the symbol of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\r\\n        uint index = getSymbolHashIndex(symbolHash);\\r\\n        if (index != uint(-1)) {\\r\\n            return getTokenConfig(index);\\r\\n        }\\r\\n\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1e96e02f98730dcbf4ab0310d787340e7a17ff138d807ef2db0c24881f5e9246\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface CToken {\\r\\n    function isCEther() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface CErc20 {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract UniswapConfig {\\r\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\r\\n    enum PriceSource {\\r\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\r\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\r\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\r\\n        TWAP,      /// implies the price is set by TWAPs (only available on UniswapView)\\r\\n        UNISWAP    /// implies the price is set by the direct Uniswap price (only available on UniswapDirectView)\\r\\n    }\\r\\n\\r\\n    /// @dev Describe how the USD price should be determined for an asset.\\r\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\r\\n    struct TokenConfig {\\r\\n        address underlying;\\r\\n        bytes32 symbolHash;\\r\\n        uint256 baseUnit;\\r\\n        PriceSource priceSource;\\r\\n        uint256 fixedPrice;\\r\\n        address uniswapMarket;\\r\\n        bool isUniswapReversed;\\r\\n    }\\r\\n\\r\\n    /// @dev Token config objects\\r\\n    TokenConfig[] internal _configs;\\r\\n\\r\\n    /// @dev Maps underlying addresses to token config indexes\\r\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\r\\n\\r\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\r\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\r\\n    \\r\\n    /// @notice Admin address\\r\\n    address public admin;\\r\\n    \\r\\n    /// @notice Whether or not existing token configs can be overwritten\\r\\n    bool public canAdminOverwrite;\\r\\n\\r\\n    /// @notice The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n    uint256 public maxSecondsBeforePriceIsStale;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an immutable store of configs into the contract data\\r\\n     * @param configs The configs for the supported assets\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs, bool _canAdminOverwrite, uint256 _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        admin = msg.sender;\\r\\n        canAdminOverwrite = _canAdminOverwrite;\\r\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\r\\n\\r\\n        // Add configs\\r\\n        _add(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal virtual {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing config\\r\\n            if (!canAdminOverwrite) require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the admin\\r\\n    function changeAdmin(address newAdmin) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /// @notice The number of tokens this contract actually supports\\r\\n    function numTokens() public view returns (uint256) {\\r\\n        return _configs.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by cToken address\\r\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\r\\n        return getUnderlyingIndex(CToken(cToken).isCEther() ? address(0) : CErc20(cToken).underlying());\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by underlying ERC20 token address\\r\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\r\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the i-th config, according to the order they were passed in originally\\r\\n     * @param i The index of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\r\\n        require(i < numTokens(), \\\"token config not found\\\");\\r\\n        return _configs[i];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the cToken\\r\\n     * @param cToken The address of the cToken of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\r\\n        uint index = getCTokenIndex(cToken);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for an underlying asset\\r\\n     * @param underlying The address of the underlying asset of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\r\\n        uint index = getUnderlyingIndex(underlying);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb01fcfa0aba555d471ff2b824ac1190b91e3104cf5f5be3341d967a3442f1773\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"},\"tests/contracts/MockUniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../../contracts/Uniswap/UniswapAnchoredView.sol\\\";\\r\\n\\r\\ncontract MockUniswapAnchoredView is UniswapAnchoredView {\\r\\n    mapping(bytes32 => uint) public anchorPrices;\\r\\n\\r\\n    constructor(OpenOraclePriceData priceData_,\\r\\n                address reporter_,\\r\\n                uint anchorToleranceMantissa_,\\r\\n                uint anchorPeriod_,\\r\\n                TokenConfig[] memory configs) UniswapAnchoredView(priceData_, reporter_, anchorToleranceMantissa_, anchorPeriod_, configs, false, false, 0) public {}\\r\\n\\r\\n    function setAnchorPrice(string memory symbol, uint price) external {\\r\\n        anchorPrices[keccak256(abi.encodePacked(symbol))] = price;\\r\\n    }\\r\\n\\r\\n    function fetchAnchorPrice(string memory _symbol, TokenConfig memory config, uint _conversionFactor) internal override returns (uint) {\\r\\n        _symbol; // Shh\\r\\n        _conversionFactor; // Shh\\r\\n        return anchorPrices[config.symbolHash];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe53185563917d13aa011dd0ee3058324ba097b8df50479f6677ca10eec7ab5c0\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/MockUniswapTokenPair.sol:MockUniswapTokenPair": {
      "abi": "[{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reversedMarket\",\"type\":\"bool\"}],\"name\":\"getReservesFraction\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506040516104a33803806104a3833981810160405260a081101561003357600080fd5b508051602082015160408301516060840151608090940151600080546001600160701b0319166001600160701b0395861617600160701b600160e01b031916600160701b9590941694909402929092176001600160e01b0316600160e01b63ffffffff909216919091021782556001929092556002919091556103e79081906100bc90396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635a76f25e1161005b5780635a76f25e1461010b578063642f064e14610113578063c5700a021461014e578063d14393c11461016f57610088565b80630902f1ac1461008d578063443cb4bc146100c55780635909c0d5146100e95780635a3d549314610103575b600080fd5b6100956101b9565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6100cd6101e3565b604080516001600160701b039092168252519081900360200190f35b6100f16101f2565b60408051918252519081900360200190f35b6100f16101f8565b6100cd6101fe565b6101326004803603602081101561012957600080fd5b50351515610214565b604080516001600160e01b039092168252519081900360200190f35b61015661032e565b6040805163ffffffff9092168252519081900360200190f35b6101b7600480360360a081101561018557600080fd5b506001600160701b03813581169160208101359091169063ffffffff6040820135169060608101359060800135610341565b005b6000546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000546001600160701b031681565b60015481565b60025481565b600054600160701b90046001600160701b031681565b600080546001600160701b031661026a576040805162461bcd60e51b815260206004820152601560248201527405265736572766520697320657175616c20746f203605c1b604482015290519081900360640190fd5b600054600160701b90046001600160701b03166102c6576040805162461bcd60e51b815260206004820152601560248201527405265736572766520697320657175616c20746f203605c1b604482015290519081900360640190fd5b81156102fe57600054600160701b81046001600160701b03169060701b600160701b600160e01b0316816102f657fe5b049050610329565b6000546001600160701b03811690600160701b900460701b600160701b600160e01b0316816102f657fe5b919050565b600054600160e01b900463ffffffff1681565b600080546dffffffffffffffffffffffffffff19166001600160701b03968716176dffffffffffffffffffffffffffff60701b1916600160701b9590961694909402949094176001600160e01b0316600160e01b63ffffffff93909316929092029190911790915560015560025556fea2646970667358221220db371910d66685f137ea7adf79e08749b217eef7e2d8714e4a003bc8c7abe0e664736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reversedMarket\",\"type\":\"bool\"}],\"name\":\"getReservesFraction\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/MockUniswapTokenPair.sol\":\"MockUniswapTokenPair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/MockUniswapTokenPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\ncontract MockUniswapTokenPair {\\n    uint112 public reserve0;\\n    uint112 public reserve1;\\n    uint32 public blockTimestampLast;\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n\\n    constructor(\\n        uint112 reserve0_,\\n        uint112 reserve1_,\\n        uint32 blockTimestampLast_,\\n        uint256 price0CumulativeLast_,\\n        uint256 price1CumulativeLast_\\n    ) public {\\n        reserve0 = reserve0_;\\n        reserve1 = reserve1_;\\n        blockTimestampLast = blockTimestampLast_;\\n        price0CumulativeLast = price0CumulativeLast_;\\n        price1CumulativeLast = price1CumulativeLast_;\\n    }\\n\\n    function update(\\n        uint112 reserve0_,\\n        uint112 reserve1_,\\n        uint32 blockTimestampLast_,\\n        uint256 price0CumulativeLast_,\\n        uint256 price1CumulativeLast_\\n    ) public {\\n        reserve0 = reserve0_;\\n        reserve1 = reserve1_;\\n        blockTimestampLast = blockTimestampLast_;\\n        price0CumulativeLast = price0CumulativeLast_;\\n        price1CumulativeLast = price1CumulativeLast_;\\n    }\\n\\n    function getReserves() external view returns(uint112, uint112, uint32) {\\n        return (reserve0, reserve1, blockTimestampLast);\\n    }\\n\\n    function getReservesFraction(bool reversedMarket) external view returns (uint224) {\\n        require(reserve0 > 0, \\\"Reserve is equal to 0\\\");\\n        require(reserve1 > 0, \\\"Reserve is equal to 0\\\");\\n        if (reversedMarket) {\\n          return (uint224(reserve0) << 112) / reserve1;\\n        } else {\\n          return (uint224(reserve1) << 112) / reserve0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb701290f6bc47261b8a365c775c3d0e9a2b97ef73525854e8308c52d183f60e6\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/MockUniswapView.sol:MockUniswapView": {
      "abi": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"anchorPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAnchorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"storedAndPendingPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_UNISWAP_VIEW\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"anchorPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canAdminOverwrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSecondsBeforePriceIsStale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAnchorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"storedAndPendingPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"params\":{\"configs\":\"The static token configurations which define what prices are supported and how\"}},\"getTokenConfig(uint256)\":{\"params\":{\"i\":\"The index of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByCToken(address)\":{\"params\":{\"cToken\":\"The address of the cToken of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getTokenConfigByUnderlying(address)\":{\"params\":{\"underlying\":\"The address of the underlying asset of the config to get\"},\"returns\":{\"_0\":\"The config object\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals, for the given cToken address\"}},\"postPrices(address[])\":{\"details\":\"We let anyone pay to post anything, but only prices from Uniswap will be stored in the view.\",\"params\":{\"underlyings\":\"The underlying token addresses for which to get and post TWAPs\"}},\"price(address)\":{\"params\":{\"underlying\":\"The underlying token address for which to get the price (set to zero address for ETH)\"},\"returns\":{\"_0\":\"Price denominated in ETH, with 18 decimals\"}},\"storedAndPendingPrices(address[])\":{\"details\":\"Get both stored and pending prices for `underlyings` for comparison off-chain to determine if posting is needed.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AnchorPriceUpdated(address,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when anchor price is updated\"},\"PriceUpdated(address,uint256)\":{\"notice\":\"The event emitted when the stored price is updated\"},\"UniswapWindowUpdated(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"The event emitted when the uniswap window changes\"}},\"kind\":\"user\",\"methods\":{\"IS_UNISWAP_VIEW()\":{\"notice\":\"Constant indicating that this contract is a UniswapView\"},\"add((address,bytes32,uint256,uint8,uint256,address,bool)[])\":{\"notice\":\"Add new asset(s)\"},\"admin()\":{\"notice\":\"Admin address\"},\"anchorPeriod()\":{\"notice\":\"The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\"},\"canAdminOverwrite()\":{\"notice\":\"Whether or not existing token configs can be overwritten\"},\"changeAdmin(address)\":{\"notice\":\"Changes the admin\"},\"ethBaseUnit()\":{\"notice\":\"The number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"A common scaling factor to maintain precision\"},\"getTokenConfig(uint256)\":{\"notice\":\"Get the i-th config, according to the order they were passed in originally\"},\"getTokenConfigByCToken(address)\":{\"notice\":\"Get the config for the cToken\"},\"getTokenConfigByUnderlying(address)\":{\"notice\":\"Get the config for an underlying asset\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"isPublic()\":{\"notice\":\"If new token configs can be added by anyone\"},\"maxSecondsBeforePriceIsStale()\":{\"notice\":\"The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\"},\"newObservations(address)\":{\"notice\":\"The new observation for each underlying\"},\"numTokens()\":{\"notice\":\"The number of tokens this contract actually supports\"},\"oldObservations(address)\":{\"notice\":\"The old observation for each underlying\"},\"postPrices(address[])\":{\"notice\":\"Update Uniswap TWAP prices\"},\"price(address)\":{\"notice\":\"Get the official price for an underlying token address\"},\"prices(address)\":{\"notice\":\"Official prices by underlying\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/MockUniswapView.sol\":\"MockUniswapView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface CToken {\\r\\n    function isCEther() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface CErc20 {\\r\\n    function underlying() external view returns (address);\\r\\n}\\r\\n\\r\\ncontract UniswapConfig {\\r\\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\\r\\n    enum PriceSource {\\r\\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\\r\\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\\r\\n        REPORTER,  /// implies the price is set by the reporter (only available on UniswapAnchoredView)\\r\\n        TWAP,      /// implies the price is set by TWAPs (only available on UniswapView)\\r\\n        UNISWAP    /// implies the price is set by the direct Uniswap price (only available on UniswapDirectView)\\r\\n    }\\r\\n\\r\\n    /// @dev Describe how the USD price should be determined for an asset.\\r\\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\\r\\n    struct TokenConfig {\\r\\n        address underlying;\\r\\n        bytes32 symbolHash;\\r\\n        uint256 baseUnit;\\r\\n        PriceSource priceSource;\\r\\n        uint256 fixedPrice;\\r\\n        address uniswapMarket;\\r\\n        bool isUniswapReversed;\\r\\n    }\\r\\n\\r\\n    /// @dev Token config objects\\r\\n    TokenConfig[] internal _configs;\\r\\n\\r\\n    /// @dev Maps underlying addresses to token config indexes\\r\\n    mapping(address => uint256) internal _configIndexesByUnderlying;\\r\\n\\r\\n    /// @dev Maps underlying addresses to booleans indicating if they have token configs\\r\\n    mapping(address => bool) internal _configPresenceByUnderlying;\\r\\n    \\r\\n    /// @notice Admin address\\r\\n    address public admin;\\r\\n    \\r\\n    /// @notice Whether or not existing token configs can be overwritten\\r\\n    bool public canAdminOverwrite;\\r\\n\\r\\n    /// @notice The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n    uint256 public maxSecondsBeforePriceIsStale;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct an immutable store of configs into the contract data\\r\\n     * @param configs The configs for the supported assets\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(TokenConfig[] memory configs, bool _canAdminOverwrite, uint256 _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        admin = msg.sender;\\r\\n        canAdminOverwrite = _canAdminOverwrite;\\r\\n        maxSecondsBeforePriceIsStale = _maxSecondsBeforePriceIsStale;\\r\\n\\r\\n        // Add configs\\r\\n        _add(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function _add(TokenConfig[] memory configs) internal virtual {\\r\\n        // For each config\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // If !canAdminOverwrite, check for existing config\\r\\n            if (!canAdminOverwrite) require(!_configPresenceByUnderlying[configs[i].underlying], \\\"Token config already exists for this underlying token address.\\\");\\r\\n\\r\\n            // Add config to state\\r\\n            _configs.push(configs[i]);\\r\\n            _configIndexesByUnderlying[configs[i].underlying] = _configs.length - 1;\\r\\n            _configPresenceByUnderlying[configs[i].underlying] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Changes the admin\\r\\n    function changeAdmin(address newAdmin) external {\\r\\n        require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n        admin = newAdmin;\\r\\n    }\\r\\n\\r\\n    /// @notice The number of tokens this contract actually supports\\r\\n    function numTokens() public view returns (uint256) {\\r\\n        return _configs.length;\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by cToken address\\r\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\r\\n        return getUnderlyingIndex(CToken(cToken).isCEther() ? address(0) : CErc20(cToken).underlying());\\r\\n    }\\r\\n\\r\\n    /// @dev Get token config index by underlying ERC20 token address\\r\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\r\\n        return _configPresenceByUnderlying[underlying] ? _configIndexesByUnderlying[underlying] : uint(-1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the i-th config, according to the order they were passed in originally\\r\\n     * @param i The index of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\r\\n        require(i < numTokens(), \\\"token config not found\\\");\\r\\n        return _configs[i];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for the cToken\\r\\n     * @param cToken The address of the cToken of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\r\\n        uint index = getCTokenIndex(cToken);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the config for an underlying asset\\r\\n     * @param underlying The address of the underlying asset of the config to get\\r\\n     * @return The config object\\r\\n     */\\r\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\r\\n        uint index = getUnderlyingIndex(underlying);\\r\\n        if (index != uint(-1)) return getTokenConfig(index);\\r\\n        revert(\\\"token config not found\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb01fcfa0aba555d471ff2b824ac1190b91e3104cf5f5be3341d967a3442f1773\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\n\\r\\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\r\\n        // instead, get close to:\\r\\n        //  (x * 1e18) >> 112\\r\\n        // without risk of overflowing, e.g.:\\r\\n        //  (x) / 2 ** (112 - lg(1e18))\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n}\\r\\n\\r\\n// library with helper methods for oracles that are concerned with computing average prices\\r\\nlibrary UniswapV2OracleLibrary {\\r\\n    using FixedPoint for *;\\r\\n\\r\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\r\\n    function currentBlockTimestamp() internal view returns (uint32) {\\r\\n        return uint32(block.timestamp % 2 ** 32);\\r\\n    }\\r\\n\\r\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\r\\n    function currentCumulativePrices(\\r\\n        address pair\\r\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\r\\n        blockTimestamp = currentBlockTimestamp();\\r\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\r\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\r\\n\\r\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\r\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (blockTimestampLast != blockTimestamp) {\\r\\n            // subtraction overflow is desired\\r\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\r\\n            // addition overflow is desired\\r\\n            // counterfactual\\r\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\r\\n            // counterfactual\\r\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    function token0() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n}\\r\\n\\r\\nlibrary UniswapV2Library {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\r\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex'ff',\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\r\\n        uint amountInWithFee = amountIn.mul(997);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n}\\r\\n\\r\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\r\\nlibrary SafeMath {\\r\\n    function add(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\r\\n    }\\r\\n\\r\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\r\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\r\\n    }\\r\\n\\r\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\r\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xc78ec33425fba0a62e1c564bfe511c88165b3ca5525339f5b4b2b28412ab62ee\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./UniswapConfig.sol\\\";\\r\\nimport \\\"./UniswapLib.sol\\\";\\r\\n\\r\\nstruct Observation {\\r\\n    uint timestamp;\\r\\n    uint acc;\\r\\n}\\r\\n\\r\\ncontract UniswapView is UniswapConfig {\\r\\n    using FixedPoint for *;\\r\\n    \\r\\n    /// @notice Constant indicating that this contract is a UniswapView\\r\\n    bool constant public IS_UNISWAP_VIEW = true;\\r\\n\\r\\n    /// @notice The number of wei in 1 ETH\\r\\n    uint public constant ethBaseUnit = 1e18;\\r\\n\\r\\n    /// @notice A common scaling factor to maintain precision\\r\\n    uint public constant expScale = 1e18;\\r\\n\\r\\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\\r\\n    uint public immutable anchorPeriod;\\r\\n\\r\\n    /// @notice If new token configs can be added by anyone\\r\\n    bool public isPublic;\\r\\n\\r\\n    /// @notice Official prices by underlying\\r\\n    mapping(address => uint) public prices;\\r\\n\\r\\n    /// @notice The old observation for each underlying\\r\\n    mapping(address => Observation) public oldObservations;\\r\\n\\r\\n    /// @notice The new observation for each underlying\\r\\n    mapping(address => Observation) public newObservations;\\r\\n\\r\\n    /// @notice The event emitted when the stored price is updated\\r\\n    event PriceUpdated(address underlying, uint price);\\r\\n\\r\\n    /// @notice The event emitted when anchor price is updated\\r\\n    event AnchorPriceUpdated(address underlying, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\\r\\n\\r\\n    /// @notice The event emitted when the uniswap window changes\\r\\n    event UniswapWindowUpdated(address indexed underlying, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\r\\n\\r\\n    /// @dev The symbol hash for ETH\\r\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\r\\n\\r\\n    /**\\r\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\r\\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\\r\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     * @param _canAdminOverwrite Whether or not existing token configs can be overwritten (must be false if `_isPublic` is true)\\r\\n     * @param _isPublic If true, anyone can add assets, but they will be validated\\r\\n     * @param _maxSecondsBeforePriceIsStale The maxmimum number of seconds elapsed since the price was last updated before it is considered stale. If set to 0, no limit is enforced.\\r\\n     */\\r\\n    constructor(uint anchorPeriod_,\\r\\n                TokenConfig[] memory configs,\\r\\n                bool _canAdminOverwrite,\\r\\n                bool _isPublic,\\r\\n                uint256 _maxSecondsBeforePriceIsStale) UniswapConfig(configs, _canAdminOverwrite, _maxSecondsBeforePriceIsStale) public {\\r\\n        // Initialize variables\\r\\n        anchorPeriod = anchorPeriod_;\\r\\n        isPublic = _isPublic;\\r\\n\\r\\n        // If public, force set admin to 0, require !canAdminOverwrite, and check token configs\\r\\n        if (isPublic) {\\r\\n            admin = address(0);\\r\\n            require(!canAdminOverwrite, \\\"canAdminOverwrite must be set to false for public UniswapView contracts.\\\");\\r\\n            checkTokenConfigs(configs);\\r\\n        }\\r\\n\\r\\n        // Init token configs\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev UniswapV2Factory contract address.\\r\\n     */\\r\\n    address constant private UNISWAP_V2_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    \\r\\n    /**\\r\\n     * @dev WETH contract address.\\r\\n     */\\r\\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    /**\\r\\n     * @dev Verifies token configs\\r\\n     * @param configs The configs for the supported assets\\r\\n     */\\r\\n    function checkTokenConfigs(TokenConfig[] memory configs) internal view {\\r\\n        for (uint256 i = 0; i < configs.length; i++) {\\r\\n            // Check symbolHash for ETH\\r\\n            require(configs[i].symbolHash != ethHash, \\\"ETH does not need a price feed as all price feeds are based in ETH.\\\");\\r\\n\\r\\n            // Check symbolHash against underlying symbol\\r\\n            require(keccak256(abi.encodePacked(IERC20(configs[i].underlying).symbol())) == configs[i].symbolHash, \\\"Symbol mismatch between token config and ERC20 symbol method.\\\");\\r\\n\\r\\n            // Check baseUnit against underlying decimals\\r\\n            require(10 ** uint256(IERC20(configs[i].underlying).decimals()) == configs[i].baseUnit, \\\"Incorrect token config base unit.\\\");\\r\\n\\r\\n            // Check for WETH\\r\\n            if (configs[i].underlying == WETH_ADDRESS) {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.FIXED_ETH, \\\"Invalid WETH token config price source: must be FIXED_ETH.\\\");\\r\\n                \\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 1e18, \\\"WETH token config fixed price must be 1e18.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                require(configs[i].uniswapMarket == address(0), \\\"WETH Uniswap market not necessary.\\\");\\r\\n                configs[i].isUniswapReversed = false;\\r\\n            } else {\\r\\n                // Check price source\\r\\n                require(configs[i].priceSource == PriceSource.TWAP, \\\"Invalid token config price source: must be TWAP.\\\");\\r\\n\\r\\n                // Check fixed price\\r\\n                require(configs[i].fixedPrice == 0, \\\"Token config fixed price must be 0.\\\");\\r\\n\\r\\n                // Check uniswapMarket and isUniswapReversed\\r\\n                IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(UNISWAP_V2_FACTORY_ADDRESS, configs[i].underlying, WETH_ADDRESS));\\r\\n                require(configs[i].uniswapMarket == address(pair), \\\"Token config Uniswap market is not correct.\\\");\\r\\n                address token0 = pair.token0();\\r\\n                require((token0 == configs[i].underlying && !configs[i].isUniswapReversed) || (token0 != configs[i].underlying && configs[i].isUniswapReversed), \\\"Token config Uniswap reversal is incorrect.\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize token configs\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function initConfigs(TokenConfig[] memory configs) internal {\\r\\n        for (uint i = 0; i < configs.length; i++) {\\r\\n            TokenConfig memory config = configs[i];\\r\\n            require(config.baseUnit > 0, \\\"baseUnit must be greater than zero\\\");\\r\\n            address uniswapMarket = config.uniswapMarket;\\r\\n            if (config.priceSource == PriceSource.TWAP) {\\r\\n                require(uniswapMarket != address(0), \\\"TWAP prices must have a Uniswap market\\\");\\r\\n                address underlying = config.underlying;\\r\\n                uint cumulativePrice = currentCumulativePrice(config);\\r\\n                oldObservations[underlying].timestamp = block.timestamp;\\r\\n                newObservations[underlying].timestamp = block.timestamp;\\r\\n                oldObservations[underlying].acc = cumulativePrice;\\r\\n                newObservations[underlying].acc = cumulativePrice;\\r\\n                emit UniswapWindowUpdated(underlying, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\\r\\n            } else {\\r\\n                require(config.underlying != 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, \\\"USDC must be TWAP because FIXED_USD prices are based on the USDC price.\\\");\\r\\n                require(uniswapMarket == address(0), \\\"only TWAP prices utilize a Uniswap market\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add new asset(s)\\r\\n     * @param configs The static token configurations which define what prices are supported and how\\r\\n     */\\r\\n    function add(TokenConfig[] memory configs) external {\\r\\n        // If public, check token configs; if private, check that msg.sender == admin\\r\\n        if (isPublic) checkTokenConfigs(configs);\\r\\n        else require(msg.sender == admin, \\\"msg.sender is not admin\\\");\\r\\n\\r\\n        // Add and init token configs\\r\\n        _add(configs);\\r\\n        initConfigs(configs);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the official price for an underlying token address\\r\\n     * @param underlying The underlying token address for which to get the price (set to zero address for ETH)\\r\\n     * @return Price denominated in ETH, with 18 decimals\\r\\n     */\\r\\n    function price(address underlying) external view returns (uint) {\\r\\n        TokenConfig memory config = getTokenConfigByUnderlying(underlying);\\r\\n        return priceInternal(config);\\r\\n    }\\r\\n\\r\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\r\\n        if (config.priceSource == PriceSource.TWAP) {\\r\\n            uint256 averageObservationTimestamp = (oldObservations[config.underlying].timestamp + newObservations[config.underlying].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"TWAP price is stale.\\\");\\r\\n            return prices[config.underlying];\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_USD) {\\r\\n            // Use USDC/ETH price (requires a TWAP-based token config for USDC) to convert from USD to ETH\\r\\n            uint ethPerUsd = prices[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48];\\r\\n            require(ethPerUsd > 0, \\\"USDC price not set; cannot convert from USD to ETH.\\\");\\r\\n            uint256 averageObservationTimestamp = (oldObservations[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48].timestamp + newObservations[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48].timestamp) / 2;\\r\\n            if (maxSecondsBeforePriceIsStale > 0) require(block.timestamp <= averageObservationTimestamp + maxSecondsBeforePriceIsStale, \\\"USDC TWAP price is stale; cannot convert from USD to ETH.\\\");\\r\\n            return mul(config.fixedPrice, ethPerUsd) / 1e6;\\r\\n        }\\r\\n        if (config.priceSource == PriceSource.FIXED_ETH) return config.fixedPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the underlying price of a cToken\\r\\n     * @dev Implements the PriceOracle interface for Compound v2.\\r\\n     * @param cToken The cToken address for price retrieval\\r\\n     * @return Price denominated in ETH, with 18 decimals, for the given cToken address\\r\\n     */\\r\\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\\r\\n        if (CToken(cToken).isCEther()) return ethBaseUnit; // ETH does not have a token config as `prices` is based in ETH\\r\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\r\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\r\\n         // Since the prices in this view have 18 decimals, we must scale them by 1e(36 - 18 - baseUnit)\\r\\n        return mul(1e18, priceInternal(config)) / config.baseUnit;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update Uniswap TWAP prices\\r\\n     * @dev We let anyone pay to post anything, but only prices from Uniswap will be stored in the view.\\r\\n     * @param underlyings The underlying token addresses for which to get and post TWAPs\\r\\n     */\\r\\n    function postPrices(address[] calldata underlyings) external {\\r\\n        // Try to update the view storage\\r\\n        for (uint i = 0; i < underlyings.length; i++) {\\r\\n            postPriceInternal(underlyings[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function postPriceInternal(address underlying) internal {\\r\\n        TokenConfig memory config = getTokenConfigByUnderlying(underlying);\\r\\n        require(config.priceSource == PriceSource.TWAP, \\\"only TWAP prices get posted\\\");\\r\\n        uint anchorPrice = fetchAnchorPrice(underlying, config);\\r\\n        prices[underlying] = anchorPrice;\\r\\n        emit PriceUpdated(underlying, anchorPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/ETH price accumulator from Uniswap.\\r\\n     */\\r\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\r\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\r\\n        return config.isUniswapReversed ? cumulativePrice1 : cumulativePrice0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Fetches the current token/ETH price from Uniswap, with 18 decimals of precision.\\r\\n     */\\r\\n    function fetchAnchorPrice(address underlying, TokenConfig memory config) internal virtual returns (uint) {\\r\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\r\\n\\r\\n        // This should be impossible, but better safe than sorry\\r\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\r\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\r\\n\\r\\n        // Calculate uniswap time-weighted average price\\r\\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\\r\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\r\\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\\r\\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, 1e18);\\r\\n        uint anchorPrice;\\r\\n\\r\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\r\\n\\r\\n        // In the case of non-ETH tokens\\r\\n        // a. pokeWindowValues already handled uniswap reversed cases, so priceAverage will always be Token/ETH TWAP price.\\r\\n        // b. conversionFactor = 1e18\\r\\n        // unscaledPriceMantissa = priceAverage(token/ETH TWAP price) * expScale * conversionFactor\\r\\n        // so ->\\r\\n        // anchorPrice = priceAverage * tokenBaseUnit / ethBaseUnit * 1e18\\r\\n        //             = priceAverage * conversionFactor * tokenBaseUnit / ethBaseUnit\\r\\n        //             = unscaledPriceMantissa / expScale * tokenBaseUnit / ethBaseUnit\\r\\n        anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\r\\n\\r\\n        emit AnchorPriceUpdated(underlying, anchorPrice, oldTimestamp, block.timestamp);\\r\\n\\r\\n        return anchorPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get both stored and pending prices for `underlyings` for comparison off-chain to determine if posting is needed.\\r\\n     */\\r\\n    function storedAndPendingPrices(address[] calldata underlyings) external returns (uint256[] memory, uint256[] memory) {\\r\\n        uint256[] memory storedPrices = new uint256[](underlyings.length);\\r\\n        uint256[] memory pendingPrices = new uint256[](underlyings.length);\\r\\n\\r\\n        for (uint256 i = 0; i < underlyings.length; i++) {\\r\\n            address underlying = underlyings[i];\\r\\n            TokenConfig memory config = getTokenConfigByUnderlying(underlying);\\r\\n            require(config.priceSource == PriceSource.TWAP, \\\"only TWAP prices get posted\\\");\\r\\n            storedPrices[i] = prices[underlying];\\r\\n            pendingPrices[i] = fetchAnchorPrice(underlying, config);\\r\\n        }\\r\\n\\r\\n        return (storedPrices, pendingPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\r\\n     *  Update new and old observations of lagging window if period elapsed.\\r\\n     */\\r\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\r\\n        address underlying = config.underlying;\\r\\n        uint cumulativePrice = currentCumulativePrice(config);\\r\\n\\r\\n        Observation memory newObservation = newObservations[underlying];\\r\\n\\r\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\r\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\r\\n        if (timeElapsed >= anchorPeriod) {\\r\\n            oldObservations[underlying].timestamp = newObservation.timestamp;\\r\\n            oldObservations[underlying].acc = newObservation.acc;\\r\\n\\r\\n            newObservations[underlying].timestamp = block.timestamp;\\r\\n            newObservations[underlying].acc = cumulativePrice;\\r\\n            emit UniswapWindowUpdated(config.underlying, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\r\\n        }\\r\\n        return (cumulativePrice, oldObservations[underlying].acc, oldObservations[underlying].timestamp);\\r\\n    }\\r\\n\\r\\n    /// @dev Overflow proof multiplication\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a == 0) return 0;\\r\\n        uint c = a * b;\\r\\n        require(c / a == b, \\\"multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa2eaf85b9256396242c134acf756c1bab7cb0e080878e68eba2cf3a192f0470c\",\"license\":\"GPL-3.0\"},\"tests/contracts/MockUniswapView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.6.10;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../../contracts/Uniswap/UniswapView.sol\\\";\\r\\n\\r\\ncontract MockUniswapView is UniswapView {\\r\\n    mapping(address => uint) public anchorPrices;\\r\\n\\r\\n    constructor(uint anchorPeriod_,\\r\\n                TokenConfig[] memory configs) UniswapView(anchorPeriod_, configs, false, false, 0) public {}\\r\\n\\r\\n    function setAnchorPrice(address underlying, uint price) external {\\r\\n        anchorPrices[underlying] = price;\\r\\n    }\\r\\n\\r\\n    function fetchAnchorPrice(address underlying, TokenConfig memory config) internal override returns (uint) {\\r\\n        config; // Shh\\r\\n        return anchorPrices[underlying];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x438650d38dd7a71eb9dcfba810991437a7e1cf46f0b017486ad34a28661ffba9\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/ProxyPriceOracle.sol:MockAnchorOracle": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"anchors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setAnchorPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MockCToken\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506102b5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c8062e4768b14610066578063127ffda014610094578063485feabe146100c05780635e9a523c146100da578063692374e3146101005780639d0405c71461013f575b600080fd5b6100926004803603604081101561007c57600080fd5b506001600160a01b03813516906020013561016b565b005b610092600480360360408110156100aa57600080fd5b506001600160a01b038135169060200135610187565b6100c861020e565b60408051918252519081900360200190f35b6100c8600480360360208110156100f057600080fd5b50356001600160a01b0316610213565b6101266004803603602081101561011657600080fd5b50356001600160a01b0316610225565b6040805192835260208301919091528051918290030190f35b6100926004803603604081101561015557600080fd5b506001600160a01b03813516906020013561023e565b6001600160a01b03909116600090815260208190526040902055565b80600080846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156101c457600080fd5b505afa1580156101d8573d6000803e3d6000fd5b505050506040513d60208110156101ee57600080fd5b50516001600160a01b031681526020810191909152604001600020555050565b60f081565b60006020819052908152604090205481565b6001602081905260009182526040909120805491015482565b604080518082018252918252670de0b6b3a764000060208084019182526001600160a01b03909416600090815260019485905291909120915182555191015556fea2646970667358221220c3b4ba9e47c62673dedc6b8cb6a4860c4be2d25204dab7f8e4feb0bf3cc300dc64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"anchors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setAnchorPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MockCToken\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/ProxyPriceOracle.sol\":\"MockAnchorOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/ProxyPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// @dev mock version of v1 price oracle, allowing manually setting return values\\ncontract ProxyPriceOracle {\\n\\n    mapping(address => uint256) public prices;\\n\\n    function setUnderlyingPrice(address ctoken, uint price) external {\\n        prices[ctoken] = price;\\n    }\\n\\n    function getUnderlyingPrice(address ctoken) external view returns (uint) {\\n        return prices[ctoken];\\n    }\\n}\\n\\n\\ncontract MockAnchorOracle {\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    mapping(address => uint256) public assetPrices;\\n\\n    function setPrice(address asset, uint price) external {\\n        assetPrices[asset] = price;\\n    }\\n\\n    function setUnderlyingPrice(MockCToken asset, uint price) external {\\n        assetPrices[asset.underlying()] = price;\\n    }\\n\\n\\n    uint public constant numBlocksPerPeriod = 240;\\n\\n    mapping(address => Anchor) public anchors;\\n    function setAnchorPeriod(address asset, uint period) external {\\n        // dont care about anchor price, only period\\n        anchors[asset] = Anchor({period: period, priceMantissa: 1e18});\\n    }\\n}\\n\\ncontract MockCToken {\\n    address public underlying;\\n    constructor(address underlying_) public {\\n        underlying = underlying_;\\n    }\\n}\\n\",\"keccak256\":\"0x9fa105ab4a388ff2851d21560f0ebb706df8ad7ac088ad5595455a4e5fce647e\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/ProxyPriceOracle.sol:MockCToken": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b506040516100f83803806100f88339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556094806100646000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636f307dc314602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6000546001600160a01b03168156fea26469706673582212209de6537bdcbc675bd2ee06e3b27f8fcf0f16421663af12c5b1154fd5dc804e3a64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/ProxyPriceOracle.sol\":\"MockCToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/ProxyPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// @dev mock version of v1 price oracle, allowing manually setting return values\\ncontract ProxyPriceOracle {\\n\\n    mapping(address => uint256) public prices;\\n\\n    function setUnderlyingPrice(address ctoken, uint price) external {\\n        prices[ctoken] = price;\\n    }\\n\\n    function getUnderlyingPrice(address ctoken) external view returns (uint) {\\n        return prices[ctoken];\\n    }\\n}\\n\\n\\ncontract MockAnchorOracle {\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    mapping(address => uint256) public assetPrices;\\n\\n    function setPrice(address asset, uint price) external {\\n        assetPrices[asset] = price;\\n    }\\n\\n    function setUnderlyingPrice(MockCToken asset, uint price) external {\\n        assetPrices[asset.underlying()] = price;\\n    }\\n\\n\\n    uint public constant numBlocksPerPeriod = 240;\\n\\n    mapping(address => Anchor) public anchors;\\n    function setAnchorPeriod(address asset, uint period) external {\\n        // dont care about anchor price, only period\\n        anchors[asset] = Anchor({period: period, priceMantissa: 1e18});\\n    }\\n}\\n\\ncontract MockCToken {\\n    address public underlying;\\n    constructor(address underlying_) public {\\n        underlying = underlying_;\\n    }\\n}\\n\",\"keccak256\":\"0x9fa105ab4a388ff2851d21560f0ebb706df8ad7ac088ad5595455a4e5fce647e\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/ProxyPriceOracle.sol:ProxyPriceOracle": {
      "abi": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b50610151806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063127ffda014610046578063cfed246b14610074578063fc57d4df146100ac575b600080fd5b6100726004803603604081101561005c57600080fd5b506001600160a01b0381351690602001356100d2565b005b61009a6004803603602081101561008a57600080fd5b50356001600160a01b03166100ee565b60408051918252519081900360200190f35b61009a600480360360208110156100c257600080fd5b50356001600160a01b0316610100565b6001600160a01b03909116600090815260208190526040902055565b60006020819052908152604090205481565b6001600160a01b03166000908152602081905260409020549056fea2646970667358221220f4c9f2825e9fb665b5d7ff6157620294b003d485100c3227ca79ac268b23b64d64736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/ProxyPriceOracle.sol\":\"ProxyPriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/ProxyPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// @dev mock version of v1 price oracle, allowing manually setting return values\\ncontract ProxyPriceOracle {\\n\\n    mapping(address => uint256) public prices;\\n\\n    function setUnderlyingPrice(address ctoken, uint price) external {\\n        prices[ctoken] = price;\\n    }\\n\\n    function getUnderlyingPrice(address ctoken) external view returns (uint) {\\n        return prices[ctoken];\\n    }\\n}\\n\\n\\ncontract MockAnchorOracle {\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    mapping(address => uint256) public assetPrices;\\n\\n    function setPrice(address asset, uint price) external {\\n        assetPrices[asset] = price;\\n    }\\n\\n    function setUnderlyingPrice(MockCToken asset, uint price) external {\\n        assetPrices[asset.underlying()] = price;\\n    }\\n\\n\\n    uint public constant numBlocksPerPeriod = 240;\\n\\n    mapping(address => Anchor) public anchors;\\n    function setAnchorPeriod(address asset, uint period) external {\\n        // dont care about anchor price, only period\\n        anchors[asset] = Anchor({period: period, priceMantissa: 1e18});\\n    }\\n}\\n\\ncontract MockCToken {\\n    address public underlying;\\n    constructor(address underlying_) public {\\n        underlying = underlying_;\\n    }\\n}\\n\",\"keccak256\":\"0x9fa105ab4a388ff2851d21560f0ebb706df8ad7ac088ad5595455a4e5fce647e\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    },
    "tests/contracts/Test.sol:TestOverflow": {
      "abi": "[{\"inputs\":[],\"name\":\"testOverflow\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "bin": "608060405234801561001057600080fd5b5060e58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638040cac414602d575b600080fd5b60336035565b005b6801fffffffffffffffe604c565b60405180910390fd5b60026fffffffffffffffffffffffffffffffff82160467ffffffffffffffff8082161460885760405162461bcd60e51b8152600401604390608c565b5050565b60208082526009908201526837bb32b9333637bb9960b91b60408201526060019056fea26469706673582212207dfb0ba73ad65d443d4dc4286370f7e23154c36a0be32b78244565d7aebe986864736f6c634300060c0033",
      "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"testOverflow\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tests/contracts/Test.sol\":\"TestOverflow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/Test.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ncontract TestOverflow {\\n\\n    function testOverflow() public pure {\\n        uint128 sum = uint128(uint64(-1)) + uint128(uint64(-1));\\n        require(sum == 36893488147419103230, \\\"overflows\\\");// (2^64 -1)*2\\n        uint64 half = uint64(sum / 2);\\n        require(half == 18446744073709551615, \\\"overflow2\\\");// 2 ^ 64 - 1\\n    }\\n}\\n\",\"keccak256\":\"0x54896be410933145616d842ffd8a5052b3e6736a414fb84c0f8bb9dd7abb5487\",\"license\":\"GPL-3.0\"}},\"version\":1}"
    }
  },
  "version": "0.6.12+commit.27d51765.Linux.g++"
}